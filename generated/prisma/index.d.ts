
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Content
 * 
 */
export type Content = $Result.DefaultSelection<Prisma.$ContentPayload>
/**
 * Model Collection
 * 
 */
export type Collection = $Result.DefaultSelection<Prisma.$CollectionPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model Wallet
 * 
 */
export type Wallet = $Result.DefaultSelection<Prisma.$WalletPayload>
/**
 * Model ContentComment
 * 
 */
export type ContentComment = $Result.DefaultSelection<Prisma.$ContentCommentPayload>
/**
 * Model Followers
 * 
 */
export type Followers = $Result.DefaultSelection<Prisma.$FollowersPayload>
/**
 * Model ContentPayment
 * 
 */
export type ContentPayment = $Result.DefaultSelection<Prisma.$ContentPaymentPayload>
/**
 * Model CollectionPayment
 * 
 */
export type CollectionPayment = $Result.DefaultSelection<Prisma.$CollectionPaymentPayload>
/**
 * Model Categorable
 * 
 */
export type Categorable = $Result.DefaultSelection<Prisma.$CategorablePayload>
/**
 * Model Taggable
 * 
 */
export type Taggable = $Result.DefaultSelection<Prisma.$TaggablePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

export type Role = (typeof Role)[keyof typeof Role]


export const ContentStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

export type ContentStatus = (typeof ContentStatus)[keyof typeof ContentStatus]


export const SubscriptionStatus: {
  ACTIVE: 'ACTIVE',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]


export const PaymentStatus: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type ContentStatus = $Enums.ContentStatus

export const ContentStatus: typeof $Enums.ContentStatus

export type SubscriptionStatus = $Enums.SubscriptionStatus

export const SubscriptionStatus: typeof $Enums.SubscriptionStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.content`: Exposes CRUD operations for the **Content** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contents
    * const contents = await prisma.content.findMany()
    * ```
    */
  get content(): Prisma.ContentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.collection`: Exposes CRUD operations for the **Collection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Collections
    * const collections = await prisma.collection.findMany()
    * ```
    */
  get collection(): Prisma.CollectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **Wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.WalletDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contentComment`: Exposes CRUD operations for the **ContentComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContentComments
    * const contentComments = await prisma.contentComment.findMany()
    * ```
    */
  get contentComment(): Prisma.ContentCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.followers`: Exposes CRUD operations for the **Followers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Followers
    * const followers = await prisma.followers.findMany()
    * ```
    */
  get followers(): Prisma.FollowersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contentPayment`: Exposes CRUD operations for the **ContentPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContentPayments
    * const contentPayments = await prisma.contentPayment.findMany()
    * ```
    */
  get contentPayment(): Prisma.ContentPaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.collectionPayment`: Exposes CRUD operations for the **CollectionPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollectionPayments
    * const collectionPayments = await prisma.collectionPayment.findMany()
    * ```
    */
  get collectionPayment(): Prisma.CollectionPaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categorable`: Exposes CRUD operations for the **Categorable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorables
    * const categorables = await prisma.categorable.findMany()
    * ```
    */
  get categorable(): Prisma.CategorableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taggable`: Exposes CRUD operations for the **Taggable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Taggables
    * const taggables = await prisma.taggable.findMany()
    * ```
    */
  get taggable(): Prisma.TaggableDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Content: 'Content',
    Collection: 'Collection',
    Category: 'Category',
    Tag: 'Tag',
    Subscription: 'Subscription',
    Wallet: 'Wallet',
    ContentComment: 'ContentComment',
    Followers: 'Followers',
    ContentPayment: 'ContentPayment',
    CollectionPayment: 'CollectionPayment',
    Categorable: 'Categorable',
    Taggable: 'Taggable'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "content" | "collection" | "category" | "tag" | "subscription" | "wallet" | "contentComment" | "followers" | "contentPayment" | "collectionPayment" | "categorable" | "taggable"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Content: {
        payload: Prisma.$ContentPayload<ExtArgs>
        fields: Prisma.ContentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          findFirst: {
            args: Prisma.ContentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          findMany: {
            args: Prisma.ContentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>[]
          }
          create: {
            args: Prisma.ContentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          createMany: {
            args: Prisma.ContentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>[]
          }
          delete: {
            args: Prisma.ContentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          update: {
            args: Prisma.ContentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          deleteMany: {
            args: Prisma.ContentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>[]
          }
          upsert: {
            args: Prisma.ContentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          aggregate: {
            args: Prisma.ContentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContent>
          }
          groupBy: {
            args: Prisma.ContentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContentCountArgs<ExtArgs>
            result: $Utils.Optional<ContentCountAggregateOutputType> | number
          }
        }
      }
      Collection: {
        payload: Prisma.$CollectionPayload<ExtArgs>
        fields: Prisma.CollectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          findFirst: {
            args: Prisma.CollectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          findMany: {
            args: Prisma.CollectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>[]
          }
          create: {
            args: Prisma.CollectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          createMany: {
            args: Prisma.CollectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>[]
          }
          delete: {
            args: Prisma.CollectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          update: {
            args: Prisma.CollectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          deleteMany: {
            args: Prisma.CollectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CollectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>[]
          }
          upsert: {
            args: Prisma.CollectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          aggregate: {
            args: Prisma.CollectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollection>
          }
          groupBy: {
            args: Prisma.CollectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollectionCountArgs<ExtArgs>
            result: $Utils.Optional<CollectionCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      Wallet: {
        payload: Prisma.$WalletPayload<ExtArgs>
        fields: Prisma.WalletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findFirst: {
            args: Prisma.WalletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findMany: {
            args: Prisma.WalletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          create: {
            args: Prisma.WalletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          createMany: {
            args: Prisma.WalletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WalletCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          delete: {
            args: Prisma.WalletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          update: {
            args: Prisma.WalletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          deleteMany: {
            args: Prisma.WalletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WalletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WalletUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          upsert: {
            args: Prisma.WalletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          aggregate: {
            args: Prisma.WalletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallet>
          }
          groupBy: {
            args: Prisma.WalletGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletCountArgs<ExtArgs>
            result: $Utils.Optional<WalletCountAggregateOutputType> | number
          }
        }
      }
      ContentComment: {
        payload: Prisma.$ContentCommentPayload<ExtArgs>
        fields: Prisma.ContentCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContentCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContentCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload>
          }
          findFirst: {
            args: Prisma.ContentCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContentCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload>
          }
          findMany: {
            args: Prisma.ContentCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload>[]
          }
          create: {
            args: Prisma.ContentCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload>
          }
          createMany: {
            args: Prisma.ContentCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContentCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload>[]
          }
          delete: {
            args: Prisma.ContentCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload>
          }
          update: {
            args: Prisma.ContentCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload>
          }
          deleteMany: {
            args: Prisma.ContentCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContentCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContentCommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload>[]
          }
          upsert: {
            args: Prisma.ContentCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentCommentPayload>
          }
          aggregate: {
            args: Prisma.ContentCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContentComment>
          }
          groupBy: {
            args: Prisma.ContentCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContentCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContentCommentCountArgs<ExtArgs>
            result: $Utils.Optional<ContentCommentCountAggregateOutputType> | number
          }
        }
      }
      Followers: {
        payload: Prisma.$FollowersPayload<ExtArgs>
        fields: Prisma.FollowersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          findFirst: {
            args: Prisma.FollowersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          findMany: {
            args: Prisma.FollowersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>[]
          }
          create: {
            args: Prisma.FollowersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          createMany: {
            args: Prisma.FollowersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FollowersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>[]
          }
          delete: {
            args: Prisma.FollowersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          update: {
            args: Prisma.FollowersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          deleteMany: {
            args: Prisma.FollowersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FollowersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>[]
          }
          upsert: {
            args: Prisma.FollowersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          aggregate: {
            args: Prisma.FollowersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollowers>
          }
          groupBy: {
            args: Prisma.FollowersGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowersGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowersCountArgs<ExtArgs>
            result: $Utils.Optional<FollowersCountAggregateOutputType> | number
          }
        }
      }
      ContentPayment: {
        payload: Prisma.$ContentPaymentPayload<ExtArgs>
        fields: Prisma.ContentPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContentPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContentPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload>
          }
          findFirst: {
            args: Prisma.ContentPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContentPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload>
          }
          findMany: {
            args: Prisma.ContentPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload>[]
          }
          create: {
            args: Prisma.ContentPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload>
          }
          createMany: {
            args: Prisma.ContentPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContentPaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload>[]
          }
          delete: {
            args: Prisma.ContentPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload>
          }
          update: {
            args: Prisma.ContentPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload>
          }
          deleteMany: {
            args: Prisma.ContentPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContentPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContentPaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload>[]
          }
          upsert: {
            args: Prisma.ContentPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentPaymentPayload>
          }
          aggregate: {
            args: Prisma.ContentPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContentPayment>
          }
          groupBy: {
            args: Prisma.ContentPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContentPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContentPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<ContentPaymentCountAggregateOutputType> | number
          }
        }
      }
      CollectionPayment: {
        payload: Prisma.$CollectionPaymentPayload<ExtArgs>
        fields: Prisma.CollectionPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollectionPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollectionPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload>
          }
          findFirst: {
            args: Prisma.CollectionPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollectionPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload>
          }
          findMany: {
            args: Prisma.CollectionPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload>[]
          }
          create: {
            args: Prisma.CollectionPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload>
          }
          createMany: {
            args: Prisma.CollectionPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollectionPaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload>[]
          }
          delete: {
            args: Prisma.CollectionPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload>
          }
          update: {
            args: Prisma.CollectionPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload>
          }
          deleteMany: {
            args: Prisma.CollectionPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollectionPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CollectionPaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload>[]
          }
          upsert: {
            args: Prisma.CollectionPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPaymentPayload>
          }
          aggregate: {
            args: Prisma.CollectionPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollectionPayment>
          }
          groupBy: {
            args: Prisma.CollectionPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollectionPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollectionPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<CollectionPaymentCountAggregateOutputType> | number
          }
        }
      }
      Categorable: {
        payload: Prisma.$CategorablePayload<ExtArgs>
        fields: Prisma.CategorableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategorableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategorableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload>
          }
          findFirst: {
            args: Prisma.CategorableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategorableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload>
          }
          findMany: {
            args: Prisma.CategorableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload>[]
          }
          create: {
            args: Prisma.CategorableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload>
          }
          createMany: {
            args: Prisma.CategorableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategorableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload>[]
          }
          delete: {
            args: Prisma.CategorableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload>
          }
          update: {
            args: Prisma.CategorableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload>
          }
          deleteMany: {
            args: Prisma.CategorableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategorableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategorableUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload>[]
          }
          upsert: {
            args: Prisma.CategorableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategorablePayload>
          }
          aggregate: {
            args: Prisma.CategorableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategorable>
          }
          groupBy: {
            args: Prisma.CategorableGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategorableGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategorableCountArgs<ExtArgs>
            result: $Utils.Optional<CategorableCountAggregateOutputType> | number
          }
        }
      }
      Taggable: {
        payload: Prisma.$TaggablePayload<ExtArgs>
        fields: Prisma.TaggableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaggableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaggableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload>
          }
          findFirst: {
            args: Prisma.TaggableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaggableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload>
          }
          findMany: {
            args: Prisma.TaggableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload>[]
          }
          create: {
            args: Prisma.TaggableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload>
          }
          createMany: {
            args: Prisma.TaggableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaggableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload>[]
          }
          delete: {
            args: Prisma.TaggableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload>
          }
          update: {
            args: Prisma.TaggableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload>
          }
          deleteMany: {
            args: Prisma.TaggableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaggableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaggableUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload>[]
          }
          upsert: {
            args: Prisma.TaggableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaggablePayload>
          }
          aggregate: {
            args: Prisma.TaggableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaggable>
          }
          groupBy: {
            args: Prisma.TaggableGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaggableGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaggableCountArgs<ExtArgs>
            result: $Utils.Optional<TaggableCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    content?: ContentOmit
    collection?: CollectionOmit
    category?: CategoryOmit
    tag?: TagOmit
    subscription?: SubscriptionOmit
    wallet?: WalletOmit
    contentComment?: ContentCommentOmit
    followers?: FollowersOmit
    contentPayment?: ContentPaymentOmit
    collectionPayment?: CollectionPaymentOmit
    categorable?: CategorableOmit
    taggable?: TaggableOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    referrals: number
    contents_created: number
    collections_created: number
    subscriptions: number
    followers: number
    following: number
    content_payments: number
    collection_payments: number
    content_comments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrals?: boolean | UserCountOutputTypeCountReferralsArgs
    contents_created?: boolean | UserCountOutputTypeCountContents_createdArgs
    collections_created?: boolean | UserCountOutputTypeCountCollections_createdArgs
    subscriptions?: boolean | UserCountOutputTypeCountSubscriptionsArgs
    followers?: boolean | UserCountOutputTypeCountFollowersArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
    content_payments?: boolean | UserCountOutputTypeCountContent_paymentsArgs
    collection_payments?: boolean | UserCountOutputTypeCountCollection_paymentsArgs
    content_comments?: boolean | UserCountOutputTypeCountContent_commentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContents_createdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCollections_createdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowersWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowersWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContent_paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentPaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCollection_paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionPaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContent_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentCommentWhereInput
  }


  /**
   * Count Type ContentCountOutputType
   */

  export type ContentCountOutputType = {
    subscriptions: number
    collections: number
    categories: number
    tags: number
    payments: number
    comments: number
  }

  export type ContentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | ContentCountOutputTypeCountSubscriptionsArgs
    collections?: boolean | ContentCountOutputTypeCountCollectionsArgs
    categories?: boolean | ContentCountOutputTypeCountCategoriesArgs
    tags?: boolean | ContentCountOutputTypeCountTagsArgs
    payments?: boolean | ContentCountOutputTypeCountPaymentsArgs
    comments?: boolean | ContentCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentCountOutputType
     */
    select?: ContentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountCollectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategorableWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaggableWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentPaymentWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentCommentWhereInput
  }


  /**
   * Count Type CollectionCountOutputType
   */

  export type CollectionCountOutputType = {
    contents: number
    payments: number
  }

  export type CollectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contents?: boolean | CollectionCountOutputTypeCountContentsArgs
    payments?: boolean | CollectionCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * CollectionCountOutputType without action
   */
  export type CollectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCountOutputType
     */
    select?: CollectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CollectionCountOutputType without action
   */
  export type CollectionCountOutputTypeCountContentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentWhereInput
  }

  /**
   * CollectionCountOutputType without action
   */
  export type CollectionCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionPaymentWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    contents: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contents?: boolean | CategoryCountOutputTypeCountContentsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountContentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategorableWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    contents: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contents?: boolean | TagCountOutputTypeCountContentsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountContentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaggableWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    followerCount: number | null
    followingCount: number | null
    contentCount: number | null
  }

  export type UserSumAggregateOutputType = {
    followerCount: number | null
    followingCount: number | null
    contentCount: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    name: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    username: string | null
    bio: string | null
    dob: Date | null
    referral_id: string | null
    email_verified: boolean | null
    phone_number: string | null
    kyc_verified: boolean | null
    user_charge_type: string | null
    role: $Enums.Role | null
    verified: boolean | null
    avatar: string | null
    followerCount: number | null
    followingCount: number | null
    contentCount: number | null
    lastActive: Date | null
    referrerId: string | null
    privyId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    name: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    username: string | null
    bio: string | null
    dob: Date | null
    referral_id: string | null
    email_verified: boolean | null
    phone_number: string | null
    kyc_verified: boolean | null
    user_charge_type: string | null
    role: $Enums.Role | null
    verified: boolean | null
    avatar: string | null
    followerCount: number | null
    followingCount: number | null
    contentCount: number | null
    lastActive: Date | null
    referrerId: string | null
    privyId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    name: number
    firstName: number
    lastName: number
    email: number
    username: number
    bio: number
    dob: number
    referral_id: number
    email_verified: number
    phone_number: number
    kyc_verified: number
    user_charge_type: number
    role: number
    verified: number
    avatar: number
    followerCount: number
    followingCount: number
    contentCount: number
    lastActive: number
    referrerId: number
    privyId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    followerCount?: true
    followingCount?: true
    contentCount?: true
  }

  export type UserSumAggregateInputType = {
    followerCount?: true
    followingCount?: true
    contentCount?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    firstName?: true
    lastName?: true
    email?: true
    username?: true
    bio?: true
    dob?: true
    referral_id?: true
    email_verified?: true
    phone_number?: true
    kyc_verified?: true
    user_charge_type?: true
    role?: true
    verified?: true
    avatar?: true
    followerCount?: true
    followingCount?: true
    contentCount?: true
    lastActive?: true
    referrerId?: true
    privyId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    firstName?: true
    lastName?: true
    email?: true
    username?: true
    bio?: true
    dob?: true
    referral_id?: true
    email_verified?: true
    phone_number?: true
    kyc_verified?: true
    user_charge_type?: true
    role?: true
    verified?: true
    avatar?: true
    followerCount?: true
    followingCount?: true
    contentCount?: true
    lastActive?: true
    referrerId?: true
    privyId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    firstName?: true
    lastName?: true
    email?: true
    username?: true
    bio?: true
    dob?: true
    referral_id?: true
    email_verified?: true
    phone_number?: true
    kyc_verified?: true
    user_charge_type?: true
    role?: true
    verified?: true
    avatar?: true
    followerCount?: true
    followingCount?: true
    contentCount?: true
    lastActive?: true
    referrerId?: true
    privyId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    name: string
    firstName: string | null
    lastName: string | null
    email: string
    username: string
    bio: string | null
    dob: Date | null
    referral_id: string | null
    email_verified: boolean
    phone_number: string | null
    kyc_verified: boolean | null
    user_charge_type: string
    role: $Enums.Role
    verified: boolean
    avatar: string | null
    followerCount: number
    followingCount: number
    contentCount: number
    lastActive: Date | null
    referrerId: string | null
    privyId: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    username?: boolean
    bio?: boolean
    dob?: boolean
    referral_id?: boolean
    email_verified?: boolean
    phone_number?: boolean
    kyc_verified?: boolean
    user_charge_type?: boolean
    role?: boolean
    verified?: boolean
    avatar?: boolean
    followerCount?: boolean
    followingCount?: boolean
    contentCount?: boolean
    lastActive?: boolean
    referrerId?: boolean
    privyId?: boolean
    referrer?: boolean | User$referrerArgs<ExtArgs>
    referrals?: boolean | User$referralsArgs<ExtArgs>
    contents_created?: boolean | User$contents_createdArgs<ExtArgs>
    collections_created?: boolean | User$collections_createdArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    wallet?: boolean | User$walletArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    content_payments?: boolean | User$content_paymentsArgs<ExtArgs>
    collection_payments?: boolean | User$collection_paymentsArgs<ExtArgs>
    content_comments?: boolean | User$content_commentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    username?: boolean
    bio?: boolean
    dob?: boolean
    referral_id?: boolean
    email_verified?: boolean
    phone_number?: boolean
    kyc_verified?: boolean
    user_charge_type?: boolean
    role?: boolean
    verified?: boolean
    avatar?: boolean
    followerCount?: boolean
    followingCount?: boolean
    contentCount?: boolean
    lastActive?: boolean
    referrerId?: boolean
    privyId?: boolean
    referrer?: boolean | User$referrerArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    username?: boolean
    bio?: boolean
    dob?: boolean
    referral_id?: boolean
    email_verified?: boolean
    phone_number?: boolean
    kyc_verified?: boolean
    user_charge_type?: boolean
    role?: boolean
    verified?: boolean
    avatar?: boolean
    followerCount?: boolean
    followingCount?: boolean
    contentCount?: boolean
    lastActive?: boolean
    referrerId?: boolean
    privyId?: boolean
    referrer?: boolean | User$referrerArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    username?: boolean
    bio?: boolean
    dob?: boolean
    referral_id?: boolean
    email_verified?: boolean
    phone_number?: boolean
    kyc_verified?: boolean
    user_charge_type?: boolean
    role?: boolean
    verified?: boolean
    avatar?: boolean
    followerCount?: boolean
    followingCount?: boolean
    contentCount?: boolean
    lastActive?: boolean
    referrerId?: boolean
    privyId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "name" | "firstName" | "lastName" | "email" | "username" | "bio" | "dob" | "referral_id" | "email_verified" | "phone_number" | "kyc_verified" | "user_charge_type" | "role" | "verified" | "avatar" | "followerCount" | "followingCount" | "contentCount" | "lastActive" | "referrerId" | "privyId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | User$referrerArgs<ExtArgs>
    referrals?: boolean | User$referralsArgs<ExtArgs>
    contents_created?: boolean | User$contents_createdArgs<ExtArgs>
    collections_created?: boolean | User$collections_createdArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    wallet?: boolean | User$walletArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    content_payments?: boolean | User$content_paymentsArgs<ExtArgs>
    collection_payments?: boolean | User$collection_paymentsArgs<ExtArgs>
    content_comments?: boolean | User$content_commentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | User$referrerArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | User$referrerArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      referrer: Prisma.$UserPayload<ExtArgs> | null
      referrals: Prisma.$UserPayload<ExtArgs>[]
      contents_created: Prisma.$ContentPayload<ExtArgs>[]
      collections_created: Prisma.$CollectionPayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      wallet: Prisma.$WalletPayload<ExtArgs> | null
      followers: Prisma.$FollowersPayload<ExtArgs>[]
      following: Prisma.$FollowersPayload<ExtArgs>[]
      content_payments: Prisma.$ContentPaymentPayload<ExtArgs>[]
      collection_payments: Prisma.$CollectionPaymentPayload<ExtArgs>[]
      content_comments: Prisma.$ContentCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      name: string
      firstName: string | null
      lastName: string | null
      email: string
      username: string
      bio: string | null
      dob: Date | null
      referral_id: string | null
      email_verified: boolean
      phone_number: string | null
      kyc_verified: boolean | null
      user_charge_type: string
      role: $Enums.Role
      verified: boolean
      avatar: string | null
      followerCount: number
      followingCount: number
      contentCount: number
      lastActive: Date | null
      referrerId: string | null
      privyId: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referrer<T extends User$referrerArgs<ExtArgs> = {}>(args?: Subset<T, User$referrerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    referrals<T extends User$referralsArgs<ExtArgs> = {}>(args?: Subset<T, User$referralsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contents_created<T extends User$contents_createdArgs<ExtArgs> = {}>(args?: Subset<T, User$contents_createdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    collections_created<T extends User$collections_createdArgs<ExtArgs> = {}>(args?: Subset<T, User$collections_createdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscriptions<T extends User$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wallet<T extends User$walletArgs<ExtArgs> = {}>(args?: Subset<T, User$walletArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    followers<T extends User$followersArgs<ExtArgs> = {}>(args?: Subset<T, User$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    following<T extends User$followingArgs<ExtArgs> = {}>(args?: Subset<T, User$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    content_payments<T extends User$content_paymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$content_paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    collection_payments<T extends User$collection_paymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$collection_paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    content_comments<T extends User$content_commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$content_commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
    readonly deleted_at: FieldRef<"User", 'DateTime'>
    readonly name: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly dob: FieldRef<"User", 'DateTime'>
    readonly referral_id: FieldRef<"User", 'String'>
    readonly email_verified: FieldRef<"User", 'Boolean'>
    readonly phone_number: FieldRef<"User", 'String'>
    readonly kyc_verified: FieldRef<"User", 'Boolean'>
    readonly user_charge_type: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly verified: FieldRef<"User", 'Boolean'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly followerCount: FieldRef<"User", 'Int'>
    readonly followingCount: FieldRef<"User", 'Int'>
    readonly contentCount: FieldRef<"User", 'Int'>
    readonly lastActive: FieldRef<"User", 'DateTime'>
    readonly referrerId: FieldRef<"User", 'String'>
    readonly privyId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.referrer
   */
  export type User$referrerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.referrals
   */
  export type User$referralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.contents_created
   */
  export type User$contents_createdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    where?: ContentWhereInput
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    cursor?: ContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * User.collections_created
   */
  export type User$collections_createdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    cursor?: CollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * User.subscriptions
   */
  export type User$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * User.wallet
   */
  export type User$walletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    where?: WalletWhereInput
  }

  /**
   * User.followers
   */
  export type User$followersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    where?: FollowersWhereInput
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    cursor?: FollowersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowersScalarFieldEnum | FollowersScalarFieldEnum[]
  }

  /**
   * User.following
   */
  export type User$followingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    where?: FollowersWhereInput
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    cursor?: FollowersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowersScalarFieldEnum | FollowersScalarFieldEnum[]
  }

  /**
   * User.content_payments
   */
  export type User$content_paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    where?: ContentPaymentWhereInput
    orderBy?: ContentPaymentOrderByWithRelationInput | ContentPaymentOrderByWithRelationInput[]
    cursor?: ContentPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentPaymentScalarFieldEnum | ContentPaymentScalarFieldEnum[]
  }

  /**
   * User.collection_payments
   */
  export type User$collection_paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    where?: CollectionPaymentWhereInput
    orderBy?: CollectionPaymentOrderByWithRelationInput | CollectionPaymentOrderByWithRelationInput[]
    cursor?: CollectionPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionPaymentScalarFieldEnum | CollectionPaymentScalarFieldEnum[]
  }

  /**
   * User.content_comments
   */
  export type User$content_commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    where?: ContentCommentWhereInput
    orderBy?: ContentCommentOrderByWithRelationInput | ContentCommentOrderByWithRelationInput[]
    cursor?: ContentCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentCommentScalarFieldEnum | ContentCommentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Content
   */

  export type AggregateContent = {
    _count: ContentCountAggregateOutputType | null
    _avg: ContentAvgAggregateOutputType | null
    _sum: ContentSumAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  export type ContentAvgAggregateOutputType = {
    views: number | null
    commentCount: number | null
    likeCount: number | null
    viewCount: number | null
  }

  export type ContentSumAggregateOutputType = {
    views: number | null
    commentCount: number | null
    likeCount: number | null
    viewCount: number | null
  }

  export type ContentMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    title: string | null
    description: string | null
    ownerId: string | null
    type: string | null
    is_available: boolean | null
    approved_by_admin: boolean | null
    show_only_in_collections: boolean | null
    views: number | null
    is_adult: boolean | null
    is_challenge: boolean | null
    live_ended_at: Date | null
    scheduled_date: Date | null
    archived_at: Date | null
    live_type: string | null
    live_provider: string | null
    commentCount: number | null
    likeCount: number | null
    viewCount: number | null
    status: $Enums.ContentStatus | null
    published: boolean | null
    isPremium: boolean | null
    isPromoted: boolean | null
    mediaUrl: string | null
    thumbnailUrl: string | null
  }

  export type ContentMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    title: string | null
    description: string | null
    ownerId: string | null
    type: string | null
    is_available: boolean | null
    approved_by_admin: boolean | null
    show_only_in_collections: boolean | null
    views: number | null
    is_adult: boolean | null
    is_challenge: boolean | null
    live_ended_at: Date | null
    scheduled_date: Date | null
    archived_at: Date | null
    live_type: string | null
    live_provider: string | null
    commentCount: number | null
    likeCount: number | null
    viewCount: number | null
    status: $Enums.ContentStatus | null
    published: boolean | null
    isPremium: boolean | null
    isPromoted: boolean | null
    mediaUrl: string | null
    thumbnailUrl: string | null
  }

  export type ContentCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    title: number
    description: number
    ownerId: number
    type: number
    is_available: number
    approved_by_admin: number
    show_only_in_collections: number
    views: number
    is_adult: number
    is_challenge: number
    live_ended_at: number
    scheduled_date: number
    archived_at: number
    live_type: number
    live_provider: number
    commentCount: number
    likeCount: number
    viewCount: number
    status: number
    published: number
    isPremium: number
    isPromoted: number
    mediaUrl: number
    thumbnailUrl: number
    _all: number
  }


  export type ContentAvgAggregateInputType = {
    views?: true
    commentCount?: true
    likeCount?: true
    viewCount?: true
  }

  export type ContentSumAggregateInputType = {
    views?: true
    commentCount?: true
    likeCount?: true
    viewCount?: true
  }

  export type ContentMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    title?: true
    description?: true
    ownerId?: true
    type?: true
    is_available?: true
    approved_by_admin?: true
    show_only_in_collections?: true
    views?: true
    is_adult?: true
    is_challenge?: true
    live_ended_at?: true
    scheduled_date?: true
    archived_at?: true
    live_type?: true
    live_provider?: true
    commentCount?: true
    likeCount?: true
    viewCount?: true
    status?: true
    published?: true
    isPremium?: true
    isPromoted?: true
    mediaUrl?: true
    thumbnailUrl?: true
  }

  export type ContentMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    title?: true
    description?: true
    ownerId?: true
    type?: true
    is_available?: true
    approved_by_admin?: true
    show_only_in_collections?: true
    views?: true
    is_adult?: true
    is_challenge?: true
    live_ended_at?: true
    scheduled_date?: true
    archived_at?: true
    live_type?: true
    live_provider?: true
    commentCount?: true
    likeCount?: true
    viewCount?: true
    status?: true
    published?: true
    isPremium?: true
    isPromoted?: true
    mediaUrl?: true
    thumbnailUrl?: true
  }

  export type ContentCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    title?: true
    description?: true
    ownerId?: true
    type?: true
    is_available?: true
    approved_by_admin?: true
    show_only_in_collections?: true
    views?: true
    is_adult?: true
    is_challenge?: true
    live_ended_at?: true
    scheduled_date?: true
    archived_at?: true
    live_type?: true
    live_provider?: true
    commentCount?: true
    likeCount?: true
    viewCount?: true
    status?: true
    published?: true
    isPremium?: true
    isPromoted?: true
    mediaUrl?: true
    thumbnailUrl?: true
    _all?: true
  }

  export type ContentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Content to aggregate.
     */
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     */
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contents
    **/
    _count?: true | ContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentMaxAggregateInputType
  }

  export type GetContentAggregateType<T extends ContentAggregateArgs> = {
        [P in keyof T & keyof AggregateContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContent[P]>
      : GetScalarType<T[P], AggregateContent[P]>
  }




  export type ContentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentWhereInput
    orderBy?: ContentOrderByWithAggregationInput | ContentOrderByWithAggregationInput[]
    by: ContentScalarFieldEnum[] | ContentScalarFieldEnum
    having?: ContentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentCountAggregateInputType | true
    _avg?: ContentAvgAggregateInputType
    _sum?: ContentSumAggregateInputType
    _min?: ContentMinAggregateInputType
    _max?: ContentMaxAggregateInputType
  }

  export type ContentGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    title: string
    description: string | null
    ownerId: string
    type: string
    is_available: boolean
    approved_by_admin: boolean
    show_only_in_collections: boolean
    views: number
    is_adult: boolean
    is_challenge: boolean
    live_ended_at: Date | null
    scheduled_date: Date | null
    archived_at: Date | null
    live_type: string | null
    live_provider: string | null
    commentCount: number
    likeCount: number
    viewCount: number
    status: $Enums.ContentStatus
    published: boolean
    isPremium: boolean
    isPromoted: boolean
    mediaUrl: string | null
    thumbnailUrl: string | null
    _count: ContentCountAggregateOutputType | null
    _avg: ContentAvgAggregateOutputType | null
    _sum: ContentSumAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  type GetContentGroupByPayload<T extends ContentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentGroupByOutputType[P]>
            : GetScalarType<T[P], ContentGroupByOutputType[P]>
        }
      >
    >


  export type ContentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    title?: boolean
    description?: boolean
    ownerId?: boolean
    type?: boolean
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: boolean
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: boolean
    scheduled_date?: boolean
    archived_at?: boolean
    live_type?: boolean
    live_provider?: boolean
    commentCount?: boolean
    likeCount?: boolean
    viewCount?: boolean
    status?: boolean
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    subscriptions?: boolean | Content$subscriptionsArgs<ExtArgs>
    collections?: boolean | Content$collectionsArgs<ExtArgs>
    categories?: boolean | Content$categoriesArgs<ExtArgs>
    tags?: boolean | Content$tagsArgs<ExtArgs>
    payments?: boolean | Content$paymentsArgs<ExtArgs>
    comments?: boolean | Content$commentsArgs<ExtArgs>
    _count?: boolean | ContentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["content"]>

  export type ContentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    title?: boolean
    description?: boolean
    ownerId?: boolean
    type?: boolean
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: boolean
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: boolean
    scheduled_date?: boolean
    archived_at?: boolean
    live_type?: boolean
    live_provider?: boolean
    commentCount?: boolean
    likeCount?: boolean
    viewCount?: boolean
    status?: boolean
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["content"]>

  export type ContentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    title?: boolean
    description?: boolean
    ownerId?: boolean
    type?: boolean
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: boolean
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: boolean
    scheduled_date?: boolean
    archived_at?: boolean
    live_type?: boolean
    live_provider?: boolean
    commentCount?: boolean
    likeCount?: boolean
    viewCount?: boolean
    status?: boolean
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["content"]>

  export type ContentSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    title?: boolean
    description?: boolean
    ownerId?: boolean
    type?: boolean
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: boolean
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: boolean
    scheduled_date?: boolean
    archived_at?: boolean
    live_type?: boolean
    live_provider?: boolean
    commentCount?: boolean
    likeCount?: boolean
    viewCount?: boolean
    status?: boolean
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
  }

  export type ContentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "title" | "description" | "ownerId" | "type" | "is_available" | "approved_by_admin" | "show_only_in_collections" | "views" | "is_adult" | "is_challenge" | "live_ended_at" | "scheduled_date" | "archived_at" | "live_type" | "live_provider" | "commentCount" | "likeCount" | "viewCount" | "status" | "published" | "isPremium" | "isPromoted" | "mediaUrl" | "thumbnailUrl", ExtArgs["result"]["content"]>
  export type ContentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    subscriptions?: boolean | Content$subscriptionsArgs<ExtArgs>
    collections?: boolean | Content$collectionsArgs<ExtArgs>
    categories?: boolean | Content$categoriesArgs<ExtArgs>
    tags?: boolean | Content$tagsArgs<ExtArgs>
    payments?: boolean | Content$paymentsArgs<ExtArgs>
    comments?: boolean | Content$commentsArgs<ExtArgs>
    _count?: boolean | ContentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ContentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Content"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      collections: Prisma.$CollectionPayload<ExtArgs>[]
      categories: Prisma.$CategorablePayload<ExtArgs>[]
      tags: Prisma.$TaggablePayload<ExtArgs>[]
      payments: Prisma.$ContentPaymentPayload<ExtArgs>[]
      comments: Prisma.$ContentCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      title: string
      description: string | null
      ownerId: string
      type: string
      is_available: boolean
      approved_by_admin: boolean
      show_only_in_collections: boolean
      views: number
      is_adult: boolean
      is_challenge: boolean
      live_ended_at: Date | null
      scheduled_date: Date | null
      archived_at: Date | null
      live_type: string | null
      live_provider: string | null
      commentCount: number
      likeCount: number
      viewCount: number
      status: $Enums.ContentStatus
      published: boolean
      isPremium: boolean
      isPromoted: boolean
      mediaUrl: string | null
      thumbnailUrl: string | null
    }, ExtArgs["result"]["content"]>
    composites: {}
  }

  type ContentGetPayload<S extends boolean | null | undefined | ContentDefaultArgs> = $Result.GetResult<Prisma.$ContentPayload, S>

  type ContentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContentCountAggregateInputType | true
    }

  export interface ContentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Content'], meta: { name: 'Content' } }
    /**
     * Find zero or one Content that matches the filter.
     * @param {ContentFindUniqueArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContentFindUniqueArgs>(args: SelectSubset<T, ContentFindUniqueArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Content that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContentFindUniqueOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContentFindUniqueOrThrowArgs>(args: SelectSubset<T, ContentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Content that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindFirstArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContentFindFirstArgs>(args?: SelectSubset<T, ContentFindFirstArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Content that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindFirstOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContentFindFirstOrThrowArgs>(args?: SelectSubset<T, ContentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contents
     * const contents = await prisma.content.findMany()
     * 
     * // Get first 10 Contents
     * const contents = await prisma.content.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentWithIdOnly = await prisma.content.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContentFindManyArgs>(args?: SelectSubset<T, ContentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Content.
     * @param {ContentCreateArgs} args - Arguments to create a Content.
     * @example
     * // Create one Content
     * const Content = await prisma.content.create({
     *   data: {
     *     // ... data to create a Content
     *   }
     * })
     * 
     */
    create<T extends ContentCreateArgs>(args: SelectSubset<T, ContentCreateArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contents.
     * @param {ContentCreateManyArgs} args - Arguments to create many Contents.
     * @example
     * // Create many Contents
     * const content = await prisma.content.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContentCreateManyArgs>(args?: SelectSubset<T, ContentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contents and returns the data saved in the database.
     * @param {ContentCreateManyAndReturnArgs} args - Arguments to create many Contents.
     * @example
     * // Create many Contents
     * const content = await prisma.content.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contents and only return the `id`
     * const contentWithIdOnly = await prisma.content.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContentCreateManyAndReturnArgs>(args?: SelectSubset<T, ContentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Content.
     * @param {ContentDeleteArgs} args - Arguments to delete one Content.
     * @example
     * // Delete one Content
     * const Content = await prisma.content.delete({
     *   where: {
     *     // ... filter to delete one Content
     *   }
     * })
     * 
     */
    delete<T extends ContentDeleteArgs>(args: SelectSubset<T, ContentDeleteArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Content.
     * @param {ContentUpdateArgs} args - Arguments to update one Content.
     * @example
     * // Update one Content
     * const content = await prisma.content.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContentUpdateArgs>(args: SelectSubset<T, ContentUpdateArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contents.
     * @param {ContentDeleteManyArgs} args - Arguments to filter Contents to delete.
     * @example
     * // Delete a few Contents
     * const { count } = await prisma.content.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContentDeleteManyArgs>(args?: SelectSubset<T, ContentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contents
     * const content = await prisma.content.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContentUpdateManyArgs>(args: SelectSubset<T, ContentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contents and returns the data updated in the database.
     * @param {ContentUpdateManyAndReturnArgs} args - Arguments to update many Contents.
     * @example
     * // Update many Contents
     * const content = await prisma.content.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contents and only return the `id`
     * const contentWithIdOnly = await prisma.content.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContentUpdateManyAndReturnArgs>(args: SelectSubset<T, ContentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Content.
     * @param {ContentUpsertArgs} args - Arguments to update or create a Content.
     * @example
     * // Update or create a Content
     * const content = await prisma.content.upsert({
     *   create: {
     *     // ... data to create a Content
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Content we want to update
     *   }
     * })
     */
    upsert<T extends ContentUpsertArgs>(args: SelectSubset<T, ContentUpsertArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCountArgs} args - Arguments to filter Contents to count.
     * @example
     * // Count the number of Contents
     * const count = await prisma.content.count({
     *   where: {
     *     // ... the filter for the Contents we want to count
     *   }
     * })
    **/
    count<T extends ContentCountArgs>(
      args?: Subset<T, ContentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentAggregateArgs>(args: Subset<T, ContentAggregateArgs>): Prisma.PrismaPromise<GetContentAggregateType<T>>

    /**
     * Group by Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentGroupByArgs['orderBy'] }
        : { orderBy?: ContentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Content model
   */
  readonly fields: ContentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Content.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subscriptions<T extends Content$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Content$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    collections<T extends Content$collectionsArgs<ExtArgs> = {}>(args?: Subset<T, Content$collectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends Content$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Content$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tags<T extends Content$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Content$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Content$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Content$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Content$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Content$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Content model
   */
  interface ContentFieldRefs {
    readonly id: FieldRef<"Content", 'String'>
    readonly created_at: FieldRef<"Content", 'DateTime'>
    readonly updated_at: FieldRef<"Content", 'DateTime'>
    readonly deleted_at: FieldRef<"Content", 'DateTime'>
    readonly title: FieldRef<"Content", 'String'>
    readonly description: FieldRef<"Content", 'String'>
    readonly ownerId: FieldRef<"Content", 'String'>
    readonly type: FieldRef<"Content", 'String'>
    readonly is_available: FieldRef<"Content", 'Boolean'>
    readonly approved_by_admin: FieldRef<"Content", 'Boolean'>
    readonly show_only_in_collections: FieldRef<"Content", 'Boolean'>
    readonly views: FieldRef<"Content", 'Int'>
    readonly is_adult: FieldRef<"Content", 'Boolean'>
    readonly is_challenge: FieldRef<"Content", 'Boolean'>
    readonly live_ended_at: FieldRef<"Content", 'DateTime'>
    readonly scheduled_date: FieldRef<"Content", 'DateTime'>
    readonly archived_at: FieldRef<"Content", 'DateTime'>
    readonly live_type: FieldRef<"Content", 'String'>
    readonly live_provider: FieldRef<"Content", 'String'>
    readonly commentCount: FieldRef<"Content", 'Int'>
    readonly likeCount: FieldRef<"Content", 'Int'>
    readonly viewCount: FieldRef<"Content", 'Int'>
    readonly status: FieldRef<"Content", 'ContentStatus'>
    readonly published: FieldRef<"Content", 'Boolean'>
    readonly isPremium: FieldRef<"Content", 'Boolean'>
    readonly isPromoted: FieldRef<"Content", 'Boolean'>
    readonly mediaUrl: FieldRef<"Content", 'String'>
    readonly thumbnailUrl: FieldRef<"Content", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Content findUnique
   */
  export type ContentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Content to fetch.
     */
    where: ContentWhereUniqueInput
  }

  /**
   * Content findUniqueOrThrow
   */
  export type ContentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Content to fetch.
     */
    where: ContentWhereUniqueInput
  }

  /**
   * Content findFirst
   */
  export type ContentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Content to fetch.
     */
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     */
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contents.
     */
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contents.
     */
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Content findFirstOrThrow
   */
  export type ContentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Content to fetch.
     */
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     */
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contents.
     */
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contents.
     */
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Content findMany
   */
  export type ContentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Contents to fetch.
     */
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     */
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contents.
     */
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     */
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Content create
   */
  export type ContentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * The data needed to create a Content.
     */
    data: XOR<ContentCreateInput, ContentUncheckedCreateInput>
  }

  /**
   * Content createMany
   */
  export type ContentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contents.
     */
    data: ContentCreateManyInput | ContentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Content createManyAndReturn
   */
  export type ContentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * The data used to create many Contents.
     */
    data: ContentCreateManyInput | ContentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Content update
   */
  export type ContentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * The data needed to update a Content.
     */
    data: XOR<ContentUpdateInput, ContentUncheckedUpdateInput>
    /**
     * Choose, which Content to update.
     */
    where: ContentWhereUniqueInput
  }

  /**
   * Content updateMany
   */
  export type ContentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contents.
     */
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyInput>
    /**
     * Filter which Contents to update
     */
    where?: ContentWhereInput
    /**
     * Limit how many Contents to update.
     */
    limit?: number
  }

  /**
   * Content updateManyAndReturn
   */
  export type ContentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * The data used to update Contents.
     */
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyInput>
    /**
     * Filter which Contents to update
     */
    where?: ContentWhereInput
    /**
     * Limit how many Contents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Content upsert
   */
  export type ContentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * The filter to search for the Content to update in case it exists.
     */
    where: ContentWhereUniqueInput
    /**
     * In case the Content found by the `where` argument doesn't exist, create a new Content with this data.
     */
    create: XOR<ContentCreateInput, ContentUncheckedCreateInput>
    /**
     * In case the Content was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContentUpdateInput, ContentUncheckedUpdateInput>
  }

  /**
   * Content delete
   */
  export type ContentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter which Content to delete.
     */
    where: ContentWhereUniqueInput
  }

  /**
   * Content deleteMany
   */
  export type ContentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contents to delete
     */
    where?: ContentWhereInput
    /**
     * Limit how many Contents to delete.
     */
    limit?: number
  }

  /**
   * Content.subscriptions
   */
  export type Content$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Content.collections
   */
  export type Content$collectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    cursor?: CollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Content.categories
   */
  export type Content$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    where?: CategorableWhereInput
    orderBy?: CategorableOrderByWithRelationInput | CategorableOrderByWithRelationInput[]
    cursor?: CategorableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategorableScalarFieldEnum | CategorableScalarFieldEnum[]
  }

  /**
   * Content.tags
   */
  export type Content$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    where?: TaggableWhereInput
    orderBy?: TaggableOrderByWithRelationInput | TaggableOrderByWithRelationInput[]
    cursor?: TaggableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaggableScalarFieldEnum | TaggableScalarFieldEnum[]
  }

  /**
   * Content.payments
   */
  export type Content$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    where?: ContentPaymentWhereInput
    orderBy?: ContentPaymentOrderByWithRelationInput | ContentPaymentOrderByWithRelationInput[]
    cursor?: ContentPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentPaymentScalarFieldEnum | ContentPaymentScalarFieldEnum[]
  }

  /**
   * Content.comments
   */
  export type Content$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    where?: ContentCommentWhereInput
    orderBy?: ContentCommentOrderByWithRelationInput | ContentCommentOrderByWithRelationInput[]
    cursor?: ContentCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentCommentScalarFieldEnum | ContentCommentScalarFieldEnum[]
  }

  /**
   * Content without action
   */
  export type ContentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
  }


  /**
   * Model Collection
   */

  export type AggregateCollection = {
    _count: CollectionCountAggregateOutputType | null
    _min: CollectionMinAggregateOutputType | null
    _max: CollectionMaxAggregateOutputType | null
  }

  export type CollectionMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    name: string | null
    description: string | null
    ownerId: string | null
    is_available: boolean | null
    approved_by_admin: boolean | null
    isPremium: boolean | null
    isPromoted: boolean | null
    thumbnailUrl: string | null
  }

  export type CollectionMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    name: string | null
    description: string | null
    ownerId: string | null
    is_available: boolean | null
    approved_by_admin: boolean | null
    isPremium: boolean | null
    isPromoted: boolean | null
    thumbnailUrl: string | null
  }

  export type CollectionCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    name: number
    description: number
    ownerId: number
    is_available: number
    approved_by_admin: number
    isPremium: number
    isPromoted: number
    thumbnailUrl: number
    _all: number
  }


  export type CollectionMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    description?: true
    ownerId?: true
    is_available?: true
    approved_by_admin?: true
    isPremium?: true
    isPromoted?: true
    thumbnailUrl?: true
  }

  export type CollectionMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    description?: true
    ownerId?: true
    is_available?: true
    approved_by_admin?: true
    isPremium?: true
    isPromoted?: true
    thumbnailUrl?: true
  }

  export type CollectionCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    description?: true
    ownerId?: true
    is_available?: true
    approved_by_admin?: true
    isPremium?: true
    isPromoted?: true
    thumbnailUrl?: true
    _all?: true
  }

  export type CollectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collection to aggregate.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Collections
    **/
    _count?: true | CollectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionMaxAggregateInputType
  }

  export type GetCollectionAggregateType<T extends CollectionAggregateArgs> = {
        [P in keyof T & keyof AggregateCollection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollection[P]>
      : GetScalarType<T[P], AggregateCollection[P]>
  }




  export type CollectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithAggregationInput | CollectionOrderByWithAggregationInput[]
    by: CollectionScalarFieldEnum[] | CollectionScalarFieldEnum
    having?: CollectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionCountAggregateInputType | true
    _min?: CollectionMinAggregateInputType
    _max?: CollectionMaxAggregateInputType
  }

  export type CollectionGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    name: string
    description: string | null
    ownerId: string
    is_available: boolean
    approved_by_admin: boolean
    isPremium: boolean
    isPromoted: boolean
    thumbnailUrl: string | null
    _count: CollectionCountAggregateOutputType | null
    _min: CollectionMinAggregateOutputType | null
    _max: CollectionMaxAggregateOutputType | null
  }

  type GetCollectionGroupByPayload<T extends CollectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionGroupByOutputType[P]>
        }
      >
    >


  export type CollectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    contents?: boolean | Collection$contentsArgs<ExtArgs>
    payments?: boolean | Collection$paymentsArgs<ExtArgs>
    _count?: boolean | CollectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collection"]>

  export type CollectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collection"]>

  export type CollectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collection"]>

  export type CollectionSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: boolean
  }

  export type CollectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "name" | "description" | "ownerId" | "is_available" | "approved_by_admin" | "isPremium" | "isPromoted" | "thumbnailUrl", ExtArgs["result"]["collection"]>
  export type CollectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    contents?: boolean | Collection$contentsArgs<ExtArgs>
    payments?: boolean | Collection$paymentsArgs<ExtArgs>
    _count?: boolean | CollectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CollectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CollectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CollectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Collection"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      contents: Prisma.$ContentPayload<ExtArgs>[]
      payments: Prisma.$CollectionPaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      name: string
      description: string | null
      ownerId: string
      is_available: boolean
      approved_by_admin: boolean
      isPremium: boolean
      isPromoted: boolean
      thumbnailUrl: string | null
    }, ExtArgs["result"]["collection"]>
    composites: {}
  }

  type CollectionGetPayload<S extends boolean | null | undefined | CollectionDefaultArgs> = $Result.GetResult<Prisma.$CollectionPayload, S>

  type CollectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CollectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CollectionCountAggregateInputType | true
    }

  export interface CollectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Collection'], meta: { name: 'Collection' } }
    /**
     * Find zero or one Collection that matches the filter.
     * @param {CollectionFindUniqueArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollectionFindUniqueArgs>(args: SelectSubset<T, CollectionFindUniqueArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Collection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CollectionFindUniqueOrThrowArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollectionFindUniqueOrThrowArgs>(args: SelectSubset<T, CollectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Collection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindFirstArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollectionFindFirstArgs>(args?: SelectSubset<T, CollectionFindFirstArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Collection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindFirstOrThrowArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollectionFindFirstOrThrowArgs>(args?: SelectSubset<T, CollectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Collections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Collections
     * const collections = await prisma.collection.findMany()
     * 
     * // Get first 10 Collections
     * const collections = await prisma.collection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collectionWithIdOnly = await prisma.collection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollectionFindManyArgs>(args?: SelectSubset<T, CollectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Collection.
     * @param {CollectionCreateArgs} args - Arguments to create a Collection.
     * @example
     * // Create one Collection
     * const Collection = await prisma.collection.create({
     *   data: {
     *     // ... data to create a Collection
     *   }
     * })
     * 
     */
    create<T extends CollectionCreateArgs>(args: SelectSubset<T, CollectionCreateArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Collections.
     * @param {CollectionCreateManyArgs} args - Arguments to create many Collections.
     * @example
     * // Create many Collections
     * const collection = await prisma.collection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollectionCreateManyArgs>(args?: SelectSubset<T, CollectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Collections and returns the data saved in the database.
     * @param {CollectionCreateManyAndReturnArgs} args - Arguments to create many Collections.
     * @example
     * // Create many Collections
     * const collection = await prisma.collection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Collections and only return the `id`
     * const collectionWithIdOnly = await prisma.collection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollectionCreateManyAndReturnArgs>(args?: SelectSubset<T, CollectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Collection.
     * @param {CollectionDeleteArgs} args - Arguments to delete one Collection.
     * @example
     * // Delete one Collection
     * const Collection = await prisma.collection.delete({
     *   where: {
     *     // ... filter to delete one Collection
     *   }
     * })
     * 
     */
    delete<T extends CollectionDeleteArgs>(args: SelectSubset<T, CollectionDeleteArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Collection.
     * @param {CollectionUpdateArgs} args - Arguments to update one Collection.
     * @example
     * // Update one Collection
     * const collection = await prisma.collection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollectionUpdateArgs>(args: SelectSubset<T, CollectionUpdateArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Collections.
     * @param {CollectionDeleteManyArgs} args - Arguments to filter Collections to delete.
     * @example
     * // Delete a few Collections
     * const { count } = await prisma.collection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollectionDeleteManyArgs>(args?: SelectSubset<T, CollectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Collections
     * const collection = await prisma.collection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollectionUpdateManyArgs>(args: SelectSubset<T, CollectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collections and returns the data updated in the database.
     * @param {CollectionUpdateManyAndReturnArgs} args - Arguments to update many Collections.
     * @example
     * // Update many Collections
     * const collection = await prisma.collection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Collections and only return the `id`
     * const collectionWithIdOnly = await prisma.collection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CollectionUpdateManyAndReturnArgs>(args: SelectSubset<T, CollectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Collection.
     * @param {CollectionUpsertArgs} args - Arguments to update or create a Collection.
     * @example
     * // Update or create a Collection
     * const collection = await prisma.collection.upsert({
     *   create: {
     *     // ... data to create a Collection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Collection we want to update
     *   }
     * })
     */
    upsert<T extends CollectionUpsertArgs>(args: SelectSubset<T, CollectionUpsertArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCountArgs} args - Arguments to filter Collections to count.
     * @example
     * // Count the number of Collections
     * const count = await prisma.collection.count({
     *   where: {
     *     // ... the filter for the Collections we want to count
     *   }
     * })
    **/
    count<T extends CollectionCountArgs>(
      args?: Subset<T, CollectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Collection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionAggregateArgs>(args: Subset<T, CollectionAggregateArgs>): Prisma.PrismaPromise<GetCollectionAggregateType<T>>

    /**
     * Group by Collection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionGroupByArgs['orderBy'] }
        : { orderBy?: CollectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Collection model
   */
  readonly fields: CollectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Collection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contents<T extends Collection$contentsArgs<ExtArgs> = {}>(args?: Subset<T, Collection$contentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Collection$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Collection$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Collection model
   */
  interface CollectionFieldRefs {
    readonly id: FieldRef<"Collection", 'String'>
    readonly created_at: FieldRef<"Collection", 'DateTime'>
    readonly updated_at: FieldRef<"Collection", 'DateTime'>
    readonly deleted_at: FieldRef<"Collection", 'DateTime'>
    readonly name: FieldRef<"Collection", 'String'>
    readonly description: FieldRef<"Collection", 'String'>
    readonly ownerId: FieldRef<"Collection", 'String'>
    readonly is_available: FieldRef<"Collection", 'Boolean'>
    readonly approved_by_admin: FieldRef<"Collection", 'Boolean'>
    readonly isPremium: FieldRef<"Collection", 'Boolean'>
    readonly isPromoted: FieldRef<"Collection", 'Boolean'>
    readonly thumbnailUrl: FieldRef<"Collection", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Collection findUnique
   */
  export type CollectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection findUniqueOrThrow
   */
  export type CollectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection findFirst
   */
  export type CollectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collections.
     */
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Collection findFirstOrThrow
   */
  export type CollectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collections.
     */
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Collection findMany
   */
  export type CollectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collections to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Collection create
   */
  export type CollectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Collection.
     */
    data: XOR<CollectionCreateInput, CollectionUncheckedCreateInput>
  }

  /**
   * Collection createMany
   */
  export type CollectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Collections.
     */
    data: CollectionCreateManyInput | CollectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Collection createManyAndReturn
   */
  export type CollectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * The data used to create many Collections.
     */
    data: CollectionCreateManyInput | CollectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Collection update
   */
  export type CollectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Collection.
     */
    data: XOR<CollectionUpdateInput, CollectionUncheckedUpdateInput>
    /**
     * Choose, which Collection to update.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection updateMany
   */
  export type CollectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Collections.
     */
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyInput>
    /**
     * Filter which Collections to update
     */
    where?: CollectionWhereInput
    /**
     * Limit how many Collections to update.
     */
    limit?: number
  }

  /**
   * Collection updateManyAndReturn
   */
  export type CollectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * The data used to update Collections.
     */
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyInput>
    /**
     * Filter which Collections to update
     */
    where?: CollectionWhereInput
    /**
     * Limit how many Collections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Collection upsert
   */
  export type CollectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Collection to update in case it exists.
     */
    where: CollectionWhereUniqueInput
    /**
     * In case the Collection found by the `where` argument doesn't exist, create a new Collection with this data.
     */
    create: XOR<CollectionCreateInput, CollectionUncheckedCreateInput>
    /**
     * In case the Collection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollectionUpdateInput, CollectionUncheckedUpdateInput>
  }

  /**
   * Collection delete
   */
  export type CollectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter which Collection to delete.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection deleteMany
   */
  export type CollectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collections to delete
     */
    where?: CollectionWhereInput
    /**
     * Limit how many Collections to delete.
     */
    limit?: number
  }

  /**
   * Collection.contents
   */
  export type Collection$contentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    where?: ContentWhereInput
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    cursor?: ContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Collection.payments
   */
  export type Collection$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    where?: CollectionPaymentWhereInput
    orderBy?: CollectionPaymentOrderByWithRelationInput | CollectionPaymentOrderByWithRelationInput[]
    cursor?: CollectionPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionPaymentScalarFieldEnum | CollectionPaymentScalarFieldEnum[]
  }

  /**
   * Collection without action
   */
  export type CollectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Collection
     */
    omit?: CollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    name: string | null
    description: string | null
    slug: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    name: string | null
    description: string | null
    slug: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    name: number
    description: number
    slug: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    description?: true
    slug?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    description?: true
    slug?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    description?: true
    slug?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    name: string
    description: string | null
    slug: string
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    contents?: boolean | Category$contentsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "name" | "description" | "slug", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contents?: boolean | Category$contentsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      contents: Prisma.$CategorablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      name: string
      description: string | null
      slug: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contents<T extends Category$contentsArgs<ExtArgs> = {}>(args?: Subset<T, Category$contentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly created_at: FieldRef<"Category", 'DateTime'>
    readonly updated_at: FieldRef<"Category", 'DateTime'>
    readonly deleted_at: FieldRef<"Category", 'DateTime'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.contents
   */
  export type Category$contentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    where?: CategorableWhereInput
    orderBy?: CategorableOrderByWithRelationInput | CategorableOrderByWithRelationInput[]
    cursor?: CategorableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategorableScalarFieldEnum | CategorableScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    name: string | null
    slug: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    name: string | null
    slug: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    name: number
    slug: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    slug?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    slug?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    name?: true
    slug?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    name: string
    slug: string
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    slug?: boolean
    contents?: boolean | Tag$contentsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    slug?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    slug?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    name?: boolean
    slug?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "name" | "slug", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contents?: boolean | Tag$contentsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      contents: Prisma.$TaggablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      name: string
      slug: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TagUpdateManyAndReturnArgs>(args: SelectSubset<T, TagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contents<T extends Tag$contentsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$contentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly created_at: FieldRef<"Tag", 'DateTime'>
    readonly updated_at: FieldRef<"Tag", 'DateTime'>
    readonly deleted_at: FieldRef<"Tag", 'DateTime'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly slug: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag updateManyAndReturn
   */
  export type TagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag.contents
   */
  export type Tag$contentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    where?: TaggableWhereInput
    orderBy?: TaggableOrderByWithRelationInput | TaggableOrderByWithRelationInput[]
    cursor?: TaggableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaggableScalarFieldEnum | TaggableScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    userId: string | null
    contentId: string | null
    status: $Enums.SubscriptionStatus | null
    startDate: Date | null
    endDate: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    userId: string | null
    contentId: string | null
    status: $Enums.SubscriptionStatus | null
    startDate: Date | null
    endDate: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    userId: number
    contentId: number
    status: number
    startDate: number
    endDate: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    contentId?: true
    status?: true
    startDate?: true
    endDate?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    contentId?: true
    status?: true
    startDate?: true
    endDate?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    contentId?: true
    status?: true
    startDate?: true
    endDate?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    userId: string
    contentId: string
    status: $Enums.SubscriptionStatus
    startDate: Date
    endDate: Date | null
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    contentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    contentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    contentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    contentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
  }

  export type SubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "userId" | "contentId" | "status" | "startDate" | "endDate", ExtArgs["result"]["subscription"]>
  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      content: Prisma.$ContentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      userId: string
      contentId: string
      status: $Enums.SubscriptionStatus
      startDate: Date
      endDate: Date | null
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions and returns the data updated in the database.
     * @param {SubscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    content<T extends ContentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContentDefaultArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly created_at: FieldRef<"Subscription", 'DateTime'>
    readonly updated_at: FieldRef<"Subscription", 'DateTime'>
    readonly deleted_at: FieldRef<"Subscription", 'DateTime'>
    readonly userId: FieldRef<"Subscription", 'String'>
    readonly contentId: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'SubscriptionStatus'>
    readonly startDate: FieldRef<"Subscription", 'DateTime'>
    readonly endDate: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
  }

  /**
   * Subscription updateManyAndReturn
   */
  export type SubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to delete.
     */
    limit?: number
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model Wallet
   */

  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletAvgAggregateOutputType = {
    balance: number | null
  }

  export type WalletSumAggregateOutputType = {
    balance: number | null
  }

  export type WalletMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    userId: string | null
    balance: number | null
    currency: string | null
  }

  export type WalletMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    userId: string | null
    balance: number | null
    currency: string | null
  }

  export type WalletCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    userId: number
    balance: number
    currency: number
    _all: number
  }


  export type WalletAvgAggregateInputType = {
    balance?: true
  }

  export type WalletSumAggregateInputType = {
    balance?: true
  }

  export type WalletMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    balance?: true
    currency?: true
  }

  export type WalletMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    balance?: true
    currency?: true
  }

  export type WalletCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    balance?: true
    currency?: true
    _all?: true
  }

  export type WalletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallet to aggregate.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type WalletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
    orderBy?: WalletOrderByWithAggregationInput | WalletOrderByWithAggregationInput[]
    by: WalletScalarFieldEnum[] | WalletScalarFieldEnum
    having?: WalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _avg?: WalletAvgAggregateInputType
    _sum?: WalletSumAggregateInputType
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }

  export type WalletGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    userId: string
    balance: number
    currency: string
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends WalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type WalletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    balance?: boolean
    currency?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    balance?: boolean
    currency?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    balance?: boolean
    currency?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    balance?: boolean
    currency?: boolean
  }

  export type WalletOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "userId" | "balance" | "currency", ExtArgs["result"]["wallet"]>
  export type WalletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WalletIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WalletIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WalletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wallet"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      userId: string
      balance: number
      currency: string
    }, ExtArgs["result"]["wallet"]>
    composites: {}
  }

  type WalletGetPayload<S extends boolean | null | undefined | WalletDefaultArgs> = $Result.GetResult<Prisma.$WalletPayload, S>

  type WalletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WalletFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WalletCountAggregateInputType | true
    }

  export interface WalletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wallet'], meta: { name: 'Wallet' } }
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WalletFindUniqueArgs>(args: SelectSubset<T, WalletFindUniqueArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wallet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WalletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WalletFindUniqueOrThrowArgs>(args: SelectSubset<T, WalletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WalletFindFirstArgs>(args?: SelectSubset<T, WalletFindFirstArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wallet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WalletFindFirstOrThrowArgs>(args?: SelectSubset<T, WalletFindFirstOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WalletFindManyArgs>(args?: SelectSubset<T, WalletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wallet.
     * @param {WalletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
     */
    create<T extends WalletCreateArgs>(args: SelectSubset<T, WalletCreateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Wallets.
     * @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WalletCreateManyArgs>(args?: SelectSubset<T, WalletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallets and returns the data saved in the database.
     * @param {WalletCreateManyAndReturnArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WalletCreateManyAndReturnArgs>(args?: SelectSubset<T, WalletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Wallet.
     * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
     */
    delete<T extends WalletDeleteArgs>(args: SelectSubset<T, WalletDeleteArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wallet.
     * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WalletUpdateArgs>(args: SelectSubset<T, WalletUpdateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Wallets.
     * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WalletDeleteManyArgs>(args?: SelectSubset<T, WalletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WalletUpdateManyArgs>(args: SelectSubset<T, WalletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets and returns the data updated in the database.
     * @param {WalletUpdateManyAndReturnArgs} args - Arguments to update many Wallets.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WalletUpdateManyAndReturnArgs>(args: SelectSubset<T, WalletUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Wallet.
     * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
     */
    upsert<T extends WalletUpsertArgs>(args: SelectSubset<T, WalletUpsertArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends WalletCountArgs>(
      args?: Subset<T, WalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletGroupByArgs['orderBy'] }
        : { orderBy?: WalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wallet model
   */
  readonly fields: WalletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wallet model
   */
  interface WalletFieldRefs {
    readonly id: FieldRef<"Wallet", 'String'>
    readonly created_at: FieldRef<"Wallet", 'DateTime'>
    readonly updated_at: FieldRef<"Wallet", 'DateTime'>
    readonly deleted_at: FieldRef<"Wallet", 'DateTime'>
    readonly userId: FieldRef<"Wallet", 'String'>
    readonly balance: FieldRef<"Wallet", 'Float'>
    readonly currency: FieldRef<"Wallet", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Wallet findUnique
   */
  export type WalletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findUniqueOrThrow
   */
  export type WalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findFirst
   */
  export type WalletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findFirstOrThrow
   */
  export type WalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findMany
   */
  export type WalletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallets to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet create
   */
  export type WalletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to create a Wallet.
     */
    data: XOR<WalletCreateInput, WalletUncheckedCreateInput>
  }

  /**
   * Wallet createMany
   */
  export type WalletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wallet createManyAndReturn
   */
  export type WalletCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wallet update
   */
  export type WalletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to update a Wallet.
     */
    data: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
    /**
     * Choose, which Wallet to update.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet updateMany
   */
  export type WalletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to update.
     */
    limit?: number
  }

  /**
   * Wallet updateManyAndReturn
   */
  export type WalletUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wallet upsert
   */
  export type WalletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The filter to search for the Wallet to update in case it exists.
     */
    where: WalletWhereUniqueInput
    /**
     * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
     */
    create: XOR<WalletCreateInput, WalletUncheckedCreateInput>
    /**
     * In case the Wallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
  }

  /**
   * Wallet delete
   */
  export type WalletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter which Wallet to delete.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet deleteMany
   */
  export type WalletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallets to delete
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to delete.
     */
    limit?: number
  }

  /**
   * Wallet without action
   */
  export type WalletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
  }


  /**
   * Model ContentComment
   */

  export type AggregateContentComment = {
    _count: ContentCommentCountAggregateOutputType | null
    _min: ContentCommentMinAggregateOutputType | null
    _max: ContentCommentMaxAggregateOutputType | null
  }

  export type ContentCommentMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    commentContent: string | null
    userId: string | null
    contentId: string | null
  }

  export type ContentCommentMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    commentContent: string | null
    userId: string | null
    contentId: string | null
  }

  export type ContentCommentCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    commentContent: number
    userId: number
    contentId: number
    _all: number
  }


  export type ContentCommentMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    commentContent?: true
    userId?: true
    contentId?: true
  }

  export type ContentCommentMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    commentContent?: true
    userId?: true
    contentId?: true
  }

  export type ContentCommentCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    commentContent?: true
    userId?: true
    contentId?: true
    _all?: true
  }

  export type ContentCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentComment to aggregate.
     */
    where?: ContentCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentComments to fetch.
     */
    orderBy?: ContentCommentOrderByWithRelationInput | ContentCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContentCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContentComments
    **/
    _count?: true | ContentCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentCommentMaxAggregateInputType
  }

  export type GetContentCommentAggregateType<T extends ContentCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateContentComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContentComment[P]>
      : GetScalarType<T[P], AggregateContentComment[P]>
  }




  export type ContentCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentCommentWhereInput
    orderBy?: ContentCommentOrderByWithAggregationInput | ContentCommentOrderByWithAggregationInput[]
    by: ContentCommentScalarFieldEnum[] | ContentCommentScalarFieldEnum
    having?: ContentCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentCommentCountAggregateInputType | true
    _min?: ContentCommentMinAggregateInputType
    _max?: ContentCommentMaxAggregateInputType
  }

  export type ContentCommentGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    commentContent: string
    userId: string
    contentId: string
    _count: ContentCommentCountAggregateOutputType | null
    _min: ContentCommentMinAggregateOutputType | null
    _max: ContentCommentMaxAggregateOutputType | null
  }

  type GetContentCommentGroupByPayload<T extends ContentCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentCommentGroupByOutputType[P]>
            : GetScalarType<T[P], ContentCommentGroupByOutputType[P]>
        }
      >
    >


  export type ContentCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    commentContent?: boolean
    userId?: boolean
    contentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentComment"]>

  export type ContentCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    commentContent?: boolean
    userId?: boolean
    contentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentComment"]>

  export type ContentCommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    commentContent?: boolean
    userId?: boolean
    contentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentComment"]>

  export type ContentCommentSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    commentContent?: boolean
    userId?: boolean
    contentId?: boolean
  }

  export type ContentCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "commentContent" | "userId" | "contentId", ExtArgs["result"]["contentComment"]>
  export type ContentCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }
  export type ContentCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }
  export type ContentCommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }

  export type $ContentCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContentComment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      content: Prisma.$ContentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      commentContent: string
      userId: string
      contentId: string
    }, ExtArgs["result"]["contentComment"]>
    composites: {}
  }

  type ContentCommentGetPayload<S extends boolean | null | undefined | ContentCommentDefaultArgs> = $Result.GetResult<Prisma.$ContentCommentPayload, S>

  type ContentCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContentCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContentCommentCountAggregateInputType | true
    }

  export interface ContentCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContentComment'], meta: { name: 'ContentComment' } }
    /**
     * Find zero or one ContentComment that matches the filter.
     * @param {ContentCommentFindUniqueArgs} args - Arguments to find a ContentComment
     * @example
     * // Get one ContentComment
     * const contentComment = await prisma.contentComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContentCommentFindUniqueArgs>(args: SelectSubset<T, ContentCommentFindUniqueArgs<ExtArgs>>): Prisma__ContentCommentClient<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContentComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContentCommentFindUniqueOrThrowArgs} args - Arguments to find a ContentComment
     * @example
     * // Get one ContentComment
     * const contentComment = await prisma.contentComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContentCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, ContentCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContentCommentClient<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContentComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCommentFindFirstArgs} args - Arguments to find a ContentComment
     * @example
     * // Get one ContentComment
     * const contentComment = await prisma.contentComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContentCommentFindFirstArgs>(args?: SelectSubset<T, ContentCommentFindFirstArgs<ExtArgs>>): Prisma__ContentCommentClient<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContentComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCommentFindFirstOrThrowArgs} args - Arguments to find a ContentComment
     * @example
     * // Get one ContentComment
     * const contentComment = await prisma.contentComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContentCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, ContentCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContentCommentClient<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContentComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContentComments
     * const contentComments = await prisma.contentComment.findMany()
     * 
     * // Get first 10 ContentComments
     * const contentComments = await prisma.contentComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentCommentWithIdOnly = await prisma.contentComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContentCommentFindManyArgs>(args?: SelectSubset<T, ContentCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContentComment.
     * @param {ContentCommentCreateArgs} args - Arguments to create a ContentComment.
     * @example
     * // Create one ContentComment
     * const ContentComment = await prisma.contentComment.create({
     *   data: {
     *     // ... data to create a ContentComment
     *   }
     * })
     * 
     */
    create<T extends ContentCommentCreateArgs>(args: SelectSubset<T, ContentCommentCreateArgs<ExtArgs>>): Prisma__ContentCommentClient<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContentComments.
     * @param {ContentCommentCreateManyArgs} args - Arguments to create many ContentComments.
     * @example
     * // Create many ContentComments
     * const contentComment = await prisma.contentComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContentCommentCreateManyArgs>(args?: SelectSubset<T, ContentCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContentComments and returns the data saved in the database.
     * @param {ContentCommentCreateManyAndReturnArgs} args - Arguments to create many ContentComments.
     * @example
     * // Create many ContentComments
     * const contentComment = await prisma.contentComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContentComments and only return the `id`
     * const contentCommentWithIdOnly = await prisma.contentComment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContentCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, ContentCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContentComment.
     * @param {ContentCommentDeleteArgs} args - Arguments to delete one ContentComment.
     * @example
     * // Delete one ContentComment
     * const ContentComment = await prisma.contentComment.delete({
     *   where: {
     *     // ... filter to delete one ContentComment
     *   }
     * })
     * 
     */
    delete<T extends ContentCommentDeleteArgs>(args: SelectSubset<T, ContentCommentDeleteArgs<ExtArgs>>): Prisma__ContentCommentClient<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContentComment.
     * @param {ContentCommentUpdateArgs} args - Arguments to update one ContentComment.
     * @example
     * // Update one ContentComment
     * const contentComment = await prisma.contentComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContentCommentUpdateArgs>(args: SelectSubset<T, ContentCommentUpdateArgs<ExtArgs>>): Prisma__ContentCommentClient<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContentComments.
     * @param {ContentCommentDeleteManyArgs} args - Arguments to filter ContentComments to delete.
     * @example
     * // Delete a few ContentComments
     * const { count } = await prisma.contentComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContentCommentDeleteManyArgs>(args?: SelectSubset<T, ContentCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContentComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContentComments
     * const contentComment = await prisma.contentComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContentCommentUpdateManyArgs>(args: SelectSubset<T, ContentCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContentComments and returns the data updated in the database.
     * @param {ContentCommentUpdateManyAndReturnArgs} args - Arguments to update many ContentComments.
     * @example
     * // Update many ContentComments
     * const contentComment = await prisma.contentComment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContentComments and only return the `id`
     * const contentCommentWithIdOnly = await prisma.contentComment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContentCommentUpdateManyAndReturnArgs>(args: SelectSubset<T, ContentCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContentComment.
     * @param {ContentCommentUpsertArgs} args - Arguments to update or create a ContentComment.
     * @example
     * // Update or create a ContentComment
     * const contentComment = await prisma.contentComment.upsert({
     *   create: {
     *     // ... data to create a ContentComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContentComment we want to update
     *   }
     * })
     */
    upsert<T extends ContentCommentUpsertArgs>(args: SelectSubset<T, ContentCommentUpsertArgs<ExtArgs>>): Prisma__ContentCommentClient<$Result.GetResult<Prisma.$ContentCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContentComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCommentCountArgs} args - Arguments to filter ContentComments to count.
     * @example
     * // Count the number of ContentComments
     * const count = await prisma.contentComment.count({
     *   where: {
     *     // ... the filter for the ContentComments we want to count
     *   }
     * })
    **/
    count<T extends ContentCommentCountArgs>(
      args?: Subset<T, ContentCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContentComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentCommentAggregateArgs>(args: Subset<T, ContentCommentAggregateArgs>): Prisma.PrismaPromise<GetContentCommentAggregateType<T>>

    /**
     * Group by ContentComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentCommentGroupByArgs['orderBy'] }
        : { orderBy?: ContentCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContentComment model
   */
  readonly fields: ContentCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContentComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContentCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    content<T extends ContentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContentDefaultArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContentComment model
   */
  interface ContentCommentFieldRefs {
    readonly id: FieldRef<"ContentComment", 'String'>
    readonly created_at: FieldRef<"ContentComment", 'DateTime'>
    readonly updated_at: FieldRef<"ContentComment", 'DateTime'>
    readonly deleted_at: FieldRef<"ContentComment", 'DateTime'>
    readonly commentContent: FieldRef<"ContentComment", 'String'>
    readonly userId: FieldRef<"ContentComment", 'String'>
    readonly contentId: FieldRef<"ContentComment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContentComment findUnique
   */
  export type ContentCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    /**
     * Filter, which ContentComment to fetch.
     */
    where: ContentCommentWhereUniqueInput
  }

  /**
   * ContentComment findUniqueOrThrow
   */
  export type ContentCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    /**
     * Filter, which ContentComment to fetch.
     */
    where: ContentCommentWhereUniqueInput
  }

  /**
   * ContentComment findFirst
   */
  export type ContentCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    /**
     * Filter, which ContentComment to fetch.
     */
    where?: ContentCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentComments to fetch.
     */
    orderBy?: ContentCommentOrderByWithRelationInput | ContentCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentComments.
     */
    cursor?: ContentCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentComments.
     */
    distinct?: ContentCommentScalarFieldEnum | ContentCommentScalarFieldEnum[]
  }

  /**
   * ContentComment findFirstOrThrow
   */
  export type ContentCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    /**
     * Filter, which ContentComment to fetch.
     */
    where?: ContentCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentComments to fetch.
     */
    orderBy?: ContentCommentOrderByWithRelationInput | ContentCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentComments.
     */
    cursor?: ContentCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentComments.
     */
    distinct?: ContentCommentScalarFieldEnum | ContentCommentScalarFieldEnum[]
  }

  /**
   * ContentComment findMany
   */
  export type ContentCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    /**
     * Filter, which ContentComments to fetch.
     */
    where?: ContentCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentComments to fetch.
     */
    orderBy?: ContentCommentOrderByWithRelationInput | ContentCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContentComments.
     */
    cursor?: ContentCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentComments.
     */
    skip?: number
    distinct?: ContentCommentScalarFieldEnum | ContentCommentScalarFieldEnum[]
  }

  /**
   * ContentComment create
   */
  export type ContentCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a ContentComment.
     */
    data: XOR<ContentCommentCreateInput, ContentCommentUncheckedCreateInput>
  }

  /**
   * ContentComment createMany
   */
  export type ContentCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContentComments.
     */
    data: ContentCommentCreateManyInput | ContentCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContentComment createManyAndReturn
   */
  export type ContentCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * The data used to create many ContentComments.
     */
    data: ContentCommentCreateManyInput | ContentCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContentComment update
   */
  export type ContentCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a ContentComment.
     */
    data: XOR<ContentCommentUpdateInput, ContentCommentUncheckedUpdateInput>
    /**
     * Choose, which ContentComment to update.
     */
    where: ContentCommentWhereUniqueInput
  }

  /**
   * ContentComment updateMany
   */
  export type ContentCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContentComments.
     */
    data: XOR<ContentCommentUpdateManyMutationInput, ContentCommentUncheckedUpdateManyInput>
    /**
     * Filter which ContentComments to update
     */
    where?: ContentCommentWhereInput
    /**
     * Limit how many ContentComments to update.
     */
    limit?: number
  }

  /**
   * ContentComment updateManyAndReturn
   */
  export type ContentCommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * The data used to update ContentComments.
     */
    data: XOR<ContentCommentUpdateManyMutationInput, ContentCommentUncheckedUpdateManyInput>
    /**
     * Filter which ContentComments to update
     */
    where?: ContentCommentWhereInput
    /**
     * Limit how many ContentComments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContentComment upsert
   */
  export type ContentCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the ContentComment to update in case it exists.
     */
    where: ContentCommentWhereUniqueInput
    /**
     * In case the ContentComment found by the `where` argument doesn't exist, create a new ContentComment with this data.
     */
    create: XOR<ContentCommentCreateInput, ContentCommentUncheckedCreateInput>
    /**
     * In case the ContentComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContentCommentUpdateInput, ContentCommentUncheckedUpdateInput>
  }

  /**
   * ContentComment delete
   */
  export type ContentCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
    /**
     * Filter which ContentComment to delete.
     */
    where: ContentCommentWhereUniqueInput
  }

  /**
   * ContentComment deleteMany
   */
  export type ContentCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentComments to delete
     */
    where?: ContentCommentWhereInput
    /**
     * Limit how many ContentComments to delete.
     */
    limit?: number
  }

  /**
   * ContentComment without action
   */
  export type ContentCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentComment
     */
    select?: ContentCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentComment
     */
    omit?: ContentCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentCommentInclude<ExtArgs> | null
  }


  /**
   * Model Followers
   */

  export type AggregateFollowers = {
    _count: FollowersCountAggregateOutputType | null
    _min: FollowersMinAggregateOutputType | null
    _max: FollowersMaxAggregateOutputType | null
  }

  export type FollowersMinAggregateOutputType = {
    userId: string | null
    followerId: string | null
  }

  export type FollowersMaxAggregateOutputType = {
    userId: string | null
    followerId: string | null
  }

  export type FollowersCountAggregateOutputType = {
    userId: number
    followerId: number
    _all: number
  }


  export type FollowersMinAggregateInputType = {
    userId?: true
    followerId?: true
  }

  export type FollowersMaxAggregateInputType = {
    userId?: true
    followerId?: true
  }

  export type FollowersCountAggregateInputType = {
    userId?: true
    followerId?: true
    _all?: true
  }

  export type FollowersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Followers to aggregate.
     */
    where?: FollowersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Followers
    **/
    _count?: true | FollowersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowersMaxAggregateInputType
  }

  export type GetFollowersAggregateType<T extends FollowersAggregateArgs> = {
        [P in keyof T & keyof AggregateFollowers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollowers[P]>
      : GetScalarType<T[P], AggregateFollowers[P]>
  }




  export type FollowersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowersWhereInput
    orderBy?: FollowersOrderByWithAggregationInput | FollowersOrderByWithAggregationInput[]
    by: FollowersScalarFieldEnum[] | FollowersScalarFieldEnum
    having?: FollowersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowersCountAggregateInputType | true
    _min?: FollowersMinAggregateInputType
    _max?: FollowersMaxAggregateInputType
  }

  export type FollowersGroupByOutputType = {
    userId: string
    followerId: string
    _count: FollowersCountAggregateOutputType | null
    _min: FollowersMinAggregateOutputType | null
    _max: FollowersMaxAggregateOutputType | null
  }

  type GetFollowersGroupByPayload<T extends FollowersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowersGroupByOutputType[P]>
            : GetScalarType<T[P], FollowersGroupByOutputType[P]>
        }
      >
    >


  export type FollowersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    followerId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    follower?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["followers"]>

  export type FollowersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    followerId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    follower?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["followers"]>

  export type FollowersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    followerId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    follower?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["followers"]>

  export type FollowersSelectScalar = {
    userId?: boolean
    followerId?: boolean
  }

  export type FollowersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "followerId", ExtArgs["result"]["followers"]>
  export type FollowersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    follower?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    follower?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    follower?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FollowersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Followers"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      follower: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      followerId: string
    }, ExtArgs["result"]["followers"]>
    composites: {}
  }

  type FollowersGetPayload<S extends boolean | null | undefined | FollowersDefaultArgs> = $Result.GetResult<Prisma.$FollowersPayload, S>

  type FollowersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FollowersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FollowersCountAggregateInputType | true
    }

  export interface FollowersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Followers'], meta: { name: 'Followers' } }
    /**
     * Find zero or one Followers that matches the filter.
     * @param {FollowersFindUniqueArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowersFindUniqueArgs>(args: SelectSubset<T, FollowersFindUniqueArgs<ExtArgs>>): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Followers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FollowersFindUniqueOrThrowArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowersFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Followers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersFindFirstArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowersFindFirstArgs>(args?: SelectSubset<T, FollowersFindFirstArgs<ExtArgs>>): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Followers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersFindFirstOrThrowArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowersFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowersFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Followers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Followers
     * const followers = await prisma.followers.findMany()
     * 
     * // Get first 10 Followers
     * const followers = await prisma.followers.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const followersWithUserIdOnly = await prisma.followers.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends FollowersFindManyArgs>(args?: SelectSubset<T, FollowersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Followers.
     * @param {FollowersCreateArgs} args - Arguments to create a Followers.
     * @example
     * // Create one Followers
     * const Followers = await prisma.followers.create({
     *   data: {
     *     // ... data to create a Followers
     *   }
     * })
     * 
     */
    create<T extends FollowersCreateArgs>(args: SelectSubset<T, FollowersCreateArgs<ExtArgs>>): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Followers.
     * @param {FollowersCreateManyArgs} args - Arguments to create many Followers.
     * @example
     * // Create many Followers
     * const followers = await prisma.followers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowersCreateManyArgs>(args?: SelectSubset<T, FollowersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Followers and returns the data saved in the database.
     * @param {FollowersCreateManyAndReturnArgs} args - Arguments to create many Followers.
     * @example
     * // Create many Followers
     * const followers = await prisma.followers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Followers and only return the `userId`
     * const followersWithUserIdOnly = await prisma.followers.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FollowersCreateManyAndReturnArgs>(args?: SelectSubset<T, FollowersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Followers.
     * @param {FollowersDeleteArgs} args - Arguments to delete one Followers.
     * @example
     * // Delete one Followers
     * const Followers = await prisma.followers.delete({
     *   where: {
     *     // ... filter to delete one Followers
     *   }
     * })
     * 
     */
    delete<T extends FollowersDeleteArgs>(args: SelectSubset<T, FollowersDeleteArgs<ExtArgs>>): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Followers.
     * @param {FollowersUpdateArgs} args - Arguments to update one Followers.
     * @example
     * // Update one Followers
     * const followers = await prisma.followers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowersUpdateArgs>(args: SelectSubset<T, FollowersUpdateArgs<ExtArgs>>): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Followers.
     * @param {FollowersDeleteManyArgs} args - Arguments to filter Followers to delete.
     * @example
     * // Delete a few Followers
     * const { count } = await prisma.followers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowersDeleteManyArgs>(args?: SelectSubset<T, FollowersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Followers
     * const followers = await prisma.followers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowersUpdateManyArgs>(args: SelectSubset<T, FollowersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Followers and returns the data updated in the database.
     * @param {FollowersUpdateManyAndReturnArgs} args - Arguments to update many Followers.
     * @example
     * // Update many Followers
     * const followers = await prisma.followers.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Followers and only return the `userId`
     * const followersWithUserIdOnly = await prisma.followers.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FollowersUpdateManyAndReturnArgs>(args: SelectSubset<T, FollowersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Followers.
     * @param {FollowersUpsertArgs} args - Arguments to update or create a Followers.
     * @example
     * // Update or create a Followers
     * const followers = await prisma.followers.upsert({
     *   create: {
     *     // ... data to create a Followers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Followers we want to update
     *   }
     * })
     */
    upsert<T extends FollowersUpsertArgs>(args: SelectSubset<T, FollowersUpsertArgs<ExtArgs>>): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersCountArgs} args - Arguments to filter Followers to count.
     * @example
     * // Count the number of Followers
     * const count = await prisma.followers.count({
     *   where: {
     *     // ... the filter for the Followers we want to count
     *   }
     * })
    **/
    count<T extends FollowersCountArgs>(
      args?: Subset<T, FollowersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowersAggregateArgs>(args: Subset<T, FollowersAggregateArgs>): Prisma.PrismaPromise<GetFollowersAggregateType<T>>

    /**
     * Group by Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowersGroupByArgs['orderBy'] }
        : { orderBy?: FollowersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Followers model
   */
  readonly fields: FollowersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Followers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    follower<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Followers model
   */
  interface FollowersFieldRefs {
    readonly userId: FieldRef<"Followers", 'String'>
    readonly followerId: FieldRef<"Followers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Followers findUnique
   */
  export type FollowersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where: FollowersWhereUniqueInput
  }

  /**
   * Followers findUniqueOrThrow
   */
  export type FollowersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where: FollowersWhereUniqueInput
  }

  /**
   * Followers findFirst
   */
  export type FollowersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where?: FollowersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Followers.
     */
    cursor?: FollowersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Followers.
     */
    distinct?: FollowersScalarFieldEnum | FollowersScalarFieldEnum[]
  }

  /**
   * Followers findFirstOrThrow
   */
  export type FollowersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where?: FollowersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Followers.
     */
    cursor?: FollowersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Followers.
     */
    distinct?: FollowersScalarFieldEnum | FollowersScalarFieldEnum[]
  }

  /**
   * Followers findMany
   */
  export type FollowersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where?: FollowersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Followers.
     */
    cursor?: FollowersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    distinct?: FollowersScalarFieldEnum | FollowersScalarFieldEnum[]
  }

  /**
   * Followers create
   */
  export type FollowersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * The data needed to create a Followers.
     */
    data: XOR<FollowersCreateInput, FollowersUncheckedCreateInput>
  }

  /**
   * Followers createMany
   */
  export type FollowersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Followers.
     */
    data: FollowersCreateManyInput | FollowersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Followers createManyAndReturn
   */
  export type FollowersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * The data used to create many Followers.
     */
    data: FollowersCreateManyInput | FollowersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Followers update
   */
  export type FollowersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * The data needed to update a Followers.
     */
    data: XOR<FollowersUpdateInput, FollowersUncheckedUpdateInput>
    /**
     * Choose, which Followers to update.
     */
    where: FollowersWhereUniqueInput
  }

  /**
   * Followers updateMany
   */
  export type FollowersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Followers.
     */
    data: XOR<FollowersUpdateManyMutationInput, FollowersUncheckedUpdateManyInput>
    /**
     * Filter which Followers to update
     */
    where?: FollowersWhereInput
    /**
     * Limit how many Followers to update.
     */
    limit?: number
  }

  /**
   * Followers updateManyAndReturn
   */
  export type FollowersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * The data used to update Followers.
     */
    data: XOR<FollowersUpdateManyMutationInput, FollowersUncheckedUpdateManyInput>
    /**
     * Filter which Followers to update
     */
    where?: FollowersWhereInput
    /**
     * Limit how many Followers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Followers upsert
   */
  export type FollowersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * The filter to search for the Followers to update in case it exists.
     */
    where: FollowersWhereUniqueInput
    /**
     * In case the Followers found by the `where` argument doesn't exist, create a new Followers with this data.
     */
    create: XOR<FollowersCreateInput, FollowersUncheckedCreateInput>
    /**
     * In case the Followers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowersUpdateInput, FollowersUncheckedUpdateInput>
  }

  /**
   * Followers delete
   */
  export type FollowersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter which Followers to delete.
     */
    where: FollowersWhereUniqueInput
  }

  /**
   * Followers deleteMany
   */
  export type FollowersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Followers to delete
     */
    where?: FollowersWhereInput
    /**
     * Limit how many Followers to delete.
     */
    limit?: number
  }

  /**
   * Followers without action
   */
  export type FollowersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Followers
     */
    omit?: FollowersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowersInclude<ExtArgs> | null
  }


  /**
   * Model ContentPayment
   */

  export type AggregateContentPayment = {
    _count: ContentPaymentCountAggregateOutputType | null
    _avg: ContentPaymentAvgAggregateOutputType | null
    _sum: ContentPaymentSumAggregateOutputType | null
    _min: ContentPaymentMinAggregateOutputType | null
    _max: ContentPaymentMaxAggregateOutputType | null
  }

  export type ContentPaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type ContentPaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type ContentPaymentMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    userId: string | null
    contentId: string | null
    amount: number | null
    currency: string | null
    status: $Enums.PaymentStatus | null
  }

  export type ContentPaymentMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    userId: string | null
    contentId: string | null
    amount: number | null
    currency: string | null
    status: $Enums.PaymentStatus | null
  }

  export type ContentPaymentCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    userId: number
    contentId: number
    amount: number
    currency: number
    status: number
    _all: number
  }


  export type ContentPaymentAvgAggregateInputType = {
    amount?: true
  }

  export type ContentPaymentSumAggregateInputType = {
    amount?: true
  }

  export type ContentPaymentMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    contentId?: true
    amount?: true
    currency?: true
    status?: true
  }

  export type ContentPaymentMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    contentId?: true
    amount?: true
    currency?: true
    status?: true
  }

  export type ContentPaymentCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    contentId?: true
    amount?: true
    currency?: true
    status?: true
    _all?: true
  }

  export type ContentPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentPayment to aggregate.
     */
    where?: ContentPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentPayments to fetch.
     */
    orderBy?: ContentPaymentOrderByWithRelationInput | ContentPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContentPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContentPayments
    **/
    _count?: true | ContentPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentPaymentMaxAggregateInputType
  }

  export type GetContentPaymentAggregateType<T extends ContentPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateContentPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContentPayment[P]>
      : GetScalarType<T[P], AggregateContentPayment[P]>
  }




  export type ContentPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentPaymentWhereInput
    orderBy?: ContentPaymentOrderByWithAggregationInput | ContentPaymentOrderByWithAggregationInput[]
    by: ContentPaymentScalarFieldEnum[] | ContentPaymentScalarFieldEnum
    having?: ContentPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentPaymentCountAggregateInputType | true
    _avg?: ContentPaymentAvgAggregateInputType
    _sum?: ContentPaymentSumAggregateInputType
    _min?: ContentPaymentMinAggregateInputType
    _max?: ContentPaymentMaxAggregateInputType
  }

  export type ContentPaymentGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    userId: string
    contentId: string
    amount: number
    currency: string
    status: $Enums.PaymentStatus
    _count: ContentPaymentCountAggregateOutputType | null
    _avg: ContentPaymentAvgAggregateOutputType | null
    _sum: ContentPaymentSumAggregateOutputType | null
    _min: ContentPaymentMinAggregateOutputType | null
    _max: ContentPaymentMaxAggregateOutputType | null
  }

  type GetContentPaymentGroupByPayload<T extends ContentPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], ContentPaymentGroupByOutputType[P]>
        }
      >
    >


  export type ContentPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    contentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentPayment"]>

  export type ContentPaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    contentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentPayment"]>

  export type ContentPaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    contentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentPayment"]>

  export type ContentPaymentSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    contentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
  }

  export type ContentPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "userId" | "contentId" | "amount" | "currency" | "status", ExtArgs["result"]["contentPayment"]>
  export type ContentPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }
  export type ContentPaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }
  export type ContentPaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
  }

  export type $ContentPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContentPayment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      content: Prisma.$ContentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      userId: string
      contentId: string
      amount: number
      currency: string
      status: $Enums.PaymentStatus
    }, ExtArgs["result"]["contentPayment"]>
    composites: {}
  }

  type ContentPaymentGetPayload<S extends boolean | null | undefined | ContentPaymentDefaultArgs> = $Result.GetResult<Prisma.$ContentPaymentPayload, S>

  type ContentPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContentPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContentPaymentCountAggregateInputType | true
    }

  export interface ContentPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContentPayment'], meta: { name: 'ContentPayment' } }
    /**
     * Find zero or one ContentPayment that matches the filter.
     * @param {ContentPaymentFindUniqueArgs} args - Arguments to find a ContentPayment
     * @example
     * // Get one ContentPayment
     * const contentPayment = await prisma.contentPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContentPaymentFindUniqueArgs>(args: SelectSubset<T, ContentPaymentFindUniqueArgs<ExtArgs>>): Prisma__ContentPaymentClient<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContentPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContentPaymentFindUniqueOrThrowArgs} args - Arguments to find a ContentPayment
     * @example
     * // Get one ContentPayment
     * const contentPayment = await prisma.contentPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContentPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, ContentPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContentPaymentClient<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContentPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentPaymentFindFirstArgs} args - Arguments to find a ContentPayment
     * @example
     * // Get one ContentPayment
     * const contentPayment = await prisma.contentPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContentPaymentFindFirstArgs>(args?: SelectSubset<T, ContentPaymentFindFirstArgs<ExtArgs>>): Prisma__ContentPaymentClient<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContentPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentPaymentFindFirstOrThrowArgs} args - Arguments to find a ContentPayment
     * @example
     * // Get one ContentPayment
     * const contentPayment = await prisma.contentPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContentPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, ContentPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContentPaymentClient<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContentPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContentPayments
     * const contentPayments = await prisma.contentPayment.findMany()
     * 
     * // Get first 10 ContentPayments
     * const contentPayments = await prisma.contentPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentPaymentWithIdOnly = await prisma.contentPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContentPaymentFindManyArgs>(args?: SelectSubset<T, ContentPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContentPayment.
     * @param {ContentPaymentCreateArgs} args - Arguments to create a ContentPayment.
     * @example
     * // Create one ContentPayment
     * const ContentPayment = await prisma.contentPayment.create({
     *   data: {
     *     // ... data to create a ContentPayment
     *   }
     * })
     * 
     */
    create<T extends ContentPaymentCreateArgs>(args: SelectSubset<T, ContentPaymentCreateArgs<ExtArgs>>): Prisma__ContentPaymentClient<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContentPayments.
     * @param {ContentPaymentCreateManyArgs} args - Arguments to create many ContentPayments.
     * @example
     * // Create many ContentPayments
     * const contentPayment = await prisma.contentPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContentPaymentCreateManyArgs>(args?: SelectSubset<T, ContentPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContentPayments and returns the data saved in the database.
     * @param {ContentPaymentCreateManyAndReturnArgs} args - Arguments to create many ContentPayments.
     * @example
     * // Create many ContentPayments
     * const contentPayment = await prisma.contentPayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContentPayments and only return the `id`
     * const contentPaymentWithIdOnly = await prisma.contentPayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContentPaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, ContentPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContentPayment.
     * @param {ContentPaymentDeleteArgs} args - Arguments to delete one ContentPayment.
     * @example
     * // Delete one ContentPayment
     * const ContentPayment = await prisma.contentPayment.delete({
     *   where: {
     *     // ... filter to delete one ContentPayment
     *   }
     * })
     * 
     */
    delete<T extends ContentPaymentDeleteArgs>(args: SelectSubset<T, ContentPaymentDeleteArgs<ExtArgs>>): Prisma__ContentPaymentClient<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContentPayment.
     * @param {ContentPaymentUpdateArgs} args - Arguments to update one ContentPayment.
     * @example
     * // Update one ContentPayment
     * const contentPayment = await prisma.contentPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContentPaymentUpdateArgs>(args: SelectSubset<T, ContentPaymentUpdateArgs<ExtArgs>>): Prisma__ContentPaymentClient<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContentPayments.
     * @param {ContentPaymentDeleteManyArgs} args - Arguments to filter ContentPayments to delete.
     * @example
     * // Delete a few ContentPayments
     * const { count } = await prisma.contentPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContentPaymentDeleteManyArgs>(args?: SelectSubset<T, ContentPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContentPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContentPayments
     * const contentPayment = await prisma.contentPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContentPaymentUpdateManyArgs>(args: SelectSubset<T, ContentPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContentPayments and returns the data updated in the database.
     * @param {ContentPaymentUpdateManyAndReturnArgs} args - Arguments to update many ContentPayments.
     * @example
     * // Update many ContentPayments
     * const contentPayment = await prisma.contentPayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContentPayments and only return the `id`
     * const contentPaymentWithIdOnly = await prisma.contentPayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContentPaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, ContentPaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContentPayment.
     * @param {ContentPaymentUpsertArgs} args - Arguments to update or create a ContentPayment.
     * @example
     * // Update or create a ContentPayment
     * const contentPayment = await prisma.contentPayment.upsert({
     *   create: {
     *     // ... data to create a ContentPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContentPayment we want to update
     *   }
     * })
     */
    upsert<T extends ContentPaymentUpsertArgs>(args: SelectSubset<T, ContentPaymentUpsertArgs<ExtArgs>>): Prisma__ContentPaymentClient<$Result.GetResult<Prisma.$ContentPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContentPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentPaymentCountArgs} args - Arguments to filter ContentPayments to count.
     * @example
     * // Count the number of ContentPayments
     * const count = await prisma.contentPayment.count({
     *   where: {
     *     // ... the filter for the ContentPayments we want to count
     *   }
     * })
    **/
    count<T extends ContentPaymentCountArgs>(
      args?: Subset<T, ContentPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContentPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentPaymentAggregateArgs>(args: Subset<T, ContentPaymentAggregateArgs>): Prisma.PrismaPromise<GetContentPaymentAggregateType<T>>

    /**
     * Group by ContentPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentPaymentGroupByArgs['orderBy'] }
        : { orderBy?: ContentPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContentPayment model
   */
  readonly fields: ContentPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContentPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContentPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    content<T extends ContentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContentDefaultArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContentPayment model
   */
  interface ContentPaymentFieldRefs {
    readonly id: FieldRef<"ContentPayment", 'String'>
    readonly created_at: FieldRef<"ContentPayment", 'DateTime'>
    readonly updated_at: FieldRef<"ContentPayment", 'DateTime'>
    readonly deleted_at: FieldRef<"ContentPayment", 'DateTime'>
    readonly userId: FieldRef<"ContentPayment", 'String'>
    readonly contentId: FieldRef<"ContentPayment", 'String'>
    readonly amount: FieldRef<"ContentPayment", 'Float'>
    readonly currency: FieldRef<"ContentPayment", 'String'>
    readonly status: FieldRef<"ContentPayment", 'PaymentStatus'>
  }
    

  // Custom InputTypes
  /**
   * ContentPayment findUnique
   */
  export type ContentPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ContentPayment to fetch.
     */
    where: ContentPaymentWhereUniqueInput
  }

  /**
   * ContentPayment findUniqueOrThrow
   */
  export type ContentPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ContentPayment to fetch.
     */
    where: ContentPaymentWhereUniqueInput
  }

  /**
   * ContentPayment findFirst
   */
  export type ContentPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ContentPayment to fetch.
     */
    where?: ContentPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentPayments to fetch.
     */
    orderBy?: ContentPaymentOrderByWithRelationInput | ContentPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentPayments.
     */
    cursor?: ContentPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentPayments.
     */
    distinct?: ContentPaymentScalarFieldEnum | ContentPaymentScalarFieldEnum[]
  }

  /**
   * ContentPayment findFirstOrThrow
   */
  export type ContentPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ContentPayment to fetch.
     */
    where?: ContentPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentPayments to fetch.
     */
    orderBy?: ContentPaymentOrderByWithRelationInput | ContentPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentPayments.
     */
    cursor?: ContentPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentPayments.
     */
    distinct?: ContentPaymentScalarFieldEnum | ContentPaymentScalarFieldEnum[]
  }

  /**
   * ContentPayment findMany
   */
  export type ContentPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ContentPayments to fetch.
     */
    where?: ContentPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentPayments to fetch.
     */
    orderBy?: ContentPaymentOrderByWithRelationInput | ContentPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContentPayments.
     */
    cursor?: ContentPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentPayments.
     */
    skip?: number
    distinct?: ContentPaymentScalarFieldEnum | ContentPaymentScalarFieldEnum[]
  }

  /**
   * ContentPayment create
   */
  export type ContentPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a ContentPayment.
     */
    data: XOR<ContentPaymentCreateInput, ContentPaymentUncheckedCreateInput>
  }

  /**
   * ContentPayment createMany
   */
  export type ContentPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContentPayments.
     */
    data: ContentPaymentCreateManyInput | ContentPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContentPayment createManyAndReturn
   */
  export type ContentPaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * The data used to create many ContentPayments.
     */
    data: ContentPaymentCreateManyInput | ContentPaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContentPayment update
   */
  export type ContentPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a ContentPayment.
     */
    data: XOR<ContentPaymentUpdateInput, ContentPaymentUncheckedUpdateInput>
    /**
     * Choose, which ContentPayment to update.
     */
    where: ContentPaymentWhereUniqueInput
  }

  /**
   * ContentPayment updateMany
   */
  export type ContentPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContentPayments.
     */
    data: XOR<ContentPaymentUpdateManyMutationInput, ContentPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ContentPayments to update
     */
    where?: ContentPaymentWhereInput
    /**
     * Limit how many ContentPayments to update.
     */
    limit?: number
  }

  /**
   * ContentPayment updateManyAndReturn
   */
  export type ContentPaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * The data used to update ContentPayments.
     */
    data: XOR<ContentPaymentUpdateManyMutationInput, ContentPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ContentPayments to update
     */
    where?: ContentPaymentWhereInput
    /**
     * Limit how many ContentPayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContentPayment upsert
   */
  export type ContentPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the ContentPayment to update in case it exists.
     */
    where: ContentPaymentWhereUniqueInput
    /**
     * In case the ContentPayment found by the `where` argument doesn't exist, create a new ContentPayment with this data.
     */
    create: XOR<ContentPaymentCreateInput, ContentPaymentUncheckedCreateInput>
    /**
     * In case the ContentPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContentPaymentUpdateInput, ContentPaymentUncheckedUpdateInput>
  }

  /**
   * ContentPayment delete
   */
  export type ContentPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
    /**
     * Filter which ContentPayment to delete.
     */
    where: ContentPaymentWhereUniqueInput
  }

  /**
   * ContentPayment deleteMany
   */
  export type ContentPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentPayments to delete
     */
    where?: ContentPaymentWhereInput
    /**
     * Limit how many ContentPayments to delete.
     */
    limit?: number
  }

  /**
   * ContentPayment without action
   */
  export type ContentPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentPayment
     */
    select?: ContentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContentPayment
     */
    omit?: ContentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentPaymentInclude<ExtArgs> | null
  }


  /**
   * Model CollectionPayment
   */

  export type AggregateCollectionPayment = {
    _count: CollectionPaymentCountAggregateOutputType | null
    _avg: CollectionPaymentAvgAggregateOutputType | null
    _sum: CollectionPaymentSumAggregateOutputType | null
    _min: CollectionPaymentMinAggregateOutputType | null
    _max: CollectionPaymentMaxAggregateOutputType | null
  }

  export type CollectionPaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type CollectionPaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type CollectionPaymentMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    userId: string | null
    collectionId: string | null
    amount: number | null
    currency: string | null
    status: $Enums.PaymentStatus | null
  }

  export type CollectionPaymentMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
    userId: string | null
    collectionId: string | null
    amount: number | null
    currency: string | null
    status: $Enums.PaymentStatus | null
  }

  export type CollectionPaymentCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    deleted_at: number
    userId: number
    collectionId: number
    amount: number
    currency: number
    status: number
    _all: number
  }


  export type CollectionPaymentAvgAggregateInputType = {
    amount?: true
  }

  export type CollectionPaymentSumAggregateInputType = {
    amount?: true
  }

  export type CollectionPaymentMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    collectionId?: true
    amount?: true
    currency?: true
    status?: true
  }

  export type CollectionPaymentMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    collectionId?: true
    amount?: true
    currency?: true
    status?: true
  }

  export type CollectionPaymentCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    userId?: true
    collectionId?: true
    amount?: true
    currency?: true
    status?: true
    _all?: true
  }

  export type CollectionPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionPayment to aggregate.
     */
    where?: CollectionPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionPayments to fetch.
     */
    orderBy?: CollectionPaymentOrderByWithRelationInput | CollectionPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollectionPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollectionPayments
    **/
    _count?: true | CollectionPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CollectionPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CollectionPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionPaymentMaxAggregateInputType
  }

  export type GetCollectionPaymentAggregateType<T extends CollectionPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateCollectionPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollectionPayment[P]>
      : GetScalarType<T[P], AggregateCollectionPayment[P]>
  }




  export type CollectionPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionPaymentWhereInput
    orderBy?: CollectionPaymentOrderByWithAggregationInput | CollectionPaymentOrderByWithAggregationInput[]
    by: CollectionPaymentScalarFieldEnum[] | CollectionPaymentScalarFieldEnum
    having?: CollectionPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionPaymentCountAggregateInputType | true
    _avg?: CollectionPaymentAvgAggregateInputType
    _sum?: CollectionPaymentSumAggregateInputType
    _min?: CollectionPaymentMinAggregateInputType
    _max?: CollectionPaymentMaxAggregateInputType
  }

  export type CollectionPaymentGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    userId: string
    collectionId: string
    amount: number
    currency: string
    status: $Enums.PaymentStatus
    _count: CollectionPaymentCountAggregateOutputType | null
    _avg: CollectionPaymentAvgAggregateOutputType | null
    _sum: CollectionPaymentSumAggregateOutputType | null
    _min: CollectionPaymentMinAggregateOutputType | null
    _max: CollectionPaymentMaxAggregateOutputType | null
  }

  type GetCollectionPaymentGroupByPayload<T extends CollectionPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollectionPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionPaymentGroupByOutputType[P]>
        }
      >
    >


  export type CollectionPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    collectionId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collectionPayment"]>

  export type CollectionPaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    collectionId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collectionPayment"]>

  export type CollectionPaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    collectionId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collectionPayment"]>

  export type CollectionPaymentSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    userId?: boolean
    collectionId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
  }

  export type CollectionPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at" | "deleted_at" | "userId" | "collectionId" | "amount" | "currency" | "status", ExtArgs["result"]["collectionPayment"]>
  export type CollectionPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
  }
  export type CollectionPaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
  }
  export type CollectionPaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
  }

  export type $CollectionPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollectionPayment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      collection: Prisma.$CollectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
      userId: string
      collectionId: string
      amount: number
      currency: string
      status: $Enums.PaymentStatus
    }, ExtArgs["result"]["collectionPayment"]>
    composites: {}
  }

  type CollectionPaymentGetPayload<S extends boolean | null | undefined | CollectionPaymentDefaultArgs> = $Result.GetResult<Prisma.$CollectionPaymentPayload, S>

  type CollectionPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CollectionPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CollectionPaymentCountAggregateInputType | true
    }

  export interface CollectionPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollectionPayment'], meta: { name: 'CollectionPayment' } }
    /**
     * Find zero or one CollectionPayment that matches the filter.
     * @param {CollectionPaymentFindUniqueArgs} args - Arguments to find a CollectionPayment
     * @example
     * // Get one CollectionPayment
     * const collectionPayment = await prisma.collectionPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollectionPaymentFindUniqueArgs>(args: SelectSubset<T, CollectionPaymentFindUniqueArgs<ExtArgs>>): Prisma__CollectionPaymentClient<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CollectionPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CollectionPaymentFindUniqueOrThrowArgs} args - Arguments to find a CollectionPayment
     * @example
     * // Get one CollectionPayment
     * const collectionPayment = await prisma.collectionPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollectionPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, CollectionPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollectionPaymentClient<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CollectionPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPaymentFindFirstArgs} args - Arguments to find a CollectionPayment
     * @example
     * // Get one CollectionPayment
     * const collectionPayment = await prisma.collectionPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollectionPaymentFindFirstArgs>(args?: SelectSubset<T, CollectionPaymentFindFirstArgs<ExtArgs>>): Prisma__CollectionPaymentClient<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CollectionPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPaymentFindFirstOrThrowArgs} args - Arguments to find a CollectionPayment
     * @example
     * // Get one CollectionPayment
     * const collectionPayment = await prisma.collectionPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollectionPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, CollectionPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollectionPaymentClient<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CollectionPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollectionPayments
     * const collectionPayments = await prisma.collectionPayment.findMany()
     * 
     * // Get first 10 CollectionPayments
     * const collectionPayments = await prisma.collectionPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collectionPaymentWithIdOnly = await prisma.collectionPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollectionPaymentFindManyArgs>(args?: SelectSubset<T, CollectionPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CollectionPayment.
     * @param {CollectionPaymentCreateArgs} args - Arguments to create a CollectionPayment.
     * @example
     * // Create one CollectionPayment
     * const CollectionPayment = await prisma.collectionPayment.create({
     *   data: {
     *     // ... data to create a CollectionPayment
     *   }
     * })
     * 
     */
    create<T extends CollectionPaymentCreateArgs>(args: SelectSubset<T, CollectionPaymentCreateArgs<ExtArgs>>): Prisma__CollectionPaymentClient<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CollectionPayments.
     * @param {CollectionPaymentCreateManyArgs} args - Arguments to create many CollectionPayments.
     * @example
     * // Create many CollectionPayments
     * const collectionPayment = await prisma.collectionPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollectionPaymentCreateManyArgs>(args?: SelectSubset<T, CollectionPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CollectionPayments and returns the data saved in the database.
     * @param {CollectionPaymentCreateManyAndReturnArgs} args - Arguments to create many CollectionPayments.
     * @example
     * // Create many CollectionPayments
     * const collectionPayment = await prisma.collectionPayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CollectionPayments and only return the `id`
     * const collectionPaymentWithIdOnly = await prisma.collectionPayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollectionPaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, CollectionPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CollectionPayment.
     * @param {CollectionPaymentDeleteArgs} args - Arguments to delete one CollectionPayment.
     * @example
     * // Delete one CollectionPayment
     * const CollectionPayment = await prisma.collectionPayment.delete({
     *   where: {
     *     // ... filter to delete one CollectionPayment
     *   }
     * })
     * 
     */
    delete<T extends CollectionPaymentDeleteArgs>(args: SelectSubset<T, CollectionPaymentDeleteArgs<ExtArgs>>): Prisma__CollectionPaymentClient<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CollectionPayment.
     * @param {CollectionPaymentUpdateArgs} args - Arguments to update one CollectionPayment.
     * @example
     * // Update one CollectionPayment
     * const collectionPayment = await prisma.collectionPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollectionPaymentUpdateArgs>(args: SelectSubset<T, CollectionPaymentUpdateArgs<ExtArgs>>): Prisma__CollectionPaymentClient<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CollectionPayments.
     * @param {CollectionPaymentDeleteManyArgs} args - Arguments to filter CollectionPayments to delete.
     * @example
     * // Delete a few CollectionPayments
     * const { count } = await prisma.collectionPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollectionPaymentDeleteManyArgs>(args?: SelectSubset<T, CollectionPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollectionPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollectionPayments
     * const collectionPayment = await prisma.collectionPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollectionPaymentUpdateManyArgs>(args: SelectSubset<T, CollectionPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollectionPayments and returns the data updated in the database.
     * @param {CollectionPaymentUpdateManyAndReturnArgs} args - Arguments to update many CollectionPayments.
     * @example
     * // Update many CollectionPayments
     * const collectionPayment = await prisma.collectionPayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CollectionPayments and only return the `id`
     * const collectionPaymentWithIdOnly = await prisma.collectionPayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CollectionPaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, CollectionPaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CollectionPayment.
     * @param {CollectionPaymentUpsertArgs} args - Arguments to update or create a CollectionPayment.
     * @example
     * // Update or create a CollectionPayment
     * const collectionPayment = await prisma.collectionPayment.upsert({
     *   create: {
     *     // ... data to create a CollectionPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollectionPayment we want to update
     *   }
     * })
     */
    upsert<T extends CollectionPaymentUpsertArgs>(args: SelectSubset<T, CollectionPaymentUpsertArgs<ExtArgs>>): Prisma__CollectionPaymentClient<$Result.GetResult<Prisma.$CollectionPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CollectionPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPaymentCountArgs} args - Arguments to filter CollectionPayments to count.
     * @example
     * // Count the number of CollectionPayments
     * const count = await prisma.collectionPayment.count({
     *   where: {
     *     // ... the filter for the CollectionPayments we want to count
     *   }
     * })
    **/
    count<T extends CollectionPaymentCountArgs>(
      args?: Subset<T, CollectionPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollectionPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionPaymentAggregateArgs>(args: Subset<T, CollectionPaymentAggregateArgs>): Prisma.PrismaPromise<GetCollectionPaymentAggregateType<T>>

    /**
     * Group by CollectionPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionPaymentGroupByArgs['orderBy'] }
        : { orderBy?: CollectionPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollectionPayment model
   */
  readonly fields: CollectionPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollectionPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollectionPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    collection<T extends CollectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollectionDefaultArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CollectionPayment model
   */
  interface CollectionPaymentFieldRefs {
    readonly id: FieldRef<"CollectionPayment", 'String'>
    readonly created_at: FieldRef<"CollectionPayment", 'DateTime'>
    readonly updated_at: FieldRef<"CollectionPayment", 'DateTime'>
    readonly deleted_at: FieldRef<"CollectionPayment", 'DateTime'>
    readonly userId: FieldRef<"CollectionPayment", 'String'>
    readonly collectionId: FieldRef<"CollectionPayment", 'String'>
    readonly amount: FieldRef<"CollectionPayment", 'Float'>
    readonly currency: FieldRef<"CollectionPayment", 'String'>
    readonly status: FieldRef<"CollectionPayment", 'PaymentStatus'>
  }
    

  // Custom InputTypes
  /**
   * CollectionPayment findUnique
   */
  export type CollectionPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPayment to fetch.
     */
    where: CollectionPaymentWhereUniqueInput
  }

  /**
   * CollectionPayment findUniqueOrThrow
   */
  export type CollectionPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPayment to fetch.
     */
    where: CollectionPaymentWhereUniqueInput
  }

  /**
   * CollectionPayment findFirst
   */
  export type CollectionPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPayment to fetch.
     */
    where?: CollectionPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionPayments to fetch.
     */
    orderBy?: CollectionPaymentOrderByWithRelationInput | CollectionPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionPayments.
     */
    cursor?: CollectionPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionPayments.
     */
    distinct?: CollectionPaymentScalarFieldEnum | CollectionPaymentScalarFieldEnum[]
  }

  /**
   * CollectionPayment findFirstOrThrow
   */
  export type CollectionPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPayment to fetch.
     */
    where?: CollectionPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionPayments to fetch.
     */
    orderBy?: CollectionPaymentOrderByWithRelationInput | CollectionPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionPayments.
     */
    cursor?: CollectionPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionPayments.
     */
    distinct?: CollectionPaymentScalarFieldEnum | CollectionPaymentScalarFieldEnum[]
  }

  /**
   * CollectionPayment findMany
   */
  export type CollectionPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPayments to fetch.
     */
    where?: CollectionPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionPayments to fetch.
     */
    orderBy?: CollectionPaymentOrderByWithRelationInput | CollectionPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollectionPayments.
     */
    cursor?: CollectionPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionPayments.
     */
    skip?: number
    distinct?: CollectionPaymentScalarFieldEnum | CollectionPaymentScalarFieldEnum[]
  }

  /**
   * CollectionPayment create
   */
  export type CollectionPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a CollectionPayment.
     */
    data: XOR<CollectionPaymentCreateInput, CollectionPaymentUncheckedCreateInput>
  }

  /**
   * CollectionPayment createMany
   */
  export type CollectionPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollectionPayments.
     */
    data: CollectionPaymentCreateManyInput | CollectionPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CollectionPayment createManyAndReturn
   */
  export type CollectionPaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * The data used to create many CollectionPayments.
     */
    data: CollectionPaymentCreateManyInput | CollectionPaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CollectionPayment update
   */
  export type CollectionPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a CollectionPayment.
     */
    data: XOR<CollectionPaymentUpdateInput, CollectionPaymentUncheckedUpdateInput>
    /**
     * Choose, which CollectionPayment to update.
     */
    where: CollectionPaymentWhereUniqueInput
  }

  /**
   * CollectionPayment updateMany
   */
  export type CollectionPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollectionPayments.
     */
    data: XOR<CollectionPaymentUpdateManyMutationInput, CollectionPaymentUncheckedUpdateManyInput>
    /**
     * Filter which CollectionPayments to update
     */
    where?: CollectionPaymentWhereInput
    /**
     * Limit how many CollectionPayments to update.
     */
    limit?: number
  }

  /**
   * CollectionPayment updateManyAndReturn
   */
  export type CollectionPaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * The data used to update CollectionPayments.
     */
    data: XOR<CollectionPaymentUpdateManyMutationInput, CollectionPaymentUncheckedUpdateManyInput>
    /**
     * Filter which CollectionPayments to update
     */
    where?: CollectionPaymentWhereInput
    /**
     * Limit how many CollectionPayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CollectionPayment upsert
   */
  export type CollectionPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the CollectionPayment to update in case it exists.
     */
    where: CollectionPaymentWhereUniqueInput
    /**
     * In case the CollectionPayment found by the `where` argument doesn't exist, create a new CollectionPayment with this data.
     */
    create: XOR<CollectionPaymentCreateInput, CollectionPaymentUncheckedCreateInput>
    /**
     * In case the CollectionPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollectionPaymentUpdateInput, CollectionPaymentUncheckedUpdateInput>
  }

  /**
   * CollectionPayment delete
   */
  export type CollectionPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
    /**
     * Filter which CollectionPayment to delete.
     */
    where: CollectionPaymentWhereUniqueInput
  }

  /**
   * CollectionPayment deleteMany
   */
  export type CollectionPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionPayments to delete
     */
    where?: CollectionPaymentWhereInput
    /**
     * Limit how many CollectionPayments to delete.
     */
    limit?: number
  }

  /**
   * CollectionPayment without action
   */
  export type CollectionPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPayment
     */
    select?: CollectionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CollectionPayment
     */
    omit?: CollectionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionPaymentInclude<ExtArgs> | null
  }


  /**
   * Model Categorable
   */

  export type AggregateCategorable = {
    _count: CategorableCountAggregateOutputType | null
    _min: CategorableMinAggregateOutputType | null
    _max: CategorableMaxAggregateOutputType | null
  }

  export type CategorableMinAggregateOutputType = {
    categoryId: string | null
    categorableId: string | null
    categorableType: string | null
  }

  export type CategorableMaxAggregateOutputType = {
    categoryId: string | null
    categorableId: string | null
    categorableType: string | null
  }

  export type CategorableCountAggregateOutputType = {
    categoryId: number
    categorableId: number
    categorableType: number
    _all: number
  }


  export type CategorableMinAggregateInputType = {
    categoryId?: true
    categorableId?: true
    categorableType?: true
  }

  export type CategorableMaxAggregateInputType = {
    categoryId?: true
    categorableId?: true
    categorableType?: true
  }

  export type CategorableCountAggregateInputType = {
    categoryId?: true
    categorableId?: true
    categorableType?: true
    _all?: true
  }

  export type CategorableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorable to aggregate.
     */
    where?: CategorableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorables to fetch.
     */
    orderBy?: CategorableOrderByWithRelationInput | CategorableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategorableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorables
    **/
    _count?: true | CategorableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategorableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategorableMaxAggregateInputType
  }

  export type GetCategorableAggregateType<T extends CategorableAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorable[P]>
      : GetScalarType<T[P], AggregateCategorable[P]>
  }




  export type CategorableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategorableWhereInput
    orderBy?: CategorableOrderByWithAggregationInput | CategorableOrderByWithAggregationInput[]
    by: CategorableScalarFieldEnum[] | CategorableScalarFieldEnum
    having?: CategorableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategorableCountAggregateInputType | true
    _min?: CategorableMinAggregateInputType
    _max?: CategorableMaxAggregateInputType
  }

  export type CategorableGroupByOutputType = {
    categoryId: string
    categorableId: string
    categorableType: string
    _count: CategorableCountAggregateOutputType | null
    _min: CategorableMinAggregateOutputType | null
    _max: CategorableMaxAggregateOutputType | null
  }

  type GetCategorableGroupByPayload<T extends CategorableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategorableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategorableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategorableGroupByOutputType[P]>
            : GetScalarType<T[P], CategorableGroupByOutputType[P]>
        }
      >
    >


  export type CategorableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    categorableId?: boolean
    categorableType?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    content?: boolean | Categorable$contentArgs<ExtArgs>
  }, ExtArgs["result"]["categorable"]>

  export type CategorableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    categorableId?: boolean
    categorableType?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    content?: boolean | Categorable$contentArgs<ExtArgs>
  }, ExtArgs["result"]["categorable"]>

  export type CategorableSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    categorableId?: boolean
    categorableType?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    content?: boolean | Categorable$contentArgs<ExtArgs>
  }, ExtArgs["result"]["categorable"]>

  export type CategorableSelectScalar = {
    categoryId?: boolean
    categorableId?: boolean
    categorableType?: boolean
  }

  export type CategorableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"categoryId" | "categorableId" | "categorableType", ExtArgs["result"]["categorable"]>
  export type CategorableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    content?: boolean | Categorable$contentArgs<ExtArgs>
  }
  export type CategorableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    content?: boolean | Categorable$contentArgs<ExtArgs>
  }
  export type CategorableIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    content?: boolean | Categorable$contentArgs<ExtArgs>
  }

  export type $CategorablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categorable"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      content: Prisma.$ContentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      categoryId: string
      categorableId: string
      categorableType: string
    }, ExtArgs["result"]["categorable"]>
    composites: {}
  }

  type CategorableGetPayload<S extends boolean | null | undefined | CategorableDefaultArgs> = $Result.GetResult<Prisma.$CategorablePayload, S>

  type CategorableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategorableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategorableCountAggregateInputType | true
    }

  export interface CategorableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categorable'], meta: { name: 'Categorable' } }
    /**
     * Find zero or one Categorable that matches the filter.
     * @param {CategorableFindUniqueArgs} args - Arguments to find a Categorable
     * @example
     * // Get one Categorable
     * const categorable = await prisma.categorable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategorableFindUniqueArgs>(args: SelectSubset<T, CategorableFindUniqueArgs<ExtArgs>>): Prisma__CategorableClient<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Categorable that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategorableFindUniqueOrThrowArgs} args - Arguments to find a Categorable
     * @example
     * // Get one Categorable
     * const categorable = await prisma.categorable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategorableFindUniqueOrThrowArgs>(args: SelectSubset<T, CategorableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategorableClient<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categorable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorableFindFirstArgs} args - Arguments to find a Categorable
     * @example
     * // Get one Categorable
     * const categorable = await prisma.categorable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategorableFindFirstArgs>(args?: SelectSubset<T, CategorableFindFirstArgs<ExtArgs>>): Prisma__CategorableClient<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categorable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorableFindFirstOrThrowArgs} args - Arguments to find a Categorable
     * @example
     * // Get one Categorable
     * const categorable = await prisma.categorable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategorableFindFirstOrThrowArgs>(args?: SelectSubset<T, CategorableFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategorableClient<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categorables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorables
     * const categorables = await prisma.categorable.findMany()
     * 
     * // Get first 10 Categorables
     * const categorables = await prisma.categorable.findMany({ take: 10 })
     * 
     * // Only select the `categoryId`
     * const categorableWithCategoryIdOnly = await prisma.categorable.findMany({ select: { categoryId: true } })
     * 
     */
    findMany<T extends CategorableFindManyArgs>(args?: SelectSubset<T, CategorableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Categorable.
     * @param {CategorableCreateArgs} args - Arguments to create a Categorable.
     * @example
     * // Create one Categorable
     * const Categorable = await prisma.categorable.create({
     *   data: {
     *     // ... data to create a Categorable
     *   }
     * })
     * 
     */
    create<T extends CategorableCreateArgs>(args: SelectSubset<T, CategorableCreateArgs<ExtArgs>>): Prisma__CategorableClient<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categorables.
     * @param {CategorableCreateManyArgs} args - Arguments to create many Categorables.
     * @example
     * // Create many Categorables
     * const categorable = await prisma.categorable.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategorableCreateManyArgs>(args?: SelectSubset<T, CategorableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categorables and returns the data saved in the database.
     * @param {CategorableCreateManyAndReturnArgs} args - Arguments to create many Categorables.
     * @example
     * // Create many Categorables
     * const categorable = await prisma.categorable.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categorables and only return the `categoryId`
     * const categorableWithCategoryIdOnly = await prisma.categorable.createManyAndReturn({
     *   select: { categoryId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategorableCreateManyAndReturnArgs>(args?: SelectSubset<T, CategorableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Categorable.
     * @param {CategorableDeleteArgs} args - Arguments to delete one Categorable.
     * @example
     * // Delete one Categorable
     * const Categorable = await prisma.categorable.delete({
     *   where: {
     *     // ... filter to delete one Categorable
     *   }
     * })
     * 
     */
    delete<T extends CategorableDeleteArgs>(args: SelectSubset<T, CategorableDeleteArgs<ExtArgs>>): Prisma__CategorableClient<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Categorable.
     * @param {CategorableUpdateArgs} args - Arguments to update one Categorable.
     * @example
     * // Update one Categorable
     * const categorable = await prisma.categorable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategorableUpdateArgs>(args: SelectSubset<T, CategorableUpdateArgs<ExtArgs>>): Prisma__CategorableClient<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categorables.
     * @param {CategorableDeleteManyArgs} args - Arguments to filter Categorables to delete.
     * @example
     * // Delete a few Categorables
     * const { count } = await prisma.categorable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategorableDeleteManyArgs>(args?: SelectSubset<T, CategorableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorables
     * const categorable = await prisma.categorable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategorableUpdateManyArgs>(args: SelectSubset<T, CategorableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorables and returns the data updated in the database.
     * @param {CategorableUpdateManyAndReturnArgs} args - Arguments to update many Categorables.
     * @example
     * // Update many Categorables
     * const categorable = await prisma.categorable.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categorables and only return the `categoryId`
     * const categorableWithCategoryIdOnly = await prisma.categorable.updateManyAndReturn({
     *   select: { categoryId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategorableUpdateManyAndReturnArgs>(args: SelectSubset<T, CategorableUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Categorable.
     * @param {CategorableUpsertArgs} args - Arguments to update or create a Categorable.
     * @example
     * // Update or create a Categorable
     * const categorable = await prisma.categorable.upsert({
     *   create: {
     *     // ... data to create a Categorable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorable we want to update
     *   }
     * })
     */
    upsert<T extends CategorableUpsertArgs>(args: SelectSubset<T, CategorableUpsertArgs<ExtArgs>>): Prisma__CategorableClient<$Result.GetResult<Prisma.$CategorablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categorables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorableCountArgs} args - Arguments to filter Categorables to count.
     * @example
     * // Count the number of Categorables
     * const count = await prisma.categorable.count({
     *   where: {
     *     // ... the filter for the Categorables we want to count
     *   }
     * })
    **/
    count<T extends CategorableCountArgs>(
      args?: Subset<T, CategorableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategorableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategorableAggregateArgs>(args: Subset<T, CategorableAggregateArgs>): Prisma.PrismaPromise<GetCategorableAggregateType<T>>

    /**
     * Group by Categorable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategorableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategorableGroupByArgs['orderBy'] }
        : { orderBy?: CategorableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategorableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categorable model
   */
  readonly fields: CategorableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categorable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategorableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    content<T extends Categorable$contentArgs<ExtArgs> = {}>(args?: Subset<T, Categorable$contentArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categorable model
   */
  interface CategorableFieldRefs {
    readonly categoryId: FieldRef<"Categorable", 'String'>
    readonly categorableId: FieldRef<"Categorable", 'String'>
    readonly categorableType: FieldRef<"Categorable", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Categorable findUnique
   */
  export type CategorableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    /**
     * Filter, which Categorable to fetch.
     */
    where: CategorableWhereUniqueInput
  }

  /**
   * Categorable findUniqueOrThrow
   */
  export type CategorableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    /**
     * Filter, which Categorable to fetch.
     */
    where: CategorableWhereUniqueInput
  }

  /**
   * Categorable findFirst
   */
  export type CategorableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    /**
     * Filter, which Categorable to fetch.
     */
    where?: CategorableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorables to fetch.
     */
    orderBy?: CategorableOrderByWithRelationInput | CategorableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorables.
     */
    cursor?: CategorableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorables.
     */
    distinct?: CategorableScalarFieldEnum | CategorableScalarFieldEnum[]
  }

  /**
   * Categorable findFirstOrThrow
   */
  export type CategorableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    /**
     * Filter, which Categorable to fetch.
     */
    where?: CategorableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorables to fetch.
     */
    orderBy?: CategorableOrderByWithRelationInput | CategorableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorables.
     */
    cursor?: CategorableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorables.
     */
    distinct?: CategorableScalarFieldEnum | CategorableScalarFieldEnum[]
  }

  /**
   * Categorable findMany
   */
  export type CategorableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    /**
     * Filter, which Categorables to fetch.
     */
    where?: CategorableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorables to fetch.
     */
    orderBy?: CategorableOrderByWithRelationInput | CategorableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorables.
     */
    cursor?: CategorableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorables.
     */
    skip?: number
    distinct?: CategorableScalarFieldEnum | CategorableScalarFieldEnum[]
  }

  /**
   * Categorable create
   */
  export type CategorableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    /**
     * The data needed to create a Categorable.
     */
    data: XOR<CategorableCreateInput, CategorableUncheckedCreateInput>
  }

  /**
   * Categorable createMany
   */
  export type CategorableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorables.
     */
    data: CategorableCreateManyInput | CategorableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categorable createManyAndReturn
   */
  export type CategorableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * The data used to create many Categorables.
     */
    data: CategorableCreateManyInput | CategorableCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Categorable update
   */
  export type CategorableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    /**
     * The data needed to update a Categorable.
     */
    data: XOR<CategorableUpdateInput, CategorableUncheckedUpdateInput>
    /**
     * Choose, which Categorable to update.
     */
    where: CategorableWhereUniqueInput
  }

  /**
   * Categorable updateMany
   */
  export type CategorableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorables.
     */
    data: XOR<CategorableUpdateManyMutationInput, CategorableUncheckedUpdateManyInput>
    /**
     * Filter which Categorables to update
     */
    where?: CategorableWhereInput
    /**
     * Limit how many Categorables to update.
     */
    limit?: number
  }

  /**
   * Categorable updateManyAndReturn
   */
  export type CategorableUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * The data used to update Categorables.
     */
    data: XOR<CategorableUpdateManyMutationInput, CategorableUncheckedUpdateManyInput>
    /**
     * Filter which Categorables to update
     */
    where?: CategorableWhereInput
    /**
     * Limit how many Categorables to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Categorable upsert
   */
  export type CategorableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    /**
     * The filter to search for the Categorable to update in case it exists.
     */
    where: CategorableWhereUniqueInput
    /**
     * In case the Categorable found by the `where` argument doesn't exist, create a new Categorable with this data.
     */
    create: XOR<CategorableCreateInput, CategorableUncheckedCreateInput>
    /**
     * In case the Categorable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategorableUpdateInput, CategorableUncheckedUpdateInput>
  }

  /**
   * Categorable delete
   */
  export type CategorableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
    /**
     * Filter which Categorable to delete.
     */
    where: CategorableWhereUniqueInput
  }

  /**
   * Categorable deleteMany
   */
  export type CategorableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorables to delete
     */
    where?: CategorableWhereInput
    /**
     * Limit how many Categorables to delete.
     */
    limit?: number
  }

  /**
   * Categorable.content
   */
  export type Categorable$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    where?: ContentWhereInput
  }

  /**
   * Categorable without action
   */
  export type CategorableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorable
     */
    select?: CategorableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categorable
     */
    omit?: CategorableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorableInclude<ExtArgs> | null
  }


  /**
   * Model Taggable
   */

  export type AggregateTaggable = {
    _count: TaggableCountAggregateOutputType | null
    _min: TaggableMinAggregateOutputType | null
    _max: TaggableMaxAggregateOutputType | null
  }

  export type TaggableMinAggregateOutputType = {
    tagId: string | null
    taggableId: string | null
    taggableType: string | null
  }

  export type TaggableMaxAggregateOutputType = {
    tagId: string | null
    taggableId: string | null
    taggableType: string | null
  }

  export type TaggableCountAggregateOutputType = {
    tagId: number
    taggableId: number
    taggableType: number
    _all: number
  }


  export type TaggableMinAggregateInputType = {
    tagId?: true
    taggableId?: true
    taggableType?: true
  }

  export type TaggableMaxAggregateInputType = {
    tagId?: true
    taggableId?: true
    taggableType?: true
  }

  export type TaggableCountAggregateInputType = {
    tagId?: true
    taggableId?: true
    taggableType?: true
    _all?: true
  }

  export type TaggableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Taggable to aggregate.
     */
    where?: TaggableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Taggables to fetch.
     */
    orderBy?: TaggableOrderByWithRelationInput | TaggableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaggableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Taggables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Taggables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Taggables
    **/
    _count?: true | TaggableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaggableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaggableMaxAggregateInputType
  }

  export type GetTaggableAggregateType<T extends TaggableAggregateArgs> = {
        [P in keyof T & keyof AggregateTaggable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaggable[P]>
      : GetScalarType<T[P], AggregateTaggable[P]>
  }




  export type TaggableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaggableWhereInput
    orderBy?: TaggableOrderByWithAggregationInput | TaggableOrderByWithAggregationInput[]
    by: TaggableScalarFieldEnum[] | TaggableScalarFieldEnum
    having?: TaggableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaggableCountAggregateInputType | true
    _min?: TaggableMinAggregateInputType
    _max?: TaggableMaxAggregateInputType
  }

  export type TaggableGroupByOutputType = {
    tagId: string
    taggableId: string
    taggableType: string
    _count: TaggableCountAggregateOutputType | null
    _min: TaggableMinAggregateOutputType | null
    _max: TaggableMaxAggregateOutputType | null
  }

  type GetTaggableGroupByPayload<T extends TaggableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaggableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaggableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaggableGroupByOutputType[P]>
            : GetScalarType<T[P], TaggableGroupByOutputType[P]>
        }
      >
    >


  export type TaggableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagId?: boolean
    taggableId?: boolean
    taggableType?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    content?: boolean | Taggable$contentArgs<ExtArgs>
  }, ExtArgs["result"]["taggable"]>

  export type TaggableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagId?: boolean
    taggableId?: boolean
    taggableType?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    content?: boolean | Taggable$contentArgs<ExtArgs>
  }, ExtArgs["result"]["taggable"]>

  export type TaggableSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagId?: boolean
    taggableId?: boolean
    taggableType?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    content?: boolean | Taggable$contentArgs<ExtArgs>
  }, ExtArgs["result"]["taggable"]>

  export type TaggableSelectScalar = {
    tagId?: boolean
    taggableId?: boolean
    taggableType?: boolean
  }

  export type TaggableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tagId" | "taggableId" | "taggableType", ExtArgs["result"]["taggable"]>
  export type TaggableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    content?: boolean | Taggable$contentArgs<ExtArgs>
  }
  export type TaggableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    content?: boolean | Taggable$contentArgs<ExtArgs>
  }
  export type TaggableIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    content?: boolean | Taggable$contentArgs<ExtArgs>
  }

  export type $TaggablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Taggable"
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>
      content: Prisma.$ContentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      tagId: string
      taggableId: string
      taggableType: string
    }, ExtArgs["result"]["taggable"]>
    composites: {}
  }

  type TaggableGetPayload<S extends boolean | null | undefined | TaggableDefaultArgs> = $Result.GetResult<Prisma.$TaggablePayload, S>

  type TaggableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaggableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaggableCountAggregateInputType | true
    }

  export interface TaggableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Taggable'], meta: { name: 'Taggable' } }
    /**
     * Find zero or one Taggable that matches the filter.
     * @param {TaggableFindUniqueArgs} args - Arguments to find a Taggable
     * @example
     * // Get one Taggable
     * const taggable = await prisma.taggable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaggableFindUniqueArgs>(args: SelectSubset<T, TaggableFindUniqueArgs<ExtArgs>>): Prisma__TaggableClient<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Taggable that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaggableFindUniqueOrThrowArgs} args - Arguments to find a Taggable
     * @example
     * // Get one Taggable
     * const taggable = await prisma.taggable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaggableFindUniqueOrThrowArgs>(args: SelectSubset<T, TaggableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaggableClient<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Taggable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaggableFindFirstArgs} args - Arguments to find a Taggable
     * @example
     * // Get one Taggable
     * const taggable = await prisma.taggable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaggableFindFirstArgs>(args?: SelectSubset<T, TaggableFindFirstArgs<ExtArgs>>): Prisma__TaggableClient<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Taggable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaggableFindFirstOrThrowArgs} args - Arguments to find a Taggable
     * @example
     * // Get one Taggable
     * const taggable = await prisma.taggable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaggableFindFirstOrThrowArgs>(args?: SelectSubset<T, TaggableFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaggableClient<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Taggables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaggableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Taggables
     * const taggables = await prisma.taggable.findMany()
     * 
     * // Get first 10 Taggables
     * const taggables = await prisma.taggable.findMany({ take: 10 })
     * 
     * // Only select the `tagId`
     * const taggableWithTagIdOnly = await prisma.taggable.findMany({ select: { tagId: true } })
     * 
     */
    findMany<T extends TaggableFindManyArgs>(args?: SelectSubset<T, TaggableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Taggable.
     * @param {TaggableCreateArgs} args - Arguments to create a Taggable.
     * @example
     * // Create one Taggable
     * const Taggable = await prisma.taggable.create({
     *   data: {
     *     // ... data to create a Taggable
     *   }
     * })
     * 
     */
    create<T extends TaggableCreateArgs>(args: SelectSubset<T, TaggableCreateArgs<ExtArgs>>): Prisma__TaggableClient<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Taggables.
     * @param {TaggableCreateManyArgs} args - Arguments to create many Taggables.
     * @example
     * // Create many Taggables
     * const taggable = await prisma.taggable.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaggableCreateManyArgs>(args?: SelectSubset<T, TaggableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Taggables and returns the data saved in the database.
     * @param {TaggableCreateManyAndReturnArgs} args - Arguments to create many Taggables.
     * @example
     * // Create many Taggables
     * const taggable = await prisma.taggable.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Taggables and only return the `tagId`
     * const taggableWithTagIdOnly = await prisma.taggable.createManyAndReturn({
     *   select: { tagId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaggableCreateManyAndReturnArgs>(args?: SelectSubset<T, TaggableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Taggable.
     * @param {TaggableDeleteArgs} args - Arguments to delete one Taggable.
     * @example
     * // Delete one Taggable
     * const Taggable = await prisma.taggable.delete({
     *   where: {
     *     // ... filter to delete one Taggable
     *   }
     * })
     * 
     */
    delete<T extends TaggableDeleteArgs>(args: SelectSubset<T, TaggableDeleteArgs<ExtArgs>>): Prisma__TaggableClient<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Taggable.
     * @param {TaggableUpdateArgs} args - Arguments to update one Taggable.
     * @example
     * // Update one Taggable
     * const taggable = await prisma.taggable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaggableUpdateArgs>(args: SelectSubset<T, TaggableUpdateArgs<ExtArgs>>): Prisma__TaggableClient<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Taggables.
     * @param {TaggableDeleteManyArgs} args - Arguments to filter Taggables to delete.
     * @example
     * // Delete a few Taggables
     * const { count } = await prisma.taggable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaggableDeleteManyArgs>(args?: SelectSubset<T, TaggableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Taggables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaggableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Taggables
     * const taggable = await prisma.taggable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaggableUpdateManyArgs>(args: SelectSubset<T, TaggableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Taggables and returns the data updated in the database.
     * @param {TaggableUpdateManyAndReturnArgs} args - Arguments to update many Taggables.
     * @example
     * // Update many Taggables
     * const taggable = await prisma.taggable.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Taggables and only return the `tagId`
     * const taggableWithTagIdOnly = await prisma.taggable.updateManyAndReturn({
     *   select: { tagId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaggableUpdateManyAndReturnArgs>(args: SelectSubset<T, TaggableUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Taggable.
     * @param {TaggableUpsertArgs} args - Arguments to update or create a Taggable.
     * @example
     * // Update or create a Taggable
     * const taggable = await prisma.taggable.upsert({
     *   create: {
     *     // ... data to create a Taggable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Taggable we want to update
     *   }
     * })
     */
    upsert<T extends TaggableUpsertArgs>(args: SelectSubset<T, TaggableUpsertArgs<ExtArgs>>): Prisma__TaggableClient<$Result.GetResult<Prisma.$TaggablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Taggables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaggableCountArgs} args - Arguments to filter Taggables to count.
     * @example
     * // Count the number of Taggables
     * const count = await prisma.taggable.count({
     *   where: {
     *     // ... the filter for the Taggables we want to count
     *   }
     * })
    **/
    count<T extends TaggableCountArgs>(
      args?: Subset<T, TaggableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaggableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Taggable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaggableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaggableAggregateArgs>(args: Subset<T, TaggableAggregateArgs>): Prisma.PrismaPromise<GetTaggableAggregateType<T>>

    /**
     * Group by Taggable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaggableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaggableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaggableGroupByArgs['orderBy'] }
        : { orderBy?: TaggableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaggableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaggableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Taggable model
   */
  readonly fields: TaggableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Taggable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaggableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    content<T extends Taggable$contentArgs<ExtArgs> = {}>(args?: Subset<T, Taggable$contentArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Taggable model
   */
  interface TaggableFieldRefs {
    readonly tagId: FieldRef<"Taggable", 'String'>
    readonly taggableId: FieldRef<"Taggable", 'String'>
    readonly taggableType: FieldRef<"Taggable", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Taggable findUnique
   */
  export type TaggableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    /**
     * Filter, which Taggable to fetch.
     */
    where: TaggableWhereUniqueInput
  }

  /**
   * Taggable findUniqueOrThrow
   */
  export type TaggableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    /**
     * Filter, which Taggable to fetch.
     */
    where: TaggableWhereUniqueInput
  }

  /**
   * Taggable findFirst
   */
  export type TaggableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    /**
     * Filter, which Taggable to fetch.
     */
    where?: TaggableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Taggables to fetch.
     */
    orderBy?: TaggableOrderByWithRelationInput | TaggableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Taggables.
     */
    cursor?: TaggableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Taggables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Taggables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Taggables.
     */
    distinct?: TaggableScalarFieldEnum | TaggableScalarFieldEnum[]
  }

  /**
   * Taggable findFirstOrThrow
   */
  export type TaggableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    /**
     * Filter, which Taggable to fetch.
     */
    where?: TaggableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Taggables to fetch.
     */
    orderBy?: TaggableOrderByWithRelationInput | TaggableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Taggables.
     */
    cursor?: TaggableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Taggables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Taggables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Taggables.
     */
    distinct?: TaggableScalarFieldEnum | TaggableScalarFieldEnum[]
  }

  /**
   * Taggable findMany
   */
  export type TaggableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    /**
     * Filter, which Taggables to fetch.
     */
    where?: TaggableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Taggables to fetch.
     */
    orderBy?: TaggableOrderByWithRelationInput | TaggableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Taggables.
     */
    cursor?: TaggableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Taggables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Taggables.
     */
    skip?: number
    distinct?: TaggableScalarFieldEnum | TaggableScalarFieldEnum[]
  }

  /**
   * Taggable create
   */
  export type TaggableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    /**
     * The data needed to create a Taggable.
     */
    data: XOR<TaggableCreateInput, TaggableUncheckedCreateInput>
  }

  /**
   * Taggable createMany
   */
  export type TaggableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Taggables.
     */
    data: TaggableCreateManyInput | TaggableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Taggable createManyAndReturn
   */
  export type TaggableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * The data used to create many Taggables.
     */
    data: TaggableCreateManyInput | TaggableCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Taggable update
   */
  export type TaggableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    /**
     * The data needed to update a Taggable.
     */
    data: XOR<TaggableUpdateInput, TaggableUncheckedUpdateInput>
    /**
     * Choose, which Taggable to update.
     */
    where: TaggableWhereUniqueInput
  }

  /**
   * Taggable updateMany
   */
  export type TaggableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Taggables.
     */
    data: XOR<TaggableUpdateManyMutationInput, TaggableUncheckedUpdateManyInput>
    /**
     * Filter which Taggables to update
     */
    where?: TaggableWhereInput
    /**
     * Limit how many Taggables to update.
     */
    limit?: number
  }

  /**
   * Taggable updateManyAndReturn
   */
  export type TaggableUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * The data used to update Taggables.
     */
    data: XOR<TaggableUpdateManyMutationInput, TaggableUncheckedUpdateManyInput>
    /**
     * Filter which Taggables to update
     */
    where?: TaggableWhereInput
    /**
     * Limit how many Taggables to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Taggable upsert
   */
  export type TaggableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    /**
     * The filter to search for the Taggable to update in case it exists.
     */
    where: TaggableWhereUniqueInput
    /**
     * In case the Taggable found by the `where` argument doesn't exist, create a new Taggable with this data.
     */
    create: XOR<TaggableCreateInput, TaggableUncheckedCreateInput>
    /**
     * In case the Taggable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaggableUpdateInput, TaggableUncheckedUpdateInput>
  }

  /**
   * Taggable delete
   */
  export type TaggableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
    /**
     * Filter which Taggable to delete.
     */
    where: TaggableWhereUniqueInput
  }

  /**
   * Taggable deleteMany
   */
  export type TaggableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Taggables to delete
     */
    where?: TaggableWhereInput
    /**
     * Limit how many Taggables to delete.
     */
    limit?: number
  }

  /**
   * Taggable.content
   */
  export type Taggable$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Content
     */
    omit?: ContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    where?: ContentWhereInput
  }

  /**
   * Taggable without action
   */
  export type TaggableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taggable
     */
    select?: TaggableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taggable
     */
    omit?: TaggableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaggableInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    name: 'name',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    username: 'username',
    bio: 'bio',
    dob: 'dob',
    referral_id: 'referral_id',
    email_verified: 'email_verified',
    phone_number: 'phone_number',
    kyc_verified: 'kyc_verified',
    user_charge_type: 'user_charge_type',
    role: 'role',
    verified: 'verified',
    avatar: 'avatar',
    followerCount: 'followerCount',
    followingCount: 'followingCount',
    contentCount: 'contentCount',
    lastActive: 'lastActive',
    referrerId: 'referrerId',
    privyId: 'privyId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ContentScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    title: 'title',
    description: 'description',
    ownerId: 'ownerId',
    type: 'type',
    is_available: 'is_available',
    approved_by_admin: 'approved_by_admin',
    show_only_in_collections: 'show_only_in_collections',
    views: 'views',
    is_adult: 'is_adult',
    is_challenge: 'is_challenge',
    live_ended_at: 'live_ended_at',
    scheduled_date: 'scheduled_date',
    archived_at: 'archived_at',
    live_type: 'live_type',
    live_provider: 'live_provider',
    commentCount: 'commentCount',
    likeCount: 'likeCount',
    viewCount: 'viewCount',
    status: 'status',
    published: 'published',
    isPremium: 'isPremium',
    isPromoted: 'isPromoted',
    mediaUrl: 'mediaUrl',
    thumbnailUrl: 'thumbnailUrl'
  };

  export type ContentScalarFieldEnum = (typeof ContentScalarFieldEnum)[keyof typeof ContentScalarFieldEnum]


  export const CollectionScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    name: 'name',
    description: 'description',
    ownerId: 'ownerId',
    is_available: 'is_available',
    approved_by_admin: 'approved_by_admin',
    isPremium: 'isPremium',
    isPromoted: 'isPromoted',
    thumbnailUrl: 'thumbnailUrl'
  };

  export type CollectionScalarFieldEnum = (typeof CollectionScalarFieldEnum)[keyof typeof CollectionScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    name: 'name',
    description: 'description',
    slug: 'slug'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    name: 'name',
    slug: 'slug'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    userId: 'userId',
    contentId: 'contentId',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    userId: 'userId',
    balance: 'balance',
    currency: 'currency'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const ContentCommentScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    commentContent: 'commentContent',
    userId: 'userId',
    contentId: 'contentId'
  };

  export type ContentCommentScalarFieldEnum = (typeof ContentCommentScalarFieldEnum)[keyof typeof ContentCommentScalarFieldEnum]


  export const FollowersScalarFieldEnum: {
    userId: 'userId',
    followerId: 'followerId'
  };

  export type FollowersScalarFieldEnum = (typeof FollowersScalarFieldEnum)[keyof typeof FollowersScalarFieldEnum]


  export const ContentPaymentScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    userId: 'userId',
    contentId: 'contentId',
    amount: 'amount',
    currency: 'currency',
    status: 'status'
  };

  export type ContentPaymentScalarFieldEnum = (typeof ContentPaymentScalarFieldEnum)[keyof typeof ContentPaymentScalarFieldEnum]


  export const CollectionPaymentScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at',
    userId: 'userId',
    collectionId: 'collectionId',
    amount: 'amount',
    currency: 'currency',
    status: 'status'
  };

  export type CollectionPaymentScalarFieldEnum = (typeof CollectionPaymentScalarFieldEnum)[keyof typeof CollectionPaymentScalarFieldEnum]


  export const CategorableScalarFieldEnum: {
    categoryId: 'categoryId',
    categorableId: 'categorableId',
    categorableType: 'categorableType'
  };

  export type CategorableScalarFieldEnum = (typeof CategorableScalarFieldEnum)[keyof typeof CategorableScalarFieldEnum]


  export const TaggableScalarFieldEnum: {
    tagId: 'tagId',
    taggableId: 'taggableId',
    taggableType: 'taggableType'
  };

  export type TaggableScalarFieldEnum = (typeof TaggableScalarFieldEnum)[keyof typeof TaggableScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ContentStatus'
   */
  export type EnumContentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContentStatus'>
    


  /**
   * Reference to a field of type 'ContentStatus[]'
   */
  export type ListEnumContentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContentStatus[]'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus'
   */
  export type EnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus[]'
   */
  export type ListEnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    deleted_at?: DateTimeNullableFilter<"User"> | Date | string | null
    name?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    referral_id?: StringNullableFilter<"User"> | string | null
    email_verified?: BoolFilter<"User"> | boolean
    phone_number?: StringNullableFilter<"User"> | string | null
    kyc_verified?: BoolNullableFilter<"User"> | boolean | null
    user_charge_type?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    verified?: BoolFilter<"User"> | boolean
    avatar?: StringNullableFilter<"User"> | string | null
    followerCount?: IntFilter<"User"> | number
    followingCount?: IntFilter<"User"> | number
    contentCount?: IntFilter<"User"> | number
    lastActive?: DateTimeNullableFilter<"User"> | Date | string | null
    referrerId?: StringNullableFilter<"User"> | string | null
    privyId?: StringFilter<"User"> | string
    referrer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    referrals?: UserListRelationFilter
    contents_created?: ContentListRelationFilter
    collections_created?: CollectionListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    wallet?: XOR<WalletNullableScalarRelationFilter, WalletWhereInput> | null
    followers?: FollowersListRelationFilter
    following?: FollowersListRelationFilter
    content_payments?: ContentPaymentListRelationFilter
    collection_payments?: CollectionPaymentListRelationFilter
    content_comments?: ContentCommentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    name?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrder
    username?: SortOrder
    bio?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    referral_id?: SortOrderInput | SortOrder
    email_verified?: SortOrder
    phone_number?: SortOrderInput | SortOrder
    kyc_verified?: SortOrderInput | SortOrder
    user_charge_type?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    avatar?: SortOrderInput | SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    contentCount?: SortOrder
    lastActive?: SortOrderInput | SortOrder
    referrerId?: SortOrderInput | SortOrder
    privyId?: SortOrder
    referrer?: UserOrderByWithRelationInput
    referrals?: UserOrderByRelationAggregateInput
    contents_created?: ContentOrderByRelationAggregateInput
    collections_created?: CollectionOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    wallet?: WalletOrderByWithRelationInput
    followers?: FollowersOrderByRelationAggregateInput
    following?: FollowersOrderByRelationAggregateInput
    content_payments?: ContentPaymentOrderByRelationAggregateInput
    collection_payments?: CollectionPaymentOrderByRelationAggregateInput
    content_comments?: ContentCommentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    referral_id?: string
    privyId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    deleted_at?: DateTimeNullableFilter<"User"> | Date | string | null
    name?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    email_verified?: BoolFilter<"User"> | boolean
    phone_number?: StringNullableFilter<"User"> | string | null
    kyc_verified?: BoolNullableFilter<"User"> | boolean | null
    user_charge_type?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    verified?: BoolFilter<"User"> | boolean
    avatar?: StringNullableFilter<"User"> | string | null
    followerCount?: IntFilter<"User"> | number
    followingCount?: IntFilter<"User"> | number
    contentCount?: IntFilter<"User"> | number
    lastActive?: DateTimeNullableFilter<"User"> | Date | string | null
    referrerId?: StringNullableFilter<"User"> | string | null
    referrer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    referrals?: UserListRelationFilter
    contents_created?: ContentListRelationFilter
    collections_created?: CollectionListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    wallet?: XOR<WalletNullableScalarRelationFilter, WalletWhereInput> | null
    followers?: FollowersListRelationFilter
    following?: FollowersListRelationFilter
    content_payments?: ContentPaymentListRelationFilter
    collection_payments?: CollectionPaymentListRelationFilter
    content_comments?: ContentCommentListRelationFilter
  }, "id" | "email" | "username" | "referral_id" | "privyId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    name?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrder
    username?: SortOrder
    bio?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    referral_id?: SortOrderInput | SortOrder
    email_verified?: SortOrder
    phone_number?: SortOrderInput | SortOrder
    kyc_verified?: SortOrderInput | SortOrder
    user_charge_type?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    avatar?: SortOrderInput | SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    contentCount?: SortOrder
    lastActive?: SortOrderInput | SortOrder
    referrerId?: SortOrderInput | SortOrder
    privyId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    name?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    referral_id?: StringNullableWithAggregatesFilter<"User"> | string | null
    email_verified?: BoolWithAggregatesFilter<"User"> | boolean
    phone_number?: StringNullableWithAggregatesFilter<"User"> | string | null
    kyc_verified?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    user_charge_type?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    verified?: BoolWithAggregatesFilter<"User"> | boolean
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    followerCount?: IntWithAggregatesFilter<"User"> | number
    followingCount?: IntWithAggregatesFilter<"User"> | number
    contentCount?: IntWithAggregatesFilter<"User"> | number
    lastActive?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    referrerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    privyId?: StringWithAggregatesFilter<"User"> | string
  }

  export type ContentWhereInput = {
    AND?: ContentWhereInput | ContentWhereInput[]
    OR?: ContentWhereInput[]
    NOT?: ContentWhereInput | ContentWhereInput[]
    id?: StringFilter<"Content"> | string
    created_at?: DateTimeFilter<"Content"> | Date | string
    updated_at?: DateTimeFilter<"Content"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Content"> | Date | string | null
    title?: StringFilter<"Content"> | string
    description?: StringNullableFilter<"Content"> | string | null
    ownerId?: StringFilter<"Content"> | string
    type?: StringFilter<"Content"> | string
    is_available?: BoolFilter<"Content"> | boolean
    approved_by_admin?: BoolFilter<"Content"> | boolean
    show_only_in_collections?: BoolFilter<"Content"> | boolean
    views?: IntFilter<"Content"> | number
    is_adult?: BoolFilter<"Content"> | boolean
    is_challenge?: BoolFilter<"Content"> | boolean
    live_ended_at?: DateTimeNullableFilter<"Content"> | Date | string | null
    scheduled_date?: DateTimeNullableFilter<"Content"> | Date | string | null
    archived_at?: DateTimeNullableFilter<"Content"> | Date | string | null
    live_type?: StringNullableFilter<"Content"> | string | null
    live_provider?: StringNullableFilter<"Content"> | string | null
    commentCount?: IntFilter<"Content"> | number
    likeCount?: IntFilter<"Content"> | number
    viewCount?: IntFilter<"Content"> | number
    status?: EnumContentStatusFilter<"Content"> | $Enums.ContentStatus
    published?: BoolFilter<"Content"> | boolean
    isPremium?: BoolFilter<"Content"> | boolean
    isPromoted?: BoolFilter<"Content"> | boolean
    mediaUrl?: StringNullableFilter<"Content"> | string | null
    thumbnailUrl?: StringNullableFilter<"Content"> | string | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    subscriptions?: SubscriptionListRelationFilter
    collections?: CollectionListRelationFilter
    categories?: CategorableListRelationFilter
    tags?: TaggableListRelationFilter
    payments?: ContentPaymentListRelationFilter
    comments?: ContentCommentListRelationFilter
  }

  export type ContentOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    type?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    show_only_in_collections?: SortOrder
    views?: SortOrder
    is_adult?: SortOrder
    is_challenge?: SortOrder
    live_ended_at?: SortOrderInput | SortOrder
    scheduled_date?: SortOrderInput | SortOrder
    archived_at?: SortOrderInput | SortOrder
    live_type?: SortOrderInput | SortOrder
    live_provider?: SortOrderInput | SortOrder
    commentCount?: SortOrder
    likeCount?: SortOrder
    viewCount?: SortOrder
    status?: SortOrder
    published?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    owner?: UserOrderByWithRelationInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    collections?: CollectionOrderByRelationAggregateInput
    categories?: CategorableOrderByRelationAggregateInput
    tags?: TaggableOrderByRelationAggregateInput
    payments?: ContentPaymentOrderByRelationAggregateInput
    comments?: ContentCommentOrderByRelationAggregateInput
  }

  export type ContentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContentWhereInput | ContentWhereInput[]
    OR?: ContentWhereInput[]
    NOT?: ContentWhereInput | ContentWhereInput[]
    created_at?: DateTimeFilter<"Content"> | Date | string
    updated_at?: DateTimeFilter<"Content"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Content"> | Date | string | null
    title?: StringFilter<"Content"> | string
    description?: StringNullableFilter<"Content"> | string | null
    ownerId?: StringFilter<"Content"> | string
    type?: StringFilter<"Content"> | string
    is_available?: BoolFilter<"Content"> | boolean
    approved_by_admin?: BoolFilter<"Content"> | boolean
    show_only_in_collections?: BoolFilter<"Content"> | boolean
    views?: IntFilter<"Content"> | number
    is_adult?: BoolFilter<"Content"> | boolean
    is_challenge?: BoolFilter<"Content"> | boolean
    live_ended_at?: DateTimeNullableFilter<"Content"> | Date | string | null
    scheduled_date?: DateTimeNullableFilter<"Content"> | Date | string | null
    archived_at?: DateTimeNullableFilter<"Content"> | Date | string | null
    live_type?: StringNullableFilter<"Content"> | string | null
    live_provider?: StringNullableFilter<"Content"> | string | null
    commentCount?: IntFilter<"Content"> | number
    likeCount?: IntFilter<"Content"> | number
    viewCount?: IntFilter<"Content"> | number
    status?: EnumContentStatusFilter<"Content"> | $Enums.ContentStatus
    published?: BoolFilter<"Content"> | boolean
    isPremium?: BoolFilter<"Content"> | boolean
    isPromoted?: BoolFilter<"Content"> | boolean
    mediaUrl?: StringNullableFilter<"Content"> | string | null
    thumbnailUrl?: StringNullableFilter<"Content"> | string | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    subscriptions?: SubscriptionListRelationFilter
    collections?: CollectionListRelationFilter
    categories?: CategorableListRelationFilter
    tags?: TaggableListRelationFilter
    payments?: ContentPaymentListRelationFilter
    comments?: ContentCommentListRelationFilter
  }, "id">

  export type ContentOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    type?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    show_only_in_collections?: SortOrder
    views?: SortOrder
    is_adult?: SortOrder
    is_challenge?: SortOrder
    live_ended_at?: SortOrderInput | SortOrder
    scheduled_date?: SortOrderInput | SortOrder
    archived_at?: SortOrderInput | SortOrder
    live_type?: SortOrderInput | SortOrder
    live_provider?: SortOrderInput | SortOrder
    commentCount?: SortOrder
    likeCount?: SortOrder
    viewCount?: SortOrder
    status?: SortOrder
    published?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    _count?: ContentCountOrderByAggregateInput
    _avg?: ContentAvgOrderByAggregateInput
    _max?: ContentMaxOrderByAggregateInput
    _min?: ContentMinOrderByAggregateInput
    _sum?: ContentSumOrderByAggregateInput
  }

  export type ContentScalarWhereWithAggregatesInput = {
    AND?: ContentScalarWhereWithAggregatesInput | ContentScalarWhereWithAggregatesInput[]
    OR?: ContentScalarWhereWithAggregatesInput[]
    NOT?: ContentScalarWhereWithAggregatesInput | ContentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Content"> | string
    created_at?: DateTimeWithAggregatesFilter<"Content"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Content"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"Content"> | Date | string | null
    title?: StringWithAggregatesFilter<"Content"> | string
    description?: StringNullableWithAggregatesFilter<"Content"> | string | null
    ownerId?: StringWithAggregatesFilter<"Content"> | string
    type?: StringWithAggregatesFilter<"Content"> | string
    is_available?: BoolWithAggregatesFilter<"Content"> | boolean
    approved_by_admin?: BoolWithAggregatesFilter<"Content"> | boolean
    show_only_in_collections?: BoolWithAggregatesFilter<"Content"> | boolean
    views?: IntWithAggregatesFilter<"Content"> | number
    is_adult?: BoolWithAggregatesFilter<"Content"> | boolean
    is_challenge?: BoolWithAggregatesFilter<"Content"> | boolean
    live_ended_at?: DateTimeNullableWithAggregatesFilter<"Content"> | Date | string | null
    scheduled_date?: DateTimeNullableWithAggregatesFilter<"Content"> | Date | string | null
    archived_at?: DateTimeNullableWithAggregatesFilter<"Content"> | Date | string | null
    live_type?: StringNullableWithAggregatesFilter<"Content"> | string | null
    live_provider?: StringNullableWithAggregatesFilter<"Content"> | string | null
    commentCount?: IntWithAggregatesFilter<"Content"> | number
    likeCount?: IntWithAggregatesFilter<"Content"> | number
    viewCount?: IntWithAggregatesFilter<"Content"> | number
    status?: EnumContentStatusWithAggregatesFilter<"Content"> | $Enums.ContentStatus
    published?: BoolWithAggregatesFilter<"Content"> | boolean
    isPremium?: BoolWithAggregatesFilter<"Content"> | boolean
    isPromoted?: BoolWithAggregatesFilter<"Content"> | boolean
    mediaUrl?: StringNullableWithAggregatesFilter<"Content"> | string | null
    thumbnailUrl?: StringNullableWithAggregatesFilter<"Content"> | string | null
  }

  export type CollectionWhereInput = {
    AND?: CollectionWhereInput | CollectionWhereInput[]
    OR?: CollectionWhereInput[]
    NOT?: CollectionWhereInput | CollectionWhereInput[]
    id?: StringFilter<"Collection"> | string
    created_at?: DateTimeFilter<"Collection"> | Date | string
    updated_at?: DateTimeFilter<"Collection"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Collection"> | Date | string | null
    name?: StringFilter<"Collection"> | string
    description?: StringNullableFilter<"Collection"> | string | null
    ownerId?: StringFilter<"Collection"> | string
    is_available?: BoolFilter<"Collection"> | boolean
    approved_by_admin?: BoolFilter<"Collection"> | boolean
    isPremium?: BoolFilter<"Collection"> | boolean
    isPromoted?: BoolFilter<"Collection"> | boolean
    thumbnailUrl?: StringNullableFilter<"Collection"> | string | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    contents?: ContentListRelationFilter
    payments?: CollectionPaymentListRelationFilter
  }

  export type CollectionOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    owner?: UserOrderByWithRelationInput
    contents?: ContentOrderByRelationAggregateInput
    payments?: CollectionPaymentOrderByRelationAggregateInput
  }

  export type CollectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CollectionWhereInput | CollectionWhereInput[]
    OR?: CollectionWhereInput[]
    NOT?: CollectionWhereInput | CollectionWhereInput[]
    created_at?: DateTimeFilter<"Collection"> | Date | string
    updated_at?: DateTimeFilter<"Collection"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Collection"> | Date | string | null
    name?: StringFilter<"Collection"> | string
    description?: StringNullableFilter<"Collection"> | string | null
    ownerId?: StringFilter<"Collection"> | string
    is_available?: BoolFilter<"Collection"> | boolean
    approved_by_admin?: BoolFilter<"Collection"> | boolean
    isPremium?: BoolFilter<"Collection"> | boolean
    isPromoted?: BoolFilter<"Collection"> | boolean
    thumbnailUrl?: StringNullableFilter<"Collection"> | string | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    contents?: ContentListRelationFilter
    payments?: CollectionPaymentListRelationFilter
  }, "id">

  export type CollectionOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    _count?: CollectionCountOrderByAggregateInput
    _max?: CollectionMaxOrderByAggregateInput
    _min?: CollectionMinOrderByAggregateInput
  }

  export type CollectionScalarWhereWithAggregatesInput = {
    AND?: CollectionScalarWhereWithAggregatesInput | CollectionScalarWhereWithAggregatesInput[]
    OR?: CollectionScalarWhereWithAggregatesInput[]
    NOT?: CollectionScalarWhereWithAggregatesInput | CollectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Collection"> | string
    created_at?: DateTimeWithAggregatesFilter<"Collection"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Collection"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"Collection"> | Date | string | null
    name?: StringWithAggregatesFilter<"Collection"> | string
    description?: StringNullableWithAggregatesFilter<"Collection"> | string | null
    ownerId?: StringWithAggregatesFilter<"Collection"> | string
    is_available?: BoolWithAggregatesFilter<"Collection"> | boolean
    approved_by_admin?: BoolWithAggregatesFilter<"Collection"> | boolean
    isPremium?: BoolWithAggregatesFilter<"Collection"> | boolean
    isPromoted?: BoolWithAggregatesFilter<"Collection"> | boolean
    thumbnailUrl?: StringNullableWithAggregatesFilter<"Collection"> | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    created_at?: DateTimeFilter<"Category"> | Date | string
    updated_at?: DateTimeFilter<"Category"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Category"> | Date | string | null
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    slug?: StringFilter<"Category"> | string
    contents?: CategorableListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slug?: SortOrder
    contents?: CategorableOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    created_at?: DateTimeFilter<"Category"> | Date | string
    updated_at?: DateTimeFilter<"Category"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Category"> | Date | string | null
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    contents?: CategorableListRelationFilter
  }, "id" | "slug">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slug?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    created_at?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"Category"> | Date | string | null
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    slug?: StringWithAggregatesFilter<"Category"> | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    created_at?: DateTimeFilter<"Tag"> | Date | string
    updated_at?: DateTimeFilter<"Tag"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Tag"> | Date | string | null
    name?: StringFilter<"Tag"> | string
    slug?: StringFilter<"Tag"> | string
    contents?: TaggableListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    name?: SortOrder
    slug?: SortOrder
    contents?: TaggableOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    created_at?: DateTimeFilter<"Tag"> | Date | string
    updated_at?: DateTimeFilter<"Tag"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Tag"> | Date | string | null
    name?: StringFilter<"Tag"> | string
    contents?: TaggableListRelationFilter
  }, "id" | "slug">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    name?: SortOrder
    slug?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    created_at?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"Tag"> | Date | string | null
    name?: StringWithAggregatesFilter<"Tag"> | string
    slug?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    created_at?: DateTimeFilter<"Subscription"> | Date | string
    updated_at?: DateTimeFilter<"Subscription"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    userId?: StringFilter<"Subscription"> | string
    contentId?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    content?: XOR<ContentScalarRelationFilter, ContentWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    content?: ContentOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    created_at?: DateTimeFilter<"Subscription"> | Date | string
    updated_at?: DateTimeFilter<"Subscription"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    userId?: StringFilter<"Subscription"> | string
    contentId?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    content?: XOR<ContentScalarRelationFilter, ContentWhereInput>
  }, "id">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    created_at?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    userId?: StringWithAggregatesFilter<"Subscription"> | string
    contentId?: StringWithAggregatesFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusWithAggregatesFilter<"Subscription"> | $Enums.SubscriptionStatus
    startDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
  }

  export type WalletWhereInput = {
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    id?: StringFilter<"Wallet"> | string
    created_at?: DateTimeFilter<"Wallet"> | Date | string
    updated_at?: DateTimeFilter<"Wallet"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Wallet"> | Date | string | null
    userId?: StringFilter<"Wallet"> | string
    balance?: FloatFilter<"Wallet"> | number
    currency?: StringFilter<"Wallet"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WalletOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    userId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type WalletWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    created_at?: DateTimeFilter<"Wallet"> | Date | string
    updated_at?: DateTimeFilter<"Wallet"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Wallet"> | Date | string | null
    balance?: FloatFilter<"Wallet"> | number
    currency?: StringFilter<"Wallet"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type WalletOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    userId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
    _count?: WalletCountOrderByAggregateInput
    _avg?: WalletAvgOrderByAggregateInput
    _max?: WalletMaxOrderByAggregateInput
    _min?: WalletMinOrderByAggregateInput
    _sum?: WalletSumOrderByAggregateInput
  }

  export type WalletScalarWhereWithAggregatesInput = {
    AND?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    OR?: WalletScalarWhereWithAggregatesInput[]
    NOT?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wallet"> | string
    created_at?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"Wallet"> | Date | string | null
    userId?: StringWithAggregatesFilter<"Wallet"> | string
    balance?: FloatWithAggregatesFilter<"Wallet"> | number
    currency?: StringWithAggregatesFilter<"Wallet"> | string
  }

  export type ContentCommentWhereInput = {
    AND?: ContentCommentWhereInput | ContentCommentWhereInput[]
    OR?: ContentCommentWhereInput[]
    NOT?: ContentCommentWhereInput | ContentCommentWhereInput[]
    id?: StringFilter<"ContentComment"> | string
    created_at?: DateTimeFilter<"ContentComment"> | Date | string
    updated_at?: DateTimeFilter<"ContentComment"> | Date | string
    deleted_at?: DateTimeNullableFilter<"ContentComment"> | Date | string | null
    commentContent?: StringFilter<"ContentComment"> | string
    userId?: StringFilter<"ContentComment"> | string
    contentId?: StringFilter<"ContentComment"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    content?: XOR<ContentScalarRelationFilter, ContentWhereInput>
  }

  export type ContentCommentOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    commentContent?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    user?: UserOrderByWithRelationInput
    content?: ContentOrderByWithRelationInput
  }

  export type ContentCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContentCommentWhereInput | ContentCommentWhereInput[]
    OR?: ContentCommentWhereInput[]
    NOT?: ContentCommentWhereInput | ContentCommentWhereInput[]
    created_at?: DateTimeFilter<"ContentComment"> | Date | string
    updated_at?: DateTimeFilter<"ContentComment"> | Date | string
    deleted_at?: DateTimeNullableFilter<"ContentComment"> | Date | string | null
    commentContent?: StringFilter<"ContentComment"> | string
    userId?: StringFilter<"ContentComment"> | string
    contentId?: StringFilter<"ContentComment"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    content?: XOR<ContentScalarRelationFilter, ContentWhereInput>
  }, "id">

  export type ContentCommentOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    commentContent?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    _count?: ContentCommentCountOrderByAggregateInput
    _max?: ContentCommentMaxOrderByAggregateInput
    _min?: ContentCommentMinOrderByAggregateInput
  }

  export type ContentCommentScalarWhereWithAggregatesInput = {
    AND?: ContentCommentScalarWhereWithAggregatesInput | ContentCommentScalarWhereWithAggregatesInput[]
    OR?: ContentCommentScalarWhereWithAggregatesInput[]
    NOT?: ContentCommentScalarWhereWithAggregatesInput | ContentCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContentComment"> | string
    created_at?: DateTimeWithAggregatesFilter<"ContentComment"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"ContentComment"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"ContentComment"> | Date | string | null
    commentContent?: StringWithAggregatesFilter<"ContentComment"> | string
    userId?: StringWithAggregatesFilter<"ContentComment"> | string
    contentId?: StringWithAggregatesFilter<"ContentComment"> | string
  }

  export type FollowersWhereInput = {
    AND?: FollowersWhereInput | FollowersWhereInput[]
    OR?: FollowersWhereInput[]
    NOT?: FollowersWhereInput | FollowersWhereInput[]
    userId?: StringFilter<"Followers"> | string
    followerId?: StringFilter<"Followers"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FollowersOrderByWithRelationInput = {
    userId?: SortOrder
    followerId?: SortOrder
    user?: UserOrderByWithRelationInput
    follower?: UserOrderByWithRelationInput
  }

  export type FollowersWhereUniqueInput = Prisma.AtLeast<{
    userId_followerId?: FollowersUserIdFollowerIdCompoundUniqueInput
    AND?: FollowersWhereInput | FollowersWhereInput[]
    OR?: FollowersWhereInput[]
    NOT?: FollowersWhereInput | FollowersWhereInput[]
    userId?: StringFilter<"Followers"> | string
    followerId?: StringFilter<"Followers"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId_followerId">

  export type FollowersOrderByWithAggregationInput = {
    userId?: SortOrder
    followerId?: SortOrder
    _count?: FollowersCountOrderByAggregateInput
    _max?: FollowersMaxOrderByAggregateInput
    _min?: FollowersMinOrderByAggregateInput
  }

  export type FollowersScalarWhereWithAggregatesInput = {
    AND?: FollowersScalarWhereWithAggregatesInput | FollowersScalarWhereWithAggregatesInput[]
    OR?: FollowersScalarWhereWithAggregatesInput[]
    NOT?: FollowersScalarWhereWithAggregatesInput | FollowersScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Followers"> | string
    followerId?: StringWithAggregatesFilter<"Followers"> | string
  }

  export type ContentPaymentWhereInput = {
    AND?: ContentPaymentWhereInput | ContentPaymentWhereInput[]
    OR?: ContentPaymentWhereInput[]
    NOT?: ContentPaymentWhereInput | ContentPaymentWhereInput[]
    id?: StringFilter<"ContentPayment"> | string
    created_at?: DateTimeFilter<"ContentPayment"> | Date | string
    updated_at?: DateTimeFilter<"ContentPayment"> | Date | string
    deleted_at?: DateTimeNullableFilter<"ContentPayment"> | Date | string | null
    userId?: StringFilter<"ContentPayment"> | string
    contentId?: StringFilter<"ContentPayment"> | string
    amount?: FloatFilter<"ContentPayment"> | number
    currency?: StringFilter<"ContentPayment"> | string
    status?: EnumPaymentStatusFilter<"ContentPayment"> | $Enums.PaymentStatus
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    content?: XOR<ContentScalarRelationFilter, ContentWhereInput>
  }

  export type ContentPaymentOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    user?: UserOrderByWithRelationInput
    content?: ContentOrderByWithRelationInput
  }

  export type ContentPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_contentId?: ContentPaymentUserIdContentIdCompoundUniqueInput
    AND?: ContentPaymentWhereInput | ContentPaymentWhereInput[]
    OR?: ContentPaymentWhereInput[]
    NOT?: ContentPaymentWhereInput | ContentPaymentWhereInput[]
    created_at?: DateTimeFilter<"ContentPayment"> | Date | string
    updated_at?: DateTimeFilter<"ContentPayment"> | Date | string
    deleted_at?: DateTimeNullableFilter<"ContentPayment"> | Date | string | null
    userId?: StringFilter<"ContentPayment"> | string
    contentId?: StringFilter<"ContentPayment"> | string
    amount?: FloatFilter<"ContentPayment"> | number
    currency?: StringFilter<"ContentPayment"> | string
    status?: EnumPaymentStatusFilter<"ContentPayment"> | $Enums.PaymentStatus
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    content?: XOR<ContentScalarRelationFilter, ContentWhereInput>
  }, "id" | "userId_contentId">

  export type ContentPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    _count?: ContentPaymentCountOrderByAggregateInput
    _avg?: ContentPaymentAvgOrderByAggregateInput
    _max?: ContentPaymentMaxOrderByAggregateInput
    _min?: ContentPaymentMinOrderByAggregateInput
    _sum?: ContentPaymentSumOrderByAggregateInput
  }

  export type ContentPaymentScalarWhereWithAggregatesInput = {
    AND?: ContentPaymentScalarWhereWithAggregatesInput | ContentPaymentScalarWhereWithAggregatesInput[]
    OR?: ContentPaymentScalarWhereWithAggregatesInput[]
    NOT?: ContentPaymentScalarWhereWithAggregatesInput | ContentPaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContentPayment"> | string
    created_at?: DateTimeWithAggregatesFilter<"ContentPayment"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"ContentPayment"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"ContentPayment"> | Date | string | null
    userId?: StringWithAggregatesFilter<"ContentPayment"> | string
    contentId?: StringWithAggregatesFilter<"ContentPayment"> | string
    amount?: FloatWithAggregatesFilter<"ContentPayment"> | number
    currency?: StringWithAggregatesFilter<"ContentPayment"> | string
    status?: EnumPaymentStatusWithAggregatesFilter<"ContentPayment"> | $Enums.PaymentStatus
  }

  export type CollectionPaymentWhereInput = {
    AND?: CollectionPaymentWhereInput | CollectionPaymentWhereInput[]
    OR?: CollectionPaymentWhereInput[]
    NOT?: CollectionPaymentWhereInput | CollectionPaymentWhereInput[]
    id?: StringFilter<"CollectionPayment"> | string
    created_at?: DateTimeFilter<"CollectionPayment"> | Date | string
    updated_at?: DateTimeFilter<"CollectionPayment"> | Date | string
    deleted_at?: DateTimeNullableFilter<"CollectionPayment"> | Date | string | null
    userId?: StringFilter<"CollectionPayment"> | string
    collectionId?: StringFilter<"CollectionPayment"> | string
    amount?: FloatFilter<"CollectionPayment"> | number
    currency?: StringFilter<"CollectionPayment"> | string
    status?: EnumPaymentStatusFilter<"CollectionPayment"> | $Enums.PaymentStatus
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    collection?: XOR<CollectionScalarRelationFilter, CollectionWhereInput>
  }

  export type CollectionPaymentOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    userId?: SortOrder
    collectionId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    user?: UserOrderByWithRelationInput
    collection?: CollectionOrderByWithRelationInput
  }

  export type CollectionPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_collectionId?: CollectionPaymentUserIdCollectionIdCompoundUniqueInput
    AND?: CollectionPaymentWhereInput | CollectionPaymentWhereInput[]
    OR?: CollectionPaymentWhereInput[]
    NOT?: CollectionPaymentWhereInput | CollectionPaymentWhereInput[]
    created_at?: DateTimeFilter<"CollectionPayment"> | Date | string
    updated_at?: DateTimeFilter<"CollectionPayment"> | Date | string
    deleted_at?: DateTimeNullableFilter<"CollectionPayment"> | Date | string | null
    userId?: StringFilter<"CollectionPayment"> | string
    collectionId?: StringFilter<"CollectionPayment"> | string
    amount?: FloatFilter<"CollectionPayment"> | number
    currency?: StringFilter<"CollectionPayment"> | string
    status?: EnumPaymentStatusFilter<"CollectionPayment"> | $Enums.PaymentStatus
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    collection?: XOR<CollectionScalarRelationFilter, CollectionWhereInput>
  }, "id" | "userId_collectionId">

  export type CollectionPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    userId?: SortOrder
    collectionId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    _count?: CollectionPaymentCountOrderByAggregateInput
    _avg?: CollectionPaymentAvgOrderByAggregateInput
    _max?: CollectionPaymentMaxOrderByAggregateInput
    _min?: CollectionPaymentMinOrderByAggregateInput
    _sum?: CollectionPaymentSumOrderByAggregateInput
  }

  export type CollectionPaymentScalarWhereWithAggregatesInput = {
    AND?: CollectionPaymentScalarWhereWithAggregatesInput | CollectionPaymentScalarWhereWithAggregatesInput[]
    OR?: CollectionPaymentScalarWhereWithAggregatesInput[]
    NOT?: CollectionPaymentScalarWhereWithAggregatesInput | CollectionPaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CollectionPayment"> | string
    created_at?: DateTimeWithAggregatesFilter<"CollectionPayment"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CollectionPayment"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"CollectionPayment"> | Date | string | null
    userId?: StringWithAggregatesFilter<"CollectionPayment"> | string
    collectionId?: StringWithAggregatesFilter<"CollectionPayment"> | string
    amount?: FloatWithAggregatesFilter<"CollectionPayment"> | number
    currency?: StringWithAggregatesFilter<"CollectionPayment"> | string
    status?: EnumPaymentStatusWithAggregatesFilter<"CollectionPayment"> | $Enums.PaymentStatus
  }

  export type CategorableWhereInput = {
    AND?: CategorableWhereInput | CategorableWhereInput[]
    OR?: CategorableWhereInput[]
    NOT?: CategorableWhereInput | CategorableWhereInput[]
    categoryId?: StringFilter<"Categorable"> | string
    categorableId?: StringFilter<"Categorable"> | string
    categorableType?: StringFilter<"Categorable"> | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    content?: XOR<ContentNullableScalarRelationFilter, ContentWhereInput> | null
  }

  export type CategorableOrderByWithRelationInput = {
    categoryId?: SortOrder
    categorableId?: SortOrder
    categorableType?: SortOrder
    category?: CategoryOrderByWithRelationInput
    content?: ContentOrderByWithRelationInput
  }

  export type CategorableWhereUniqueInput = Prisma.AtLeast<{
    categoryId_categorableId_categorableType?: CategorableCategoryIdCategorableIdCategorableTypeCompoundUniqueInput
    AND?: CategorableWhereInput | CategorableWhereInput[]
    OR?: CategorableWhereInput[]
    NOT?: CategorableWhereInput | CategorableWhereInput[]
    categoryId?: StringFilter<"Categorable"> | string
    categorableId?: StringFilter<"Categorable"> | string
    categorableType?: StringFilter<"Categorable"> | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    content?: XOR<ContentNullableScalarRelationFilter, ContentWhereInput> | null
  }, "categoryId_categorableId_categorableType">

  export type CategorableOrderByWithAggregationInput = {
    categoryId?: SortOrder
    categorableId?: SortOrder
    categorableType?: SortOrder
    _count?: CategorableCountOrderByAggregateInput
    _max?: CategorableMaxOrderByAggregateInput
    _min?: CategorableMinOrderByAggregateInput
  }

  export type CategorableScalarWhereWithAggregatesInput = {
    AND?: CategorableScalarWhereWithAggregatesInput | CategorableScalarWhereWithAggregatesInput[]
    OR?: CategorableScalarWhereWithAggregatesInput[]
    NOT?: CategorableScalarWhereWithAggregatesInput | CategorableScalarWhereWithAggregatesInput[]
    categoryId?: StringWithAggregatesFilter<"Categorable"> | string
    categorableId?: StringWithAggregatesFilter<"Categorable"> | string
    categorableType?: StringWithAggregatesFilter<"Categorable"> | string
  }

  export type TaggableWhereInput = {
    AND?: TaggableWhereInput | TaggableWhereInput[]
    OR?: TaggableWhereInput[]
    NOT?: TaggableWhereInput | TaggableWhereInput[]
    tagId?: StringFilter<"Taggable"> | string
    taggableId?: StringFilter<"Taggable"> | string
    taggableType?: StringFilter<"Taggable"> | string
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
    content?: XOR<ContentNullableScalarRelationFilter, ContentWhereInput> | null
  }

  export type TaggableOrderByWithRelationInput = {
    tagId?: SortOrder
    taggableId?: SortOrder
    taggableType?: SortOrder
    tag?: TagOrderByWithRelationInput
    content?: ContentOrderByWithRelationInput
  }

  export type TaggableWhereUniqueInput = Prisma.AtLeast<{
    tagId_taggableId_taggableType?: TaggableTagIdTaggableIdTaggableTypeCompoundUniqueInput
    AND?: TaggableWhereInput | TaggableWhereInput[]
    OR?: TaggableWhereInput[]
    NOT?: TaggableWhereInput | TaggableWhereInput[]
    tagId?: StringFilter<"Taggable"> | string
    taggableId?: StringFilter<"Taggable"> | string
    taggableType?: StringFilter<"Taggable"> | string
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
    content?: XOR<ContentNullableScalarRelationFilter, ContentWhereInput> | null
  }, "tagId_taggableId_taggableType">

  export type TaggableOrderByWithAggregationInput = {
    tagId?: SortOrder
    taggableId?: SortOrder
    taggableType?: SortOrder
    _count?: TaggableCountOrderByAggregateInput
    _max?: TaggableMaxOrderByAggregateInput
    _min?: TaggableMinOrderByAggregateInput
  }

  export type TaggableScalarWhereWithAggregatesInput = {
    AND?: TaggableScalarWhereWithAggregatesInput | TaggableScalarWhereWithAggregatesInput[]
    OR?: TaggableScalarWhereWithAggregatesInput[]
    NOT?: TaggableScalarWhereWithAggregatesInput | TaggableScalarWhereWithAggregatesInput[]
    tagId?: StringWithAggregatesFilter<"Taggable"> | string
    taggableId?: StringWithAggregatesFilter<"Taggable"> | string
    taggableType?: StringWithAggregatesFilter<"Taggable"> | string
  }

  export type UserCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
  }

  export type ContentCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutContents_createdInput
    subscriptions?: SubscriptionCreateNestedManyWithoutContentInput
    collections?: CollectionCreateNestedManyWithoutContentsInput
    categories?: CategorableCreateNestedManyWithoutContentInput
    tags?: TaggableCreateNestedManyWithoutContentInput
    payments?: ContentPaymentCreateNestedManyWithoutContentInput
    comments?: ContentCommentCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    ownerId: string
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutContentInput
    collections?: CollectionUncheckedCreateNestedManyWithoutContentsInput
    categories?: CategorableUncheckedCreateNestedManyWithoutContentInput
    tags?: TaggableUncheckedCreateNestedManyWithoutContentInput
    payments?: ContentPaymentUncheckedCreateNestedManyWithoutContentInput
    comments?: ContentCommentUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutContents_createdNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutContentNestedInput
    collections?: CollectionUpdateManyWithoutContentsNestedInput
    categories?: CategorableUpdateManyWithoutContentNestedInput
    tags?: TaggableUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutContentNestedInput
    collections?: CollectionUncheckedUpdateManyWithoutContentsNestedInput
    categories?: CategorableUncheckedUpdateManyWithoutContentNestedInput
    tags?: TaggableUncheckedUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUncheckedUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type ContentCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    ownerId: string
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
  }

  export type ContentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CollectionCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutCollections_createdInput
    contents?: ContentCreateNestedManyWithoutCollectionsInput
    payments?: CollectionPaymentCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    ownerId: string
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
    contents?: ContentUncheckedCreateNestedManyWithoutCollectionsInput
    payments?: CollectionPaymentUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutCollections_createdNestedInput
    contents?: ContentUpdateManyWithoutCollectionsNestedInput
    payments?: CollectionPaymentUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contents?: ContentUncheckedUpdateManyWithoutCollectionsNestedInput
    payments?: CollectionPaymentUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    ownerId: string
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
  }

  export type CollectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CollectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    slug: string
    contents?: CategorableCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    slug: string
    contents?: CategorableUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    contents?: CategorableUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    contents?: CategorableUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    slug: string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    slug: string
    contents?: TaggableCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    slug: string
    contents?: TaggableUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contents?: TaggableUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    contents?: TaggableUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    slug: string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    status?: $Enums.SubscriptionStatus
    startDate?: Date | string
    endDate?: Date | string | null
    user: UserCreateNestedOneWithoutSubscriptionsInput
    content: ContentCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    contentId: string
    status?: $Enums.SubscriptionStatus
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
    content?: ContentUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    contentId: string
    status?: $Enums.SubscriptionStatus
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WalletCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    balance?: number
    currency?: string
    user: UserCreateNestedOneWithoutWalletInput
  }

  export type WalletUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    balance?: number
    currency?: string
  }

  export type WalletUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type WalletCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    balance?: number
    currency?: string
  }

  export type WalletUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type WalletUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type ContentCommentCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    commentContent: string
    user: UserCreateNestedOneWithoutContent_commentsInput
    content: ContentCreateNestedOneWithoutCommentsInput
  }

  export type ContentCommentUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    commentContent: string
    userId: string
    contentId: string
  }

  export type ContentCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutContent_commentsNestedInput
    content?: ContentUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type ContentCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type ContentCommentCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    commentContent: string
    userId: string
    contentId: string
  }

  export type ContentCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
  }

  export type ContentCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowersCreateInput = {
    user: UserCreateNestedOneWithoutFollowersInput
    follower: UserCreateNestedOneWithoutFollowingInput
  }

  export type FollowersUncheckedCreateInput = {
    userId: string
    followerId: string
  }

  export type FollowersUpdateInput = {
    user?: UserUpdateOneRequiredWithoutFollowersNestedInput
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowersUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowersCreateManyInput = {
    userId: string
    followerId: string
  }

  export type FollowersUpdateManyMutationInput = {

  }

  export type FollowersUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type ContentPaymentCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
    user: UserCreateNestedOneWithoutContent_paymentsInput
    content: ContentCreateNestedOneWithoutPaymentsInput
  }

  export type ContentPaymentUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    contentId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type ContentPaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    user?: UserUpdateOneRequiredWithoutContent_paymentsNestedInput
    content?: ContentUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type ContentPaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type ContentPaymentCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    contentId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type ContentPaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type ContentPaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type CollectionPaymentCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
    user: UserCreateNestedOneWithoutCollection_paymentsInput
    collection: CollectionCreateNestedOneWithoutPaymentsInput
  }

  export type CollectionPaymentUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    collectionId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type CollectionPaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    user?: UserUpdateOneRequiredWithoutCollection_paymentsNestedInput
    collection?: CollectionUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type CollectionPaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    collectionId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type CollectionPaymentCreateManyInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    collectionId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type CollectionPaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type CollectionPaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    collectionId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type CategorableCreateInput = {
    categorableType: string
    category: CategoryCreateNestedOneWithoutContentsInput
    content?: ContentCreateNestedOneWithoutCategoriesInput
  }

  export type CategorableUncheckedCreateInput = {
    categoryId: string
    categorableId: string
    categorableType: string
  }

  export type CategorableUpdateInput = {
    categorableType?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutContentsNestedInput
    content?: ContentUpdateOneWithoutCategoriesNestedInput
  }

  export type CategorableUncheckedUpdateInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
    categorableId?: StringFieldUpdateOperationsInput | string
    categorableType?: StringFieldUpdateOperationsInput | string
  }

  export type CategorableCreateManyInput = {
    categoryId: string
    categorableId: string
    categorableType: string
  }

  export type CategorableUpdateManyMutationInput = {
    categorableType?: StringFieldUpdateOperationsInput | string
  }

  export type CategorableUncheckedUpdateManyInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
    categorableId?: StringFieldUpdateOperationsInput | string
    categorableType?: StringFieldUpdateOperationsInput | string
  }

  export type TaggableCreateInput = {
    taggableType: string
    tag: TagCreateNestedOneWithoutContentsInput
    content?: ContentCreateNestedOneWithoutTagsInput
  }

  export type TaggableUncheckedCreateInput = {
    tagId: string
    taggableId: string
    taggableType: string
  }

  export type TaggableUpdateInput = {
    taggableType?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutContentsNestedInput
    content?: ContentUpdateOneWithoutTagsNestedInput
  }

  export type TaggableUncheckedUpdateInput = {
    tagId?: StringFieldUpdateOperationsInput | string
    taggableId?: StringFieldUpdateOperationsInput | string
    taggableType?: StringFieldUpdateOperationsInput | string
  }

  export type TaggableCreateManyInput = {
    tagId: string
    taggableId: string
    taggableType: string
  }

  export type TaggableUpdateManyMutationInput = {
    taggableType?: StringFieldUpdateOperationsInput | string
  }

  export type TaggableUncheckedUpdateManyInput = {
    tagId?: StringFieldUpdateOperationsInput | string
    taggableId?: StringFieldUpdateOperationsInput | string
    taggableType?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ContentListRelationFilter = {
    every?: ContentWhereInput
    some?: ContentWhereInput
    none?: ContentWhereInput
  }

  export type CollectionListRelationFilter = {
    every?: CollectionWhereInput
    some?: CollectionWhereInput
    none?: CollectionWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type WalletNullableScalarRelationFilter = {
    is?: WalletWhereInput | null
    isNot?: WalletWhereInput | null
  }

  export type FollowersListRelationFilter = {
    every?: FollowersWhereInput
    some?: FollowersWhereInput
    none?: FollowersWhereInput
  }

  export type ContentPaymentListRelationFilter = {
    every?: ContentPaymentWhereInput
    some?: ContentPaymentWhereInput
    none?: ContentPaymentWhereInput
  }

  export type CollectionPaymentListRelationFilter = {
    every?: CollectionPaymentWhereInput
    some?: CollectionPaymentWhereInput
    none?: CollectionPaymentWhereInput
  }

  export type ContentCommentListRelationFilter = {
    every?: ContentCommentWhereInput
    some?: ContentCommentWhereInput
    none?: ContentCommentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollectionPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
    referral_id?: SortOrder
    email_verified?: SortOrder
    phone_number?: SortOrder
    kyc_verified?: SortOrder
    user_charge_type?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    avatar?: SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    contentCount?: SortOrder
    lastActive?: SortOrder
    referrerId?: SortOrder
    privyId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    followerCount?: SortOrder
    followingCount?: SortOrder
    contentCount?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
    referral_id?: SortOrder
    email_verified?: SortOrder
    phone_number?: SortOrder
    kyc_verified?: SortOrder
    user_charge_type?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    avatar?: SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    contentCount?: SortOrder
    lastActive?: SortOrder
    referrerId?: SortOrder
    privyId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
    referral_id?: SortOrder
    email_verified?: SortOrder
    phone_number?: SortOrder
    kyc_verified?: SortOrder
    user_charge_type?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    avatar?: SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    contentCount?: SortOrder
    lastActive?: SortOrder
    referrerId?: SortOrder
    privyId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    followerCount?: SortOrder
    followingCount?: SortOrder
    contentCount?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumContentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContentStatus | EnumContentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContentStatus[] | ListEnumContentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContentStatus[] | ListEnumContentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContentStatusFilter<$PrismaModel> | $Enums.ContentStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CategorableListRelationFilter = {
    every?: CategorableWhereInput
    some?: CategorableWhereInput
    none?: CategorableWhereInput
  }

  export type TaggableListRelationFilter = {
    every?: TaggableWhereInput
    some?: TaggableWhereInput
    none?: TaggableWhereInput
  }

  export type CategorableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaggableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    type?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    show_only_in_collections?: SortOrder
    views?: SortOrder
    is_adult?: SortOrder
    is_challenge?: SortOrder
    live_ended_at?: SortOrder
    scheduled_date?: SortOrder
    archived_at?: SortOrder
    live_type?: SortOrder
    live_provider?: SortOrder
    commentCount?: SortOrder
    likeCount?: SortOrder
    viewCount?: SortOrder
    status?: SortOrder
    published?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrder
  }

  export type ContentAvgOrderByAggregateInput = {
    views?: SortOrder
    commentCount?: SortOrder
    likeCount?: SortOrder
    viewCount?: SortOrder
  }

  export type ContentMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    type?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    show_only_in_collections?: SortOrder
    views?: SortOrder
    is_adult?: SortOrder
    is_challenge?: SortOrder
    live_ended_at?: SortOrder
    scheduled_date?: SortOrder
    archived_at?: SortOrder
    live_type?: SortOrder
    live_provider?: SortOrder
    commentCount?: SortOrder
    likeCount?: SortOrder
    viewCount?: SortOrder
    status?: SortOrder
    published?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrder
  }

  export type ContentMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    type?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    show_only_in_collections?: SortOrder
    views?: SortOrder
    is_adult?: SortOrder
    is_challenge?: SortOrder
    live_ended_at?: SortOrder
    scheduled_date?: SortOrder
    archived_at?: SortOrder
    live_type?: SortOrder
    live_provider?: SortOrder
    commentCount?: SortOrder
    likeCount?: SortOrder
    viewCount?: SortOrder
    status?: SortOrder
    published?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrder
  }

  export type ContentSumOrderByAggregateInput = {
    views?: SortOrder
    commentCount?: SortOrder
    likeCount?: SortOrder
    viewCount?: SortOrder
  }

  export type EnumContentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContentStatus | EnumContentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContentStatus[] | ListEnumContentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContentStatus[] | ListEnumContentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContentStatusFilter<$PrismaModel>
    _max?: NestedEnumContentStatusFilter<$PrismaModel>
  }

  export type CollectionCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    thumbnailUrl?: SortOrder
  }

  export type CollectionMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    thumbnailUrl?: SortOrder
  }

  export type CollectionMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    is_available?: SortOrder
    approved_by_admin?: SortOrder
    isPremium?: SortOrder
    isPromoted?: SortOrder
    thumbnailUrl?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type EnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type ContentScalarRelationFilter = {
    is?: ContentWhereInput
    isNot?: ContentWhereInput
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type EnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type WalletCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
  }

  export type WalletAvgOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type WalletMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
  }

  export type WalletMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
  }

  export type WalletSumOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ContentCommentCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    commentContent?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
  }

  export type ContentCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    commentContent?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
  }

  export type ContentCommentMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    commentContent?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
  }

  export type FollowersUserIdFollowerIdCompoundUniqueInput = {
    userId: string
    followerId: string
  }

  export type FollowersCountOrderByAggregateInput = {
    userId?: SortOrder
    followerId?: SortOrder
  }

  export type FollowersMaxOrderByAggregateInput = {
    userId?: SortOrder
    followerId?: SortOrder
  }

  export type FollowersMinOrderByAggregateInput = {
    userId?: SortOrder
    followerId?: SortOrder
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type ContentPaymentUserIdContentIdCompoundUniqueInput = {
    userId: string
    contentId: string
  }

  export type ContentPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
  }

  export type ContentPaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ContentPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
  }

  export type ContentPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
  }

  export type ContentPaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type CollectionScalarRelationFilter = {
    is?: CollectionWhereInput
    isNot?: CollectionWhereInput
  }

  export type CollectionPaymentUserIdCollectionIdCompoundUniqueInput = {
    userId: string
    collectionId: string
  }

  export type CollectionPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    collectionId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
  }

  export type CollectionPaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CollectionPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    collectionId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
  }

  export type CollectionPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
    userId?: SortOrder
    collectionId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
  }

  export type CollectionPaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ContentNullableScalarRelationFilter = {
    is?: ContentWhereInput | null
    isNot?: ContentWhereInput | null
  }

  export type CategorableCategoryIdCategorableIdCategorableTypeCompoundUniqueInput = {
    categoryId: string
    categorableId: string
    categorableType: string
  }

  export type CategorableCountOrderByAggregateInput = {
    categoryId?: SortOrder
    categorableId?: SortOrder
    categorableType?: SortOrder
  }

  export type CategorableMaxOrderByAggregateInput = {
    categoryId?: SortOrder
    categorableId?: SortOrder
    categorableType?: SortOrder
  }

  export type CategorableMinOrderByAggregateInput = {
    categoryId?: SortOrder
    categorableId?: SortOrder
    categorableType?: SortOrder
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type TaggableTagIdTaggableIdTaggableTypeCompoundUniqueInput = {
    tagId: string
    taggableId: string
    taggableType: string
  }

  export type TaggableCountOrderByAggregateInput = {
    tagId?: SortOrder
    taggableId?: SortOrder
    taggableType?: SortOrder
  }

  export type TaggableMaxOrderByAggregateInput = {
    tagId?: SortOrder
    taggableId?: SortOrder
    taggableType?: SortOrder
  }

  export type TaggableMinOrderByAggregateInput = {
    tagId?: SortOrder
    taggableId?: SortOrder
    taggableType?: SortOrder
  }

  export type UserCreateNestedOneWithoutReferralsInput = {
    create?: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutReferrerInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ContentCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ContentCreateWithoutOwnerInput, ContentUncheckedCreateWithoutOwnerInput> | ContentCreateWithoutOwnerInput[] | ContentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutOwnerInput | ContentCreateOrConnectWithoutOwnerInput[]
    createMany?: ContentCreateManyOwnerInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type CollectionCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CollectionCreateWithoutOwnerInput, CollectionUncheckedCreateWithoutOwnerInput> | CollectionCreateWithoutOwnerInput[] | CollectionUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutOwnerInput | CollectionCreateOrConnectWithoutOwnerInput[]
    createMany?: CollectionCreateManyOwnerInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type WalletCreateNestedOneWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    connect?: WalletWhereUniqueInput
  }

  export type FollowersCreateNestedManyWithoutUserInput = {
    create?: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput> | FollowersCreateWithoutUserInput[] | FollowersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutUserInput | FollowersCreateOrConnectWithoutUserInput[]
    createMany?: FollowersCreateManyUserInputEnvelope
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
  }

  export type FollowersCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowersCreateWithoutFollowerInput, FollowersUncheckedCreateWithoutFollowerInput> | FollowersCreateWithoutFollowerInput[] | FollowersUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutFollowerInput | FollowersCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowersCreateManyFollowerInputEnvelope
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
  }

  export type ContentPaymentCreateNestedManyWithoutUserInput = {
    create?: XOR<ContentPaymentCreateWithoutUserInput, ContentPaymentUncheckedCreateWithoutUserInput> | ContentPaymentCreateWithoutUserInput[] | ContentPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentPaymentCreateOrConnectWithoutUserInput | ContentPaymentCreateOrConnectWithoutUserInput[]
    createMany?: ContentPaymentCreateManyUserInputEnvelope
    connect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
  }

  export type CollectionPaymentCreateNestedManyWithoutUserInput = {
    create?: XOR<CollectionPaymentCreateWithoutUserInput, CollectionPaymentUncheckedCreateWithoutUserInput> | CollectionPaymentCreateWithoutUserInput[] | CollectionPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CollectionPaymentCreateOrConnectWithoutUserInput | CollectionPaymentCreateOrConnectWithoutUserInput[]
    createMany?: CollectionPaymentCreateManyUserInputEnvelope
    connect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
  }

  export type ContentCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<ContentCommentCreateWithoutUserInput, ContentCommentUncheckedCreateWithoutUserInput> | ContentCommentCreateWithoutUserInput[] | ContentCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentCommentCreateOrConnectWithoutUserInput | ContentCommentCreateOrConnectWithoutUserInput[]
    createMany?: ContentCommentCreateManyUserInputEnvelope
    connect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutReferrerInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ContentUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ContentCreateWithoutOwnerInput, ContentUncheckedCreateWithoutOwnerInput> | ContentCreateWithoutOwnerInput[] | ContentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutOwnerInput | ContentCreateOrConnectWithoutOwnerInput[]
    createMany?: ContentCreateManyOwnerInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type CollectionUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CollectionCreateWithoutOwnerInput, CollectionUncheckedCreateWithoutOwnerInput> | CollectionCreateWithoutOwnerInput[] | CollectionUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutOwnerInput | CollectionCreateOrConnectWithoutOwnerInput[]
    createMany?: CollectionCreateManyOwnerInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type WalletUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    connect?: WalletWhereUniqueInput
  }

  export type FollowersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput> | FollowersCreateWithoutUserInput[] | FollowersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutUserInput | FollowersCreateOrConnectWithoutUserInput[]
    createMany?: FollowersCreateManyUserInputEnvelope
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
  }

  export type FollowersUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowersCreateWithoutFollowerInput, FollowersUncheckedCreateWithoutFollowerInput> | FollowersCreateWithoutFollowerInput[] | FollowersUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutFollowerInput | FollowersCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowersCreateManyFollowerInputEnvelope
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
  }

  export type ContentPaymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ContentPaymentCreateWithoutUserInput, ContentPaymentUncheckedCreateWithoutUserInput> | ContentPaymentCreateWithoutUserInput[] | ContentPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentPaymentCreateOrConnectWithoutUserInput | ContentPaymentCreateOrConnectWithoutUserInput[]
    createMany?: ContentPaymentCreateManyUserInputEnvelope
    connect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
  }

  export type CollectionPaymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CollectionPaymentCreateWithoutUserInput, CollectionPaymentUncheckedCreateWithoutUserInput> | CollectionPaymentCreateWithoutUserInput[] | CollectionPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CollectionPaymentCreateOrConnectWithoutUserInput | CollectionPaymentCreateOrConnectWithoutUserInput[]
    createMany?: CollectionPaymentCreateManyUserInputEnvelope
    connect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
  }

  export type ContentCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ContentCommentCreateWithoutUserInput, ContentCommentUncheckedCreateWithoutUserInput> | ContentCommentCreateWithoutUserInput[] | ContentCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentCommentCreateOrConnectWithoutUserInput | ContentCommentCreateOrConnectWithoutUserInput[]
    createMany?: ContentCommentCreateManyUserInputEnvelope
    connect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutReferralsNestedInput = {
    create?: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsInput
    upsert?: UserUpsertWithoutReferralsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferralsInput, UserUpdateWithoutReferralsInput>, UserUncheckedUpdateWithoutReferralsInput>
  }

  export type UserUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferrerInput | UserUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferrerInput | UserUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferrerInput | UserUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ContentUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ContentCreateWithoutOwnerInput, ContentUncheckedCreateWithoutOwnerInput> | ContentCreateWithoutOwnerInput[] | ContentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutOwnerInput | ContentCreateOrConnectWithoutOwnerInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutOwnerInput | ContentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ContentCreateManyOwnerInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutOwnerInput | ContentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutOwnerInput | ContentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type CollectionUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CollectionCreateWithoutOwnerInput, CollectionUncheckedCreateWithoutOwnerInput> | CollectionCreateWithoutOwnerInput[] | CollectionUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutOwnerInput | CollectionCreateOrConnectWithoutOwnerInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutOwnerInput | CollectionUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CollectionCreateManyOwnerInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutOwnerInput | CollectionUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutOwnerInput | CollectionUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type WalletUpdateOneWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    upsert?: WalletUpsertWithoutUserInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutUserInput, WalletUpdateWithoutUserInput>, WalletUncheckedUpdateWithoutUserInput>
  }

  export type FollowersUpdateManyWithoutUserNestedInput = {
    create?: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput> | FollowersCreateWithoutUserInput[] | FollowersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutUserInput | FollowersCreateOrConnectWithoutUserInput[]
    upsert?: FollowersUpsertWithWhereUniqueWithoutUserInput | FollowersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FollowersCreateManyUserInputEnvelope
    set?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    disconnect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    delete?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    update?: FollowersUpdateWithWhereUniqueWithoutUserInput | FollowersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FollowersUpdateManyWithWhereWithoutUserInput | FollowersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
  }

  export type FollowersUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowersCreateWithoutFollowerInput, FollowersUncheckedCreateWithoutFollowerInput> | FollowersCreateWithoutFollowerInput[] | FollowersUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutFollowerInput | FollowersCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowersUpsertWithWhereUniqueWithoutFollowerInput | FollowersUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowersCreateManyFollowerInputEnvelope
    set?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    disconnect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    delete?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    update?: FollowersUpdateWithWhereUniqueWithoutFollowerInput | FollowersUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowersUpdateManyWithWhereWithoutFollowerInput | FollowersUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
  }

  export type ContentPaymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContentPaymentCreateWithoutUserInput, ContentPaymentUncheckedCreateWithoutUserInput> | ContentPaymentCreateWithoutUserInput[] | ContentPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentPaymentCreateOrConnectWithoutUserInput | ContentPaymentCreateOrConnectWithoutUserInput[]
    upsert?: ContentPaymentUpsertWithWhereUniqueWithoutUserInput | ContentPaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContentPaymentCreateManyUserInputEnvelope
    set?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    disconnect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    delete?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    connect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    update?: ContentPaymentUpdateWithWhereUniqueWithoutUserInput | ContentPaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContentPaymentUpdateManyWithWhereWithoutUserInput | ContentPaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContentPaymentScalarWhereInput | ContentPaymentScalarWhereInput[]
  }

  export type CollectionPaymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CollectionPaymentCreateWithoutUserInput, CollectionPaymentUncheckedCreateWithoutUserInput> | CollectionPaymentCreateWithoutUserInput[] | CollectionPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CollectionPaymentCreateOrConnectWithoutUserInput | CollectionPaymentCreateOrConnectWithoutUserInput[]
    upsert?: CollectionPaymentUpsertWithWhereUniqueWithoutUserInput | CollectionPaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CollectionPaymentCreateManyUserInputEnvelope
    set?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    disconnect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    delete?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    connect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    update?: CollectionPaymentUpdateWithWhereUniqueWithoutUserInput | CollectionPaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CollectionPaymentUpdateManyWithWhereWithoutUserInput | CollectionPaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CollectionPaymentScalarWhereInput | CollectionPaymentScalarWhereInput[]
  }

  export type ContentCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContentCommentCreateWithoutUserInput, ContentCommentUncheckedCreateWithoutUserInput> | ContentCommentCreateWithoutUserInput[] | ContentCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentCommentCreateOrConnectWithoutUserInput | ContentCommentCreateOrConnectWithoutUserInput[]
    upsert?: ContentCommentUpsertWithWhereUniqueWithoutUserInput | ContentCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContentCommentCreateManyUserInputEnvelope
    set?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    disconnect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    delete?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    connect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    update?: ContentCommentUpdateWithWhereUniqueWithoutUserInput | ContentCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContentCommentUpdateManyWithWhereWithoutUserInput | ContentCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContentCommentScalarWhereInput | ContentCommentScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput> | UserCreateWithoutReferrerInput[] | UserUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferrerInput | UserCreateOrConnectWithoutReferrerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferrerInput | UserUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: UserCreateManyReferrerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferrerInput | UserUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferrerInput | UserUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ContentUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ContentCreateWithoutOwnerInput, ContentUncheckedCreateWithoutOwnerInput> | ContentCreateWithoutOwnerInput[] | ContentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutOwnerInput | ContentCreateOrConnectWithoutOwnerInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutOwnerInput | ContentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ContentCreateManyOwnerInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutOwnerInput | ContentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutOwnerInput | ContentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type CollectionUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CollectionCreateWithoutOwnerInput, CollectionUncheckedCreateWithoutOwnerInput> | CollectionCreateWithoutOwnerInput[] | CollectionUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutOwnerInput | CollectionCreateOrConnectWithoutOwnerInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutOwnerInput | CollectionUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CollectionCreateManyOwnerInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutOwnerInput | CollectionUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutOwnerInput | CollectionUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type WalletUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    upsert?: WalletUpsertWithoutUserInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutUserInput, WalletUpdateWithoutUserInput>, WalletUncheckedUpdateWithoutUserInput>
  }

  export type FollowersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput> | FollowersCreateWithoutUserInput[] | FollowersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutUserInput | FollowersCreateOrConnectWithoutUserInput[]
    upsert?: FollowersUpsertWithWhereUniqueWithoutUserInput | FollowersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FollowersCreateManyUserInputEnvelope
    set?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    disconnect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    delete?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    update?: FollowersUpdateWithWhereUniqueWithoutUserInput | FollowersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FollowersUpdateManyWithWhereWithoutUserInput | FollowersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
  }

  export type FollowersUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowersCreateWithoutFollowerInput, FollowersUncheckedCreateWithoutFollowerInput> | FollowersCreateWithoutFollowerInput[] | FollowersUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutFollowerInput | FollowersCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowersUpsertWithWhereUniqueWithoutFollowerInput | FollowersUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowersCreateManyFollowerInputEnvelope
    set?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    disconnect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    delete?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    update?: FollowersUpdateWithWhereUniqueWithoutFollowerInput | FollowersUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowersUpdateManyWithWhereWithoutFollowerInput | FollowersUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
  }

  export type ContentPaymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContentPaymentCreateWithoutUserInput, ContentPaymentUncheckedCreateWithoutUserInput> | ContentPaymentCreateWithoutUserInput[] | ContentPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentPaymentCreateOrConnectWithoutUserInput | ContentPaymentCreateOrConnectWithoutUserInput[]
    upsert?: ContentPaymentUpsertWithWhereUniqueWithoutUserInput | ContentPaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContentPaymentCreateManyUserInputEnvelope
    set?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    disconnect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    delete?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    connect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    update?: ContentPaymentUpdateWithWhereUniqueWithoutUserInput | ContentPaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContentPaymentUpdateManyWithWhereWithoutUserInput | ContentPaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContentPaymentScalarWhereInput | ContentPaymentScalarWhereInput[]
  }

  export type CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CollectionPaymentCreateWithoutUserInput, CollectionPaymentUncheckedCreateWithoutUserInput> | CollectionPaymentCreateWithoutUserInput[] | CollectionPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CollectionPaymentCreateOrConnectWithoutUserInput | CollectionPaymentCreateOrConnectWithoutUserInput[]
    upsert?: CollectionPaymentUpsertWithWhereUniqueWithoutUserInput | CollectionPaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CollectionPaymentCreateManyUserInputEnvelope
    set?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    disconnect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    delete?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    connect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    update?: CollectionPaymentUpdateWithWhereUniqueWithoutUserInput | CollectionPaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CollectionPaymentUpdateManyWithWhereWithoutUserInput | CollectionPaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CollectionPaymentScalarWhereInput | CollectionPaymentScalarWhereInput[]
  }

  export type ContentCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContentCommentCreateWithoutUserInput, ContentCommentUncheckedCreateWithoutUserInput> | ContentCommentCreateWithoutUserInput[] | ContentCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentCommentCreateOrConnectWithoutUserInput | ContentCommentCreateOrConnectWithoutUserInput[]
    upsert?: ContentCommentUpsertWithWhereUniqueWithoutUserInput | ContentCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContentCommentCreateManyUserInputEnvelope
    set?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    disconnect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    delete?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    connect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    update?: ContentCommentUpdateWithWhereUniqueWithoutUserInput | ContentCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContentCommentUpdateManyWithWhereWithoutUserInput | ContentCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContentCommentScalarWhereInput | ContentCommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutContents_createdInput = {
    create?: XOR<UserCreateWithoutContents_createdInput, UserUncheckedCreateWithoutContents_createdInput>
    connectOrCreate?: UserCreateOrConnectWithoutContents_createdInput
    connect?: UserWhereUniqueInput
  }

  export type SubscriptionCreateNestedManyWithoutContentInput = {
    create?: XOR<SubscriptionCreateWithoutContentInput, SubscriptionUncheckedCreateWithoutContentInput> | SubscriptionCreateWithoutContentInput[] | SubscriptionUncheckedCreateWithoutContentInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutContentInput | SubscriptionCreateOrConnectWithoutContentInput[]
    createMany?: SubscriptionCreateManyContentInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type CollectionCreateNestedManyWithoutContentsInput = {
    create?: XOR<CollectionCreateWithoutContentsInput, CollectionUncheckedCreateWithoutContentsInput> | CollectionCreateWithoutContentsInput[] | CollectionUncheckedCreateWithoutContentsInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutContentsInput | CollectionCreateOrConnectWithoutContentsInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type CategorableCreateNestedManyWithoutContentInput = {
    create?: XOR<CategorableCreateWithoutContentInput, CategorableUncheckedCreateWithoutContentInput> | CategorableCreateWithoutContentInput[] | CategorableUncheckedCreateWithoutContentInput[]
    connectOrCreate?: CategorableCreateOrConnectWithoutContentInput | CategorableCreateOrConnectWithoutContentInput[]
    createMany?: CategorableCreateManyContentInputEnvelope
    connect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
  }

  export type TaggableCreateNestedManyWithoutContentInput = {
    create?: XOR<TaggableCreateWithoutContentInput, TaggableUncheckedCreateWithoutContentInput> | TaggableCreateWithoutContentInput[] | TaggableUncheckedCreateWithoutContentInput[]
    connectOrCreate?: TaggableCreateOrConnectWithoutContentInput | TaggableCreateOrConnectWithoutContentInput[]
    createMany?: TaggableCreateManyContentInputEnvelope
    connect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
  }

  export type ContentPaymentCreateNestedManyWithoutContentInput = {
    create?: XOR<ContentPaymentCreateWithoutContentInput, ContentPaymentUncheckedCreateWithoutContentInput> | ContentPaymentCreateWithoutContentInput[] | ContentPaymentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ContentPaymentCreateOrConnectWithoutContentInput | ContentPaymentCreateOrConnectWithoutContentInput[]
    createMany?: ContentPaymentCreateManyContentInputEnvelope
    connect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
  }

  export type ContentCommentCreateNestedManyWithoutContentInput = {
    create?: XOR<ContentCommentCreateWithoutContentInput, ContentCommentUncheckedCreateWithoutContentInput> | ContentCommentCreateWithoutContentInput[] | ContentCommentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ContentCommentCreateOrConnectWithoutContentInput | ContentCommentCreateOrConnectWithoutContentInput[]
    createMany?: ContentCommentCreateManyContentInputEnvelope
    connect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<SubscriptionCreateWithoutContentInput, SubscriptionUncheckedCreateWithoutContentInput> | SubscriptionCreateWithoutContentInput[] | SubscriptionUncheckedCreateWithoutContentInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutContentInput | SubscriptionCreateOrConnectWithoutContentInput[]
    createMany?: SubscriptionCreateManyContentInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type CollectionUncheckedCreateNestedManyWithoutContentsInput = {
    create?: XOR<CollectionCreateWithoutContentsInput, CollectionUncheckedCreateWithoutContentsInput> | CollectionCreateWithoutContentsInput[] | CollectionUncheckedCreateWithoutContentsInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutContentsInput | CollectionCreateOrConnectWithoutContentsInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type CategorableUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<CategorableCreateWithoutContentInput, CategorableUncheckedCreateWithoutContentInput> | CategorableCreateWithoutContentInput[] | CategorableUncheckedCreateWithoutContentInput[]
    connectOrCreate?: CategorableCreateOrConnectWithoutContentInput | CategorableCreateOrConnectWithoutContentInput[]
    createMany?: CategorableCreateManyContentInputEnvelope
    connect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
  }

  export type TaggableUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<TaggableCreateWithoutContentInput, TaggableUncheckedCreateWithoutContentInput> | TaggableCreateWithoutContentInput[] | TaggableUncheckedCreateWithoutContentInput[]
    connectOrCreate?: TaggableCreateOrConnectWithoutContentInput | TaggableCreateOrConnectWithoutContentInput[]
    createMany?: TaggableCreateManyContentInputEnvelope
    connect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
  }

  export type ContentPaymentUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<ContentPaymentCreateWithoutContentInput, ContentPaymentUncheckedCreateWithoutContentInput> | ContentPaymentCreateWithoutContentInput[] | ContentPaymentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ContentPaymentCreateOrConnectWithoutContentInput | ContentPaymentCreateOrConnectWithoutContentInput[]
    createMany?: ContentPaymentCreateManyContentInputEnvelope
    connect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
  }

  export type ContentCommentUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<ContentCommentCreateWithoutContentInput, ContentCommentUncheckedCreateWithoutContentInput> | ContentCommentCreateWithoutContentInput[] | ContentCommentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ContentCommentCreateOrConnectWithoutContentInput | ContentCommentCreateOrConnectWithoutContentInput[]
    createMany?: ContentCommentCreateManyContentInputEnvelope
    connect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
  }

  export type EnumContentStatusFieldUpdateOperationsInput = {
    set?: $Enums.ContentStatus
  }

  export type UserUpdateOneRequiredWithoutContents_createdNestedInput = {
    create?: XOR<UserCreateWithoutContents_createdInput, UserUncheckedCreateWithoutContents_createdInput>
    connectOrCreate?: UserCreateOrConnectWithoutContents_createdInput
    upsert?: UserUpsertWithoutContents_createdInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContents_createdInput, UserUpdateWithoutContents_createdInput>, UserUncheckedUpdateWithoutContents_createdInput>
  }

  export type SubscriptionUpdateManyWithoutContentNestedInput = {
    create?: XOR<SubscriptionCreateWithoutContentInput, SubscriptionUncheckedCreateWithoutContentInput> | SubscriptionCreateWithoutContentInput[] | SubscriptionUncheckedCreateWithoutContentInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutContentInput | SubscriptionCreateOrConnectWithoutContentInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutContentInput | SubscriptionUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: SubscriptionCreateManyContentInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutContentInput | SubscriptionUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutContentInput | SubscriptionUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type CollectionUpdateManyWithoutContentsNestedInput = {
    create?: XOR<CollectionCreateWithoutContentsInput, CollectionUncheckedCreateWithoutContentsInput> | CollectionCreateWithoutContentsInput[] | CollectionUncheckedCreateWithoutContentsInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutContentsInput | CollectionCreateOrConnectWithoutContentsInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutContentsInput | CollectionUpsertWithWhereUniqueWithoutContentsInput[]
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutContentsInput | CollectionUpdateWithWhereUniqueWithoutContentsInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutContentsInput | CollectionUpdateManyWithWhereWithoutContentsInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type CategorableUpdateManyWithoutContentNestedInput = {
    create?: XOR<CategorableCreateWithoutContentInput, CategorableUncheckedCreateWithoutContentInput> | CategorableCreateWithoutContentInput[] | CategorableUncheckedCreateWithoutContentInput[]
    connectOrCreate?: CategorableCreateOrConnectWithoutContentInput | CategorableCreateOrConnectWithoutContentInput[]
    upsert?: CategorableUpsertWithWhereUniqueWithoutContentInput | CategorableUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: CategorableCreateManyContentInputEnvelope
    set?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    disconnect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    delete?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    connect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    update?: CategorableUpdateWithWhereUniqueWithoutContentInput | CategorableUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: CategorableUpdateManyWithWhereWithoutContentInput | CategorableUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: CategorableScalarWhereInput | CategorableScalarWhereInput[]
  }

  export type TaggableUpdateManyWithoutContentNestedInput = {
    create?: XOR<TaggableCreateWithoutContentInput, TaggableUncheckedCreateWithoutContentInput> | TaggableCreateWithoutContentInput[] | TaggableUncheckedCreateWithoutContentInput[]
    connectOrCreate?: TaggableCreateOrConnectWithoutContentInput | TaggableCreateOrConnectWithoutContentInput[]
    upsert?: TaggableUpsertWithWhereUniqueWithoutContentInput | TaggableUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: TaggableCreateManyContentInputEnvelope
    set?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    disconnect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    delete?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    connect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    update?: TaggableUpdateWithWhereUniqueWithoutContentInput | TaggableUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: TaggableUpdateManyWithWhereWithoutContentInput | TaggableUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: TaggableScalarWhereInput | TaggableScalarWhereInput[]
  }

  export type ContentPaymentUpdateManyWithoutContentNestedInput = {
    create?: XOR<ContentPaymentCreateWithoutContentInput, ContentPaymentUncheckedCreateWithoutContentInput> | ContentPaymentCreateWithoutContentInput[] | ContentPaymentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ContentPaymentCreateOrConnectWithoutContentInput | ContentPaymentCreateOrConnectWithoutContentInput[]
    upsert?: ContentPaymentUpsertWithWhereUniqueWithoutContentInput | ContentPaymentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: ContentPaymentCreateManyContentInputEnvelope
    set?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    disconnect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    delete?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    connect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    update?: ContentPaymentUpdateWithWhereUniqueWithoutContentInput | ContentPaymentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: ContentPaymentUpdateManyWithWhereWithoutContentInput | ContentPaymentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: ContentPaymentScalarWhereInput | ContentPaymentScalarWhereInput[]
  }

  export type ContentCommentUpdateManyWithoutContentNestedInput = {
    create?: XOR<ContentCommentCreateWithoutContentInput, ContentCommentUncheckedCreateWithoutContentInput> | ContentCommentCreateWithoutContentInput[] | ContentCommentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ContentCommentCreateOrConnectWithoutContentInput | ContentCommentCreateOrConnectWithoutContentInput[]
    upsert?: ContentCommentUpsertWithWhereUniqueWithoutContentInput | ContentCommentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: ContentCommentCreateManyContentInputEnvelope
    set?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    disconnect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    delete?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    connect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    update?: ContentCommentUpdateWithWhereUniqueWithoutContentInput | ContentCommentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: ContentCommentUpdateManyWithWhereWithoutContentInput | ContentCommentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: ContentCommentScalarWhereInput | ContentCommentScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<SubscriptionCreateWithoutContentInput, SubscriptionUncheckedCreateWithoutContentInput> | SubscriptionCreateWithoutContentInput[] | SubscriptionUncheckedCreateWithoutContentInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutContentInput | SubscriptionCreateOrConnectWithoutContentInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutContentInput | SubscriptionUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: SubscriptionCreateManyContentInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutContentInput | SubscriptionUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutContentInput | SubscriptionUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type CollectionUncheckedUpdateManyWithoutContentsNestedInput = {
    create?: XOR<CollectionCreateWithoutContentsInput, CollectionUncheckedCreateWithoutContentsInput> | CollectionCreateWithoutContentsInput[] | CollectionUncheckedCreateWithoutContentsInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutContentsInput | CollectionCreateOrConnectWithoutContentsInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutContentsInput | CollectionUpsertWithWhereUniqueWithoutContentsInput[]
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutContentsInput | CollectionUpdateWithWhereUniqueWithoutContentsInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutContentsInput | CollectionUpdateManyWithWhereWithoutContentsInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type CategorableUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<CategorableCreateWithoutContentInput, CategorableUncheckedCreateWithoutContentInput> | CategorableCreateWithoutContentInput[] | CategorableUncheckedCreateWithoutContentInput[]
    connectOrCreate?: CategorableCreateOrConnectWithoutContentInput | CategorableCreateOrConnectWithoutContentInput[]
    upsert?: CategorableUpsertWithWhereUniqueWithoutContentInput | CategorableUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: CategorableCreateManyContentInputEnvelope
    set?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    disconnect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    delete?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    connect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    update?: CategorableUpdateWithWhereUniqueWithoutContentInput | CategorableUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: CategorableUpdateManyWithWhereWithoutContentInput | CategorableUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: CategorableScalarWhereInput | CategorableScalarWhereInput[]
  }

  export type TaggableUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<TaggableCreateWithoutContentInput, TaggableUncheckedCreateWithoutContentInput> | TaggableCreateWithoutContentInput[] | TaggableUncheckedCreateWithoutContentInput[]
    connectOrCreate?: TaggableCreateOrConnectWithoutContentInput | TaggableCreateOrConnectWithoutContentInput[]
    upsert?: TaggableUpsertWithWhereUniqueWithoutContentInput | TaggableUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: TaggableCreateManyContentInputEnvelope
    set?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    disconnect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    delete?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    connect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    update?: TaggableUpdateWithWhereUniqueWithoutContentInput | TaggableUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: TaggableUpdateManyWithWhereWithoutContentInput | TaggableUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: TaggableScalarWhereInput | TaggableScalarWhereInput[]
  }

  export type ContentPaymentUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<ContentPaymentCreateWithoutContentInput, ContentPaymentUncheckedCreateWithoutContentInput> | ContentPaymentCreateWithoutContentInput[] | ContentPaymentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ContentPaymentCreateOrConnectWithoutContentInput | ContentPaymentCreateOrConnectWithoutContentInput[]
    upsert?: ContentPaymentUpsertWithWhereUniqueWithoutContentInput | ContentPaymentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: ContentPaymentCreateManyContentInputEnvelope
    set?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    disconnect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    delete?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    connect?: ContentPaymentWhereUniqueInput | ContentPaymentWhereUniqueInput[]
    update?: ContentPaymentUpdateWithWhereUniqueWithoutContentInput | ContentPaymentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: ContentPaymentUpdateManyWithWhereWithoutContentInput | ContentPaymentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: ContentPaymentScalarWhereInput | ContentPaymentScalarWhereInput[]
  }

  export type ContentCommentUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<ContentCommentCreateWithoutContentInput, ContentCommentUncheckedCreateWithoutContentInput> | ContentCommentCreateWithoutContentInput[] | ContentCommentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ContentCommentCreateOrConnectWithoutContentInput | ContentCommentCreateOrConnectWithoutContentInput[]
    upsert?: ContentCommentUpsertWithWhereUniqueWithoutContentInput | ContentCommentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: ContentCommentCreateManyContentInputEnvelope
    set?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    disconnect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    delete?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    connect?: ContentCommentWhereUniqueInput | ContentCommentWhereUniqueInput[]
    update?: ContentCommentUpdateWithWhereUniqueWithoutContentInput | ContentCommentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: ContentCommentUpdateManyWithWhereWithoutContentInput | ContentCommentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: ContentCommentScalarWhereInput | ContentCommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCollections_createdInput = {
    create?: XOR<UserCreateWithoutCollections_createdInput, UserUncheckedCreateWithoutCollections_createdInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollections_createdInput
    connect?: UserWhereUniqueInput
  }

  export type ContentCreateNestedManyWithoutCollectionsInput = {
    create?: XOR<ContentCreateWithoutCollectionsInput, ContentUncheckedCreateWithoutCollectionsInput> | ContentCreateWithoutCollectionsInput[] | ContentUncheckedCreateWithoutCollectionsInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutCollectionsInput | ContentCreateOrConnectWithoutCollectionsInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type CollectionPaymentCreateNestedManyWithoutCollectionInput = {
    create?: XOR<CollectionPaymentCreateWithoutCollectionInput, CollectionPaymentUncheckedCreateWithoutCollectionInput> | CollectionPaymentCreateWithoutCollectionInput[] | CollectionPaymentUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionPaymentCreateOrConnectWithoutCollectionInput | CollectionPaymentCreateOrConnectWithoutCollectionInput[]
    createMany?: CollectionPaymentCreateManyCollectionInputEnvelope
    connect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
  }

  export type ContentUncheckedCreateNestedManyWithoutCollectionsInput = {
    create?: XOR<ContentCreateWithoutCollectionsInput, ContentUncheckedCreateWithoutCollectionsInput> | ContentCreateWithoutCollectionsInput[] | ContentUncheckedCreateWithoutCollectionsInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutCollectionsInput | ContentCreateOrConnectWithoutCollectionsInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type CollectionPaymentUncheckedCreateNestedManyWithoutCollectionInput = {
    create?: XOR<CollectionPaymentCreateWithoutCollectionInput, CollectionPaymentUncheckedCreateWithoutCollectionInput> | CollectionPaymentCreateWithoutCollectionInput[] | CollectionPaymentUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionPaymentCreateOrConnectWithoutCollectionInput | CollectionPaymentCreateOrConnectWithoutCollectionInput[]
    createMany?: CollectionPaymentCreateManyCollectionInputEnvelope
    connect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCollections_createdNestedInput = {
    create?: XOR<UserCreateWithoutCollections_createdInput, UserUncheckedCreateWithoutCollections_createdInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollections_createdInput
    upsert?: UserUpsertWithoutCollections_createdInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCollections_createdInput, UserUpdateWithoutCollections_createdInput>, UserUncheckedUpdateWithoutCollections_createdInput>
  }

  export type ContentUpdateManyWithoutCollectionsNestedInput = {
    create?: XOR<ContentCreateWithoutCollectionsInput, ContentUncheckedCreateWithoutCollectionsInput> | ContentCreateWithoutCollectionsInput[] | ContentUncheckedCreateWithoutCollectionsInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutCollectionsInput | ContentCreateOrConnectWithoutCollectionsInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutCollectionsInput | ContentUpsertWithWhereUniqueWithoutCollectionsInput[]
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutCollectionsInput | ContentUpdateWithWhereUniqueWithoutCollectionsInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutCollectionsInput | ContentUpdateManyWithWhereWithoutCollectionsInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type CollectionPaymentUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<CollectionPaymentCreateWithoutCollectionInput, CollectionPaymentUncheckedCreateWithoutCollectionInput> | CollectionPaymentCreateWithoutCollectionInput[] | CollectionPaymentUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionPaymentCreateOrConnectWithoutCollectionInput | CollectionPaymentCreateOrConnectWithoutCollectionInput[]
    upsert?: CollectionPaymentUpsertWithWhereUniqueWithoutCollectionInput | CollectionPaymentUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: CollectionPaymentCreateManyCollectionInputEnvelope
    set?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    disconnect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    delete?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    connect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    update?: CollectionPaymentUpdateWithWhereUniqueWithoutCollectionInput | CollectionPaymentUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: CollectionPaymentUpdateManyWithWhereWithoutCollectionInput | CollectionPaymentUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: CollectionPaymentScalarWhereInput | CollectionPaymentScalarWhereInput[]
  }

  export type ContentUncheckedUpdateManyWithoutCollectionsNestedInput = {
    create?: XOR<ContentCreateWithoutCollectionsInput, ContentUncheckedCreateWithoutCollectionsInput> | ContentCreateWithoutCollectionsInput[] | ContentUncheckedCreateWithoutCollectionsInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutCollectionsInput | ContentCreateOrConnectWithoutCollectionsInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutCollectionsInput | ContentUpsertWithWhereUniqueWithoutCollectionsInput[]
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutCollectionsInput | ContentUpdateWithWhereUniqueWithoutCollectionsInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutCollectionsInput | ContentUpdateManyWithWhereWithoutCollectionsInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type CollectionPaymentUncheckedUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<CollectionPaymentCreateWithoutCollectionInput, CollectionPaymentUncheckedCreateWithoutCollectionInput> | CollectionPaymentCreateWithoutCollectionInput[] | CollectionPaymentUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionPaymentCreateOrConnectWithoutCollectionInput | CollectionPaymentCreateOrConnectWithoutCollectionInput[]
    upsert?: CollectionPaymentUpsertWithWhereUniqueWithoutCollectionInput | CollectionPaymentUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: CollectionPaymentCreateManyCollectionInputEnvelope
    set?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    disconnect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    delete?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    connect?: CollectionPaymentWhereUniqueInput | CollectionPaymentWhereUniqueInput[]
    update?: CollectionPaymentUpdateWithWhereUniqueWithoutCollectionInput | CollectionPaymentUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: CollectionPaymentUpdateManyWithWhereWithoutCollectionInput | CollectionPaymentUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: CollectionPaymentScalarWhereInput | CollectionPaymentScalarWhereInput[]
  }

  export type CategorableCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CategorableCreateWithoutCategoryInput, CategorableUncheckedCreateWithoutCategoryInput> | CategorableCreateWithoutCategoryInput[] | CategorableUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CategorableCreateOrConnectWithoutCategoryInput | CategorableCreateOrConnectWithoutCategoryInput[]
    createMany?: CategorableCreateManyCategoryInputEnvelope
    connect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
  }

  export type CategorableUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CategorableCreateWithoutCategoryInput, CategorableUncheckedCreateWithoutCategoryInput> | CategorableCreateWithoutCategoryInput[] | CategorableUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CategorableCreateOrConnectWithoutCategoryInput | CategorableCreateOrConnectWithoutCategoryInput[]
    createMany?: CategorableCreateManyCategoryInputEnvelope
    connect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
  }

  export type CategorableUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CategorableCreateWithoutCategoryInput, CategorableUncheckedCreateWithoutCategoryInput> | CategorableCreateWithoutCategoryInput[] | CategorableUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CategorableCreateOrConnectWithoutCategoryInput | CategorableCreateOrConnectWithoutCategoryInput[]
    upsert?: CategorableUpsertWithWhereUniqueWithoutCategoryInput | CategorableUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CategorableCreateManyCategoryInputEnvelope
    set?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    disconnect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    delete?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    connect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    update?: CategorableUpdateWithWhereUniqueWithoutCategoryInput | CategorableUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CategorableUpdateManyWithWhereWithoutCategoryInput | CategorableUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CategorableScalarWhereInput | CategorableScalarWhereInput[]
  }

  export type CategorableUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CategorableCreateWithoutCategoryInput, CategorableUncheckedCreateWithoutCategoryInput> | CategorableCreateWithoutCategoryInput[] | CategorableUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CategorableCreateOrConnectWithoutCategoryInput | CategorableCreateOrConnectWithoutCategoryInput[]
    upsert?: CategorableUpsertWithWhereUniqueWithoutCategoryInput | CategorableUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CategorableCreateManyCategoryInputEnvelope
    set?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    disconnect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    delete?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    connect?: CategorableWhereUniqueInput | CategorableWhereUniqueInput[]
    update?: CategorableUpdateWithWhereUniqueWithoutCategoryInput | CategorableUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CategorableUpdateManyWithWhereWithoutCategoryInput | CategorableUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CategorableScalarWhereInput | CategorableScalarWhereInput[]
  }

  export type TaggableCreateNestedManyWithoutTagInput = {
    create?: XOR<TaggableCreateWithoutTagInput, TaggableUncheckedCreateWithoutTagInput> | TaggableCreateWithoutTagInput[] | TaggableUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TaggableCreateOrConnectWithoutTagInput | TaggableCreateOrConnectWithoutTagInput[]
    createMany?: TaggableCreateManyTagInputEnvelope
    connect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
  }

  export type TaggableUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TaggableCreateWithoutTagInput, TaggableUncheckedCreateWithoutTagInput> | TaggableCreateWithoutTagInput[] | TaggableUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TaggableCreateOrConnectWithoutTagInput | TaggableCreateOrConnectWithoutTagInput[]
    createMany?: TaggableCreateManyTagInputEnvelope
    connect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
  }

  export type TaggableUpdateManyWithoutTagNestedInput = {
    create?: XOR<TaggableCreateWithoutTagInput, TaggableUncheckedCreateWithoutTagInput> | TaggableCreateWithoutTagInput[] | TaggableUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TaggableCreateOrConnectWithoutTagInput | TaggableCreateOrConnectWithoutTagInput[]
    upsert?: TaggableUpsertWithWhereUniqueWithoutTagInput | TaggableUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TaggableCreateManyTagInputEnvelope
    set?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    disconnect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    delete?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    connect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    update?: TaggableUpdateWithWhereUniqueWithoutTagInput | TaggableUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TaggableUpdateManyWithWhereWithoutTagInput | TaggableUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TaggableScalarWhereInput | TaggableScalarWhereInput[]
  }

  export type TaggableUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TaggableCreateWithoutTagInput, TaggableUncheckedCreateWithoutTagInput> | TaggableCreateWithoutTagInput[] | TaggableUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TaggableCreateOrConnectWithoutTagInput | TaggableCreateOrConnectWithoutTagInput[]
    upsert?: TaggableUpsertWithWhereUniqueWithoutTagInput | TaggableUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TaggableCreateManyTagInputEnvelope
    set?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    disconnect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    delete?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    connect?: TaggableWhereUniqueInput | TaggableWhereUniqueInput[]
    update?: TaggableUpdateWithWhereUniqueWithoutTagInput | TaggableUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TaggableUpdateManyWithWhereWithoutTagInput | TaggableUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TaggableScalarWhereInput | TaggableScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type ContentCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<ContentCreateWithoutSubscriptionsInput, ContentUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutSubscriptionsInput
    connect?: ContentWhereUniqueInput
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionStatus
  }

  export type UserUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    upsert?: UserUpsertWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionsInput, UserUpdateWithoutSubscriptionsInput>, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type ContentUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<ContentCreateWithoutSubscriptionsInput, ContentUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutSubscriptionsInput
    upsert?: ContentUpsertWithoutSubscriptionsInput
    connect?: ContentWhereUniqueInput
    update?: XOR<XOR<ContentUpdateToOneWithWhereWithoutSubscriptionsInput, ContentUpdateWithoutSubscriptionsInput>, ContentUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserCreateNestedOneWithoutWalletInput = {
    create?: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutWalletNestedInput = {
    create?: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletInput
    upsert?: UserUpsertWithoutWalletInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWalletInput, UserUpdateWithoutWalletInput>, UserUncheckedUpdateWithoutWalletInput>
  }

  export type UserCreateNestedOneWithoutContent_commentsInput = {
    create?: XOR<UserCreateWithoutContent_commentsInput, UserUncheckedCreateWithoutContent_commentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContent_commentsInput
    connect?: UserWhereUniqueInput
  }

  export type ContentCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ContentCreateWithoutCommentsInput, ContentUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutCommentsInput
    connect?: ContentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutContent_commentsNestedInput = {
    create?: XOR<UserCreateWithoutContent_commentsInput, UserUncheckedCreateWithoutContent_commentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContent_commentsInput
    upsert?: UserUpsertWithoutContent_commentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContent_commentsInput, UserUpdateWithoutContent_commentsInput>, UserUncheckedUpdateWithoutContent_commentsInput>
  }

  export type ContentUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<ContentCreateWithoutCommentsInput, ContentUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutCommentsInput
    upsert?: ContentUpsertWithoutCommentsInput
    connect?: ContentWhereUniqueInput
    update?: XOR<XOR<ContentUpdateToOneWithWhereWithoutCommentsInput, ContentUpdateWithoutCommentsInput>, ContentUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutFollowersInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    upsert?: UserUpsertWithoutFollowersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowersInput, UserUpdateWithoutFollowersInput>, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    upsert?: UserUpsertWithoutFollowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowingInput, UserUpdateWithoutFollowingInput>, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserCreateNestedOneWithoutContent_paymentsInput = {
    create?: XOR<UserCreateWithoutContent_paymentsInput, UserUncheckedCreateWithoutContent_paymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContent_paymentsInput
    connect?: UserWhereUniqueInput
  }

  export type ContentCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<ContentCreateWithoutPaymentsInput, ContentUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutPaymentsInput
    connect?: ContentWhereUniqueInput
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type UserUpdateOneRequiredWithoutContent_paymentsNestedInput = {
    create?: XOR<UserCreateWithoutContent_paymentsInput, UserUncheckedCreateWithoutContent_paymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContent_paymentsInput
    upsert?: UserUpsertWithoutContent_paymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContent_paymentsInput, UserUpdateWithoutContent_paymentsInput>, UserUncheckedUpdateWithoutContent_paymentsInput>
  }

  export type ContentUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<ContentCreateWithoutPaymentsInput, ContentUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutPaymentsInput
    upsert?: ContentUpsertWithoutPaymentsInput
    connect?: ContentWhereUniqueInput
    update?: XOR<XOR<ContentUpdateToOneWithWhereWithoutPaymentsInput, ContentUpdateWithoutPaymentsInput>, ContentUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserCreateNestedOneWithoutCollection_paymentsInput = {
    create?: XOR<UserCreateWithoutCollection_paymentsInput, UserUncheckedCreateWithoutCollection_paymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollection_paymentsInput
    connect?: UserWhereUniqueInput
  }

  export type CollectionCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<CollectionCreateWithoutPaymentsInput, CollectionUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: CollectionCreateOrConnectWithoutPaymentsInput
    connect?: CollectionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCollection_paymentsNestedInput = {
    create?: XOR<UserCreateWithoutCollection_paymentsInput, UserUncheckedCreateWithoutCollection_paymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollection_paymentsInput
    upsert?: UserUpsertWithoutCollection_paymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCollection_paymentsInput, UserUpdateWithoutCollection_paymentsInput>, UserUncheckedUpdateWithoutCollection_paymentsInput>
  }

  export type CollectionUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<CollectionCreateWithoutPaymentsInput, CollectionUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: CollectionCreateOrConnectWithoutPaymentsInput
    upsert?: CollectionUpsertWithoutPaymentsInput
    connect?: CollectionWhereUniqueInput
    update?: XOR<XOR<CollectionUpdateToOneWithWhereWithoutPaymentsInput, CollectionUpdateWithoutPaymentsInput>, CollectionUncheckedUpdateWithoutPaymentsInput>
  }

  export type CategoryCreateNestedOneWithoutContentsInput = {
    create?: XOR<CategoryCreateWithoutContentsInput, CategoryUncheckedCreateWithoutContentsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutContentsInput
    connect?: CategoryWhereUniqueInput
  }

  export type ContentCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<ContentCreateWithoutCategoriesInput, ContentUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: ContentCreateOrConnectWithoutCategoriesInput
    connect?: ContentWhereUniqueInput
  }

  export type CategoryUpdateOneRequiredWithoutContentsNestedInput = {
    create?: XOR<CategoryCreateWithoutContentsInput, CategoryUncheckedCreateWithoutContentsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutContentsInput
    upsert?: CategoryUpsertWithoutContentsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutContentsInput, CategoryUpdateWithoutContentsInput>, CategoryUncheckedUpdateWithoutContentsInput>
  }

  export type ContentUpdateOneWithoutCategoriesNestedInput = {
    create?: XOR<ContentCreateWithoutCategoriesInput, ContentUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: ContentCreateOrConnectWithoutCategoriesInput
    upsert?: ContentUpsertWithoutCategoriesInput
    disconnect?: ContentWhereInput | boolean
    delete?: ContentWhereInput | boolean
    connect?: ContentWhereUniqueInput
    update?: XOR<XOR<ContentUpdateToOneWithWhereWithoutCategoriesInput, ContentUpdateWithoutCategoriesInput>, ContentUncheckedUpdateWithoutCategoriesInput>
  }

  export type TagCreateNestedOneWithoutContentsInput = {
    create?: XOR<TagCreateWithoutContentsInput, TagUncheckedCreateWithoutContentsInput>
    connectOrCreate?: TagCreateOrConnectWithoutContentsInput
    connect?: TagWhereUniqueInput
  }

  export type ContentCreateNestedOneWithoutTagsInput = {
    create?: XOR<ContentCreateWithoutTagsInput, ContentUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutTagsInput
    connect?: ContentWhereUniqueInput
  }

  export type TagUpdateOneRequiredWithoutContentsNestedInput = {
    create?: XOR<TagCreateWithoutContentsInput, TagUncheckedCreateWithoutContentsInput>
    connectOrCreate?: TagCreateOrConnectWithoutContentsInput
    upsert?: TagUpsertWithoutContentsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutContentsInput, TagUpdateWithoutContentsInput>, TagUncheckedUpdateWithoutContentsInput>
  }

  export type ContentUpdateOneWithoutTagsNestedInput = {
    create?: XOR<ContentCreateWithoutTagsInput, ContentUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutTagsInput
    upsert?: ContentUpsertWithoutTagsInput
    disconnect?: ContentWhereInput | boolean
    delete?: ContentWhereInput | boolean
    connect?: ContentWhereUniqueInput
    update?: XOR<XOR<ContentUpdateToOneWithWhereWithoutTagsInput, ContentUpdateWithoutTagsInput>, ContentUncheckedUpdateWithoutTagsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumContentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContentStatus | EnumContentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContentStatus[] | ListEnumContentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContentStatus[] | ListEnumContentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContentStatusFilter<$PrismaModel> | $Enums.ContentStatus
  }

  export type NestedEnumContentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContentStatus | EnumContentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContentStatus[] | ListEnumContentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContentStatus[] | ListEnumContentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContentStatusFilter<$PrismaModel>
    _max?: NestedEnumContentStatusFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type UserCreateWithoutReferralsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReferralsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferralsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
  }

  export type UserCreateWithoutReferrerInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReferrerInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferrerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput>
  }

  export type UserCreateManyReferrerInputEnvelope = {
    data: UserCreateManyReferrerInput | UserCreateManyReferrerInput[]
    skipDuplicates?: boolean
  }

  export type ContentCreateWithoutOwnerInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    subscriptions?: SubscriptionCreateNestedManyWithoutContentInput
    collections?: CollectionCreateNestedManyWithoutContentsInput
    categories?: CategorableCreateNestedManyWithoutContentInput
    tags?: TaggableCreateNestedManyWithoutContentInput
    payments?: ContentPaymentCreateNestedManyWithoutContentInput
    comments?: ContentCommentCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutOwnerInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutContentInput
    collections?: CollectionUncheckedCreateNestedManyWithoutContentsInput
    categories?: CategorableUncheckedCreateNestedManyWithoutContentInput
    tags?: TaggableUncheckedCreateNestedManyWithoutContentInput
    payments?: ContentPaymentUncheckedCreateNestedManyWithoutContentInput
    comments?: ContentCommentUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutOwnerInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutOwnerInput, ContentUncheckedCreateWithoutOwnerInput>
  }

  export type ContentCreateManyOwnerInputEnvelope = {
    data: ContentCreateManyOwnerInput | ContentCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type CollectionCreateWithoutOwnerInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
    contents?: ContentCreateNestedManyWithoutCollectionsInput
    payments?: CollectionPaymentCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUncheckedCreateWithoutOwnerInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
    contents?: ContentUncheckedCreateNestedManyWithoutCollectionsInput
    payments?: CollectionPaymentUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type CollectionCreateOrConnectWithoutOwnerInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutOwnerInput, CollectionUncheckedCreateWithoutOwnerInput>
  }

  export type CollectionCreateManyOwnerInputEnvelope = {
    data: CollectionCreateManyOwnerInput | CollectionCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    status?: $Enums.SubscriptionStatus
    startDate?: Date | string
    endDate?: Date | string | null
    content: ContentCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    contentId: string
    status?: $Enums.SubscriptionStatus
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionCreateManyUserInputEnvelope = {
    data: SubscriptionCreateManyUserInput | SubscriptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WalletCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    balance?: number
    currency?: string
  }

  export type WalletUncheckedCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    balance?: number
    currency?: string
  }

  export type WalletCreateOrConnectWithoutUserInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
  }

  export type FollowersCreateWithoutUserInput = {
    follower: UserCreateNestedOneWithoutFollowingInput
  }

  export type FollowersUncheckedCreateWithoutUserInput = {
    followerId: string
  }

  export type FollowersCreateOrConnectWithoutUserInput = {
    where: FollowersWhereUniqueInput
    create: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput>
  }

  export type FollowersCreateManyUserInputEnvelope = {
    data: FollowersCreateManyUserInput | FollowersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FollowersCreateWithoutFollowerInput = {
    user: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowersUncheckedCreateWithoutFollowerInput = {
    userId: string
  }

  export type FollowersCreateOrConnectWithoutFollowerInput = {
    where: FollowersWhereUniqueInput
    create: XOR<FollowersCreateWithoutFollowerInput, FollowersUncheckedCreateWithoutFollowerInput>
  }

  export type FollowersCreateManyFollowerInputEnvelope = {
    data: FollowersCreateManyFollowerInput | FollowersCreateManyFollowerInput[]
    skipDuplicates?: boolean
  }

  export type ContentPaymentCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
    content: ContentCreateNestedOneWithoutPaymentsInput
  }

  export type ContentPaymentUncheckedCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    contentId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type ContentPaymentCreateOrConnectWithoutUserInput = {
    where: ContentPaymentWhereUniqueInput
    create: XOR<ContentPaymentCreateWithoutUserInput, ContentPaymentUncheckedCreateWithoutUserInput>
  }

  export type ContentPaymentCreateManyUserInputEnvelope = {
    data: ContentPaymentCreateManyUserInput | ContentPaymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CollectionPaymentCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
    collection: CollectionCreateNestedOneWithoutPaymentsInput
  }

  export type CollectionPaymentUncheckedCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    collectionId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type CollectionPaymentCreateOrConnectWithoutUserInput = {
    where: CollectionPaymentWhereUniqueInput
    create: XOR<CollectionPaymentCreateWithoutUserInput, CollectionPaymentUncheckedCreateWithoutUserInput>
  }

  export type CollectionPaymentCreateManyUserInputEnvelope = {
    data: CollectionPaymentCreateManyUserInput | CollectionPaymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ContentCommentCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    commentContent: string
    content: ContentCreateNestedOneWithoutCommentsInput
  }

  export type ContentCommentUncheckedCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    commentContent: string
    contentId: string
  }

  export type ContentCommentCreateOrConnectWithoutUserInput = {
    where: ContentCommentWhereUniqueInput
    create: XOR<ContentCommentCreateWithoutUserInput, ContentCommentUncheckedCreateWithoutUserInput>
  }

  export type ContentCommentCreateManyUserInputEnvelope = {
    data: ContentCommentCreateManyUserInput | ContentCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutReferralsInput = {
    update: XOR<UserUpdateWithoutReferralsInput, UserUncheckedUpdateWithoutReferralsInput>
    create: XOR<UserCreateWithoutReferralsInput, UserUncheckedCreateWithoutReferralsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferralsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferralsInput, UserUncheckedUpdateWithoutReferralsInput>
  }

  export type UserUpdateWithoutReferralsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutReferrerInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReferrerInput, UserUncheckedUpdateWithoutReferrerInput>
    create: XOR<UserCreateWithoutReferrerInput, UserUncheckedCreateWithoutReferrerInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReferrerInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReferrerInput, UserUncheckedUpdateWithoutReferrerInput>
  }

  export type UserUpdateManyWithWhereWithoutReferrerInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReferrerInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    deleted_at?: DateTimeNullableFilter<"User"> | Date | string | null
    name?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    referral_id?: StringNullableFilter<"User"> | string | null
    email_verified?: BoolFilter<"User"> | boolean
    phone_number?: StringNullableFilter<"User"> | string | null
    kyc_verified?: BoolNullableFilter<"User"> | boolean | null
    user_charge_type?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    verified?: BoolFilter<"User"> | boolean
    avatar?: StringNullableFilter<"User"> | string | null
    followerCount?: IntFilter<"User"> | number
    followingCount?: IntFilter<"User"> | number
    contentCount?: IntFilter<"User"> | number
    lastActive?: DateTimeNullableFilter<"User"> | Date | string | null
    referrerId?: StringNullableFilter<"User"> | string | null
    privyId?: StringFilter<"User"> | string
  }

  export type ContentUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ContentWhereUniqueInput
    update: XOR<ContentUpdateWithoutOwnerInput, ContentUncheckedUpdateWithoutOwnerInput>
    create: XOR<ContentCreateWithoutOwnerInput, ContentUncheckedCreateWithoutOwnerInput>
  }

  export type ContentUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ContentWhereUniqueInput
    data: XOR<ContentUpdateWithoutOwnerInput, ContentUncheckedUpdateWithoutOwnerInput>
  }

  export type ContentUpdateManyWithWhereWithoutOwnerInput = {
    where: ContentScalarWhereInput
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ContentScalarWhereInput = {
    AND?: ContentScalarWhereInput | ContentScalarWhereInput[]
    OR?: ContentScalarWhereInput[]
    NOT?: ContentScalarWhereInput | ContentScalarWhereInput[]
    id?: StringFilter<"Content"> | string
    created_at?: DateTimeFilter<"Content"> | Date | string
    updated_at?: DateTimeFilter<"Content"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Content"> | Date | string | null
    title?: StringFilter<"Content"> | string
    description?: StringNullableFilter<"Content"> | string | null
    ownerId?: StringFilter<"Content"> | string
    type?: StringFilter<"Content"> | string
    is_available?: BoolFilter<"Content"> | boolean
    approved_by_admin?: BoolFilter<"Content"> | boolean
    show_only_in_collections?: BoolFilter<"Content"> | boolean
    views?: IntFilter<"Content"> | number
    is_adult?: BoolFilter<"Content"> | boolean
    is_challenge?: BoolFilter<"Content"> | boolean
    live_ended_at?: DateTimeNullableFilter<"Content"> | Date | string | null
    scheduled_date?: DateTimeNullableFilter<"Content"> | Date | string | null
    archived_at?: DateTimeNullableFilter<"Content"> | Date | string | null
    live_type?: StringNullableFilter<"Content"> | string | null
    live_provider?: StringNullableFilter<"Content"> | string | null
    commentCount?: IntFilter<"Content"> | number
    likeCount?: IntFilter<"Content"> | number
    viewCount?: IntFilter<"Content"> | number
    status?: EnumContentStatusFilter<"Content"> | $Enums.ContentStatus
    published?: BoolFilter<"Content"> | boolean
    isPremium?: BoolFilter<"Content"> | boolean
    isPromoted?: BoolFilter<"Content"> | boolean
    mediaUrl?: StringNullableFilter<"Content"> | string | null
    thumbnailUrl?: StringNullableFilter<"Content"> | string | null
  }

  export type CollectionUpsertWithWhereUniqueWithoutOwnerInput = {
    where: CollectionWhereUniqueInput
    update: XOR<CollectionUpdateWithoutOwnerInput, CollectionUncheckedUpdateWithoutOwnerInput>
    create: XOR<CollectionCreateWithoutOwnerInput, CollectionUncheckedCreateWithoutOwnerInput>
  }

  export type CollectionUpdateWithWhereUniqueWithoutOwnerInput = {
    where: CollectionWhereUniqueInput
    data: XOR<CollectionUpdateWithoutOwnerInput, CollectionUncheckedUpdateWithoutOwnerInput>
  }

  export type CollectionUpdateManyWithWhereWithoutOwnerInput = {
    where: CollectionScalarWhereInput
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyWithoutOwnerInput>
  }

  export type CollectionScalarWhereInput = {
    AND?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
    OR?: CollectionScalarWhereInput[]
    NOT?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
    id?: StringFilter<"Collection"> | string
    created_at?: DateTimeFilter<"Collection"> | Date | string
    updated_at?: DateTimeFilter<"Collection"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Collection"> | Date | string | null
    name?: StringFilter<"Collection"> | string
    description?: StringNullableFilter<"Collection"> | string | null
    ownerId?: StringFilter<"Collection"> | string
    is_available?: BoolFilter<"Collection"> | boolean
    approved_by_admin?: BoolFilter<"Collection"> | boolean
    isPremium?: BoolFilter<"Collection"> | boolean
    isPromoted?: BoolFilter<"Collection"> | boolean
    thumbnailUrl?: StringNullableFilter<"Collection"> | string | null
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutUserInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: StringFilter<"Subscription"> | string
    created_at?: DateTimeFilter<"Subscription"> | Date | string
    updated_at?: DateTimeFilter<"Subscription"> | Date | string
    deleted_at?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    userId?: StringFilter<"Subscription"> | string
    contentId?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeNullableFilter<"Subscription"> | Date | string | null
  }

  export type WalletUpsertWithoutUserInput = {
    update: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutUserInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
  }

  export type WalletUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type WalletUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type FollowersUpsertWithWhereUniqueWithoutUserInput = {
    where: FollowersWhereUniqueInput
    update: XOR<FollowersUpdateWithoutUserInput, FollowersUncheckedUpdateWithoutUserInput>
    create: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput>
  }

  export type FollowersUpdateWithWhereUniqueWithoutUserInput = {
    where: FollowersWhereUniqueInput
    data: XOR<FollowersUpdateWithoutUserInput, FollowersUncheckedUpdateWithoutUserInput>
  }

  export type FollowersUpdateManyWithWhereWithoutUserInput = {
    where: FollowersScalarWhereInput
    data: XOR<FollowersUpdateManyMutationInput, FollowersUncheckedUpdateManyWithoutUserInput>
  }

  export type FollowersScalarWhereInput = {
    AND?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
    OR?: FollowersScalarWhereInput[]
    NOT?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
    userId?: StringFilter<"Followers"> | string
    followerId?: StringFilter<"Followers"> | string
  }

  export type FollowersUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowersWhereUniqueInput
    update: XOR<FollowersUpdateWithoutFollowerInput, FollowersUncheckedUpdateWithoutFollowerInput>
    create: XOR<FollowersCreateWithoutFollowerInput, FollowersUncheckedCreateWithoutFollowerInput>
  }

  export type FollowersUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowersWhereUniqueInput
    data: XOR<FollowersUpdateWithoutFollowerInput, FollowersUncheckedUpdateWithoutFollowerInput>
  }

  export type FollowersUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowersScalarWhereInput
    data: XOR<FollowersUpdateManyMutationInput, FollowersUncheckedUpdateManyWithoutFollowerInput>
  }

  export type ContentPaymentUpsertWithWhereUniqueWithoutUserInput = {
    where: ContentPaymentWhereUniqueInput
    update: XOR<ContentPaymentUpdateWithoutUserInput, ContentPaymentUncheckedUpdateWithoutUserInput>
    create: XOR<ContentPaymentCreateWithoutUserInput, ContentPaymentUncheckedCreateWithoutUserInput>
  }

  export type ContentPaymentUpdateWithWhereUniqueWithoutUserInput = {
    where: ContentPaymentWhereUniqueInput
    data: XOR<ContentPaymentUpdateWithoutUserInput, ContentPaymentUncheckedUpdateWithoutUserInput>
  }

  export type ContentPaymentUpdateManyWithWhereWithoutUserInput = {
    where: ContentPaymentScalarWhereInput
    data: XOR<ContentPaymentUpdateManyMutationInput, ContentPaymentUncheckedUpdateManyWithoutUserInput>
  }

  export type ContentPaymentScalarWhereInput = {
    AND?: ContentPaymentScalarWhereInput | ContentPaymentScalarWhereInput[]
    OR?: ContentPaymentScalarWhereInput[]
    NOT?: ContentPaymentScalarWhereInput | ContentPaymentScalarWhereInput[]
    id?: StringFilter<"ContentPayment"> | string
    created_at?: DateTimeFilter<"ContentPayment"> | Date | string
    updated_at?: DateTimeFilter<"ContentPayment"> | Date | string
    deleted_at?: DateTimeNullableFilter<"ContentPayment"> | Date | string | null
    userId?: StringFilter<"ContentPayment"> | string
    contentId?: StringFilter<"ContentPayment"> | string
    amount?: FloatFilter<"ContentPayment"> | number
    currency?: StringFilter<"ContentPayment"> | string
    status?: EnumPaymentStatusFilter<"ContentPayment"> | $Enums.PaymentStatus
  }

  export type CollectionPaymentUpsertWithWhereUniqueWithoutUserInput = {
    where: CollectionPaymentWhereUniqueInput
    update: XOR<CollectionPaymentUpdateWithoutUserInput, CollectionPaymentUncheckedUpdateWithoutUserInput>
    create: XOR<CollectionPaymentCreateWithoutUserInput, CollectionPaymentUncheckedCreateWithoutUserInput>
  }

  export type CollectionPaymentUpdateWithWhereUniqueWithoutUserInput = {
    where: CollectionPaymentWhereUniqueInput
    data: XOR<CollectionPaymentUpdateWithoutUserInput, CollectionPaymentUncheckedUpdateWithoutUserInput>
  }

  export type CollectionPaymentUpdateManyWithWhereWithoutUserInput = {
    where: CollectionPaymentScalarWhereInput
    data: XOR<CollectionPaymentUpdateManyMutationInput, CollectionPaymentUncheckedUpdateManyWithoutUserInput>
  }

  export type CollectionPaymentScalarWhereInput = {
    AND?: CollectionPaymentScalarWhereInput | CollectionPaymentScalarWhereInput[]
    OR?: CollectionPaymentScalarWhereInput[]
    NOT?: CollectionPaymentScalarWhereInput | CollectionPaymentScalarWhereInput[]
    id?: StringFilter<"CollectionPayment"> | string
    created_at?: DateTimeFilter<"CollectionPayment"> | Date | string
    updated_at?: DateTimeFilter<"CollectionPayment"> | Date | string
    deleted_at?: DateTimeNullableFilter<"CollectionPayment"> | Date | string | null
    userId?: StringFilter<"CollectionPayment"> | string
    collectionId?: StringFilter<"CollectionPayment"> | string
    amount?: FloatFilter<"CollectionPayment"> | number
    currency?: StringFilter<"CollectionPayment"> | string
    status?: EnumPaymentStatusFilter<"CollectionPayment"> | $Enums.PaymentStatus
  }

  export type ContentCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: ContentCommentWhereUniqueInput
    update: XOR<ContentCommentUpdateWithoutUserInput, ContentCommentUncheckedUpdateWithoutUserInput>
    create: XOR<ContentCommentCreateWithoutUserInput, ContentCommentUncheckedCreateWithoutUserInput>
  }

  export type ContentCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: ContentCommentWhereUniqueInput
    data: XOR<ContentCommentUpdateWithoutUserInput, ContentCommentUncheckedUpdateWithoutUserInput>
  }

  export type ContentCommentUpdateManyWithWhereWithoutUserInput = {
    where: ContentCommentScalarWhereInput
    data: XOR<ContentCommentUpdateManyMutationInput, ContentCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type ContentCommentScalarWhereInput = {
    AND?: ContentCommentScalarWhereInput | ContentCommentScalarWhereInput[]
    OR?: ContentCommentScalarWhereInput[]
    NOT?: ContentCommentScalarWhereInput | ContentCommentScalarWhereInput[]
    id?: StringFilter<"ContentComment"> | string
    created_at?: DateTimeFilter<"ContentComment"> | Date | string
    updated_at?: DateTimeFilter<"ContentComment"> | Date | string
    deleted_at?: DateTimeNullableFilter<"ContentComment"> | Date | string | null
    commentContent?: StringFilter<"ContentComment"> | string
    userId?: StringFilter<"ContentComment"> | string
    contentId?: StringFilter<"ContentComment"> | string
  }

  export type UserCreateWithoutContents_createdInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContents_createdInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContents_createdInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContents_createdInput, UserUncheckedCreateWithoutContents_createdInput>
  }

  export type SubscriptionCreateWithoutContentInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    status?: $Enums.SubscriptionStatus
    startDate?: Date | string
    endDate?: Date | string | null
    user: UserCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutContentInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    status?: $Enums.SubscriptionStatus
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type SubscriptionCreateOrConnectWithoutContentInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutContentInput, SubscriptionUncheckedCreateWithoutContentInput>
  }

  export type SubscriptionCreateManyContentInputEnvelope = {
    data: SubscriptionCreateManyContentInput | SubscriptionCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type CollectionCreateWithoutContentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutCollections_createdInput
    payments?: CollectionPaymentCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUncheckedCreateWithoutContentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    ownerId: string
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
    payments?: CollectionPaymentUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type CollectionCreateOrConnectWithoutContentsInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutContentsInput, CollectionUncheckedCreateWithoutContentsInput>
  }

  export type CategorableCreateWithoutContentInput = {
    categorableType: string
    category: CategoryCreateNestedOneWithoutContentsInput
  }

  export type CategorableUncheckedCreateWithoutContentInput = {
    categoryId: string
    categorableType: string
  }

  export type CategorableCreateOrConnectWithoutContentInput = {
    where: CategorableWhereUniqueInput
    create: XOR<CategorableCreateWithoutContentInput, CategorableUncheckedCreateWithoutContentInput>
  }

  export type CategorableCreateManyContentInputEnvelope = {
    data: CategorableCreateManyContentInput | CategorableCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type TaggableCreateWithoutContentInput = {
    taggableType: string
    tag: TagCreateNestedOneWithoutContentsInput
  }

  export type TaggableUncheckedCreateWithoutContentInput = {
    tagId: string
    taggableType: string
  }

  export type TaggableCreateOrConnectWithoutContentInput = {
    where: TaggableWhereUniqueInput
    create: XOR<TaggableCreateWithoutContentInput, TaggableUncheckedCreateWithoutContentInput>
  }

  export type TaggableCreateManyContentInputEnvelope = {
    data: TaggableCreateManyContentInput | TaggableCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type ContentPaymentCreateWithoutContentInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
    user: UserCreateNestedOneWithoutContent_paymentsInput
  }

  export type ContentPaymentUncheckedCreateWithoutContentInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type ContentPaymentCreateOrConnectWithoutContentInput = {
    where: ContentPaymentWhereUniqueInput
    create: XOR<ContentPaymentCreateWithoutContentInput, ContentPaymentUncheckedCreateWithoutContentInput>
  }

  export type ContentPaymentCreateManyContentInputEnvelope = {
    data: ContentPaymentCreateManyContentInput | ContentPaymentCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type ContentCommentCreateWithoutContentInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    commentContent: string
    user: UserCreateNestedOneWithoutContent_commentsInput
  }

  export type ContentCommentUncheckedCreateWithoutContentInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    commentContent: string
    userId: string
  }

  export type ContentCommentCreateOrConnectWithoutContentInput = {
    where: ContentCommentWhereUniqueInput
    create: XOR<ContentCommentCreateWithoutContentInput, ContentCommentUncheckedCreateWithoutContentInput>
  }

  export type ContentCommentCreateManyContentInputEnvelope = {
    data: ContentCommentCreateManyContentInput | ContentCommentCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutContents_createdInput = {
    update: XOR<UserUpdateWithoutContents_createdInput, UserUncheckedUpdateWithoutContents_createdInput>
    create: XOR<UserCreateWithoutContents_createdInput, UserUncheckedCreateWithoutContents_createdInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContents_createdInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContents_createdInput, UserUncheckedUpdateWithoutContents_createdInput>
  }

  export type UserUpdateWithoutContents_createdInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContents_createdInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutContentInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutContentInput, SubscriptionUncheckedUpdateWithoutContentInput>
    create: XOR<SubscriptionCreateWithoutContentInput, SubscriptionUncheckedCreateWithoutContentInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutContentInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutContentInput, SubscriptionUncheckedUpdateWithoutContentInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutContentInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutContentInput>
  }

  export type CollectionUpsertWithWhereUniqueWithoutContentsInput = {
    where: CollectionWhereUniqueInput
    update: XOR<CollectionUpdateWithoutContentsInput, CollectionUncheckedUpdateWithoutContentsInput>
    create: XOR<CollectionCreateWithoutContentsInput, CollectionUncheckedCreateWithoutContentsInput>
  }

  export type CollectionUpdateWithWhereUniqueWithoutContentsInput = {
    where: CollectionWhereUniqueInput
    data: XOR<CollectionUpdateWithoutContentsInput, CollectionUncheckedUpdateWithoutContentsInput>
  }

  export type CollectionUpdateManyWithWhereWithoutContentsInput = {
    where: CollectionScalarWhereInput
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyWithoutContentsInput>
  }

  export type CategorableUpsertWithWhereUniqueWithoutContentInput = {
    where: CategorableWhereUniqueInput
    update: XOR<CategorableUpdateWithoutContentInput, CategorableUncheckedUpdateWithoutContentInput>
    create: XOR<CategorableCreateWithoutContentInput, CategorableUncheckedCreateWithoutContentInput>
  }

  export type CategorableUpdateWithWhereUniqueWithoutContentInput = {
    where: CategorableWhereUniqueInput
    data: XOR<CategorableUpdateWithoutContentInput, CategorableUncheckedUpdateWithoutContentInput>
  }

  export type CategorableUpdateManyWithWhereWithoutContentInput = {
    where: CategorableScalarWhereInput
    data: XOR<CategorableUpdateManyMutationInput, CategorableUncheckedUpdateManyWithoutContentInput>
  }

  export type CategorableScalarWhereInput = {
    AND?: CategorableScalarWhereInput | CategorableScalarWhereInput[]
    OR?: CategorableScalarWhereInput[]
    NOT?: CategorableScalarWhereInput | CategorableScalarWhereInput[]
    categoryId?: StringFilter<"Categorable"> | string
    categorableId?: StringFilter<"Categorable"> | string
    categorableType?: StringFilter<"Categorable"> | string
  }

  export type TaggableUpsertWithWhereUniqueWithoutContentInput = {
    where: TaggableWhereUniqueInput
    update: XOR<TaggableUpdateWithoutContentInput, TaggableUncheckedUpdateWithoutContentInput>
    create: XOR<TaggableCreateWithoutContentInput, TaggableUncheckedCreateWithoutContentInput>
  }

  export type TaggableUpdateWithWhereUniqueWithoutContentInput = {
    where: TaggableWhereUniqueInput
    data: XOR<TaggableUpdateWithoutContentInput, TaggableUncheckedUpdateWithoutContentInput>
  }

  export type TaggableUpdateManyWithWhereWithoutContentInput = {
    where: TaggableScalarWhereInput
    data: XOR<TaggableUpdateManyMutationInput, TaggableUncheckedUpdateManyWithoutContentInput>
  }

  export type TaggableScalarWhereInput = {
    AND?: TaggableScalarWhereInput | TaggableScalarWhereInput[]
    OR?: TaggableScalarWhereInput[]
    NOT?: TaggableScalarWhereInput | TaggableScalarWhereInput[]
    tagId?: StringFilter<"Taggable"> | string
    taggableId?: StringFilter<"Taggable"> | string
    taggableType?: StringFilter<"Taggable"> | string
  }

  export type ContentPaymentUpsertWithWhereUniqueWithoutContentInput = {
    where: ContentPaymentWhereUniqueInput
    update: XOR<ContentPaymentUpdateWithoutContentInput, ContentPaymentUncheckedUpdateWithoutContentInput>
    create: XOR<ContentPaymentCreateWithoutContentInput, ContentPaymentUncheckedCreateWithoutContentInput>
  }

  export type ContentPaymentUpdateWithWhereUniqueWithoutContentInput = {
    where: ContentPaymentWhereUniqueInput
    data: XOR<ContentPaymentUpdateWithoutContentInput, ContentPaymentUncheckedUpdateWithoutContentInput>
  }

  export type ContentPaymentUpdateManyWithWhereWithoutContentInput = {
    where: ContentPaymentScalarWhereInput
    data: XOR<ContentPaymentUpdateManyMutationInput, ContentPaymentUncheckedUpdateManyWithoutContentInput>
  }

  export type ContentCommentUpsertWithWhereUniqueWithoutContentInput = {
    where: ContentCommentWhereUniqueInput
    update: XOR<ContentCommentUpdateWithoutContentInput, ContentCommentUncheckedUpdateWithoutContentInput>
    create: XOR<ContentCommentCreateWithoutContentInput, ContentCommentUncheckedCreateWithoutContentInput>
  }

  export type ContentCommentUpdateWithWhereUniqueWithoutContentInput = {
    where: ContentCommentWhereUniqueInput
    data: XOR<ContentCommentUpdateWithoutContentInput, ContentCommentUncheckedUpdateWithoutContentInput>
  }

  export type ContentCommentUpdateManyWithWhereWithoutContentInput = {
    where: ContentCommentScalarWhereInput
    data: XOR<ContentCommentUpdateManyMutationInput, ContentCommentUncheckedUpdateManyWithoutContentInput>
  }

  export type UserCreateWithoutCollections_createdInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCollections_createdInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCollections_createdInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCollections_createdInput, UserUncheckedCreateWithoutCollections_createdInput>
  }

  export type ContentCreateWithoutCollectionsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutContents_createdInput
    subscriptions?: SubscriptionCreateNestedManyWithoutContentInput
    categories?: CategorableCreateNestedManyWithoutContentInput
    tags?: TaggableCreateNestedManyWithoutContentInput
    payments?: ContentPaymentCreateNestedManyWithoutContentInput
    comments?: ContentCommentCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutCollectionsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    ownerId: string
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutContentInput
    categories?: CategorableUncheckedCreateNestedManyWithoutContentInput
    tags?: TaggableUncheckedCreateNestedManyWithoutContentInput
    payments?: ContentPaymentUncheckedCreateNestedManyWithoutContentInput
    comments?: ContentCommentUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutCollectionsInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutCollectionsInput, ContentUncheckedCreateWithoutCollectionsInput>
  }

  export type CollectionPaymentCreateWithoutCollectionInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
    user: UserCreateNestedOneWithoutCollection_paymentsInput
  }

  export type CollectionPaymentUncheckedCreateWithoutCollectionInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type CollectionPaymentCreateOrConnectWithoutCollectionInput = {
    where: CollectionPaymentWhereUniqueInput
    create: XOR<CollectionPaymentCreateWithoutCollectionInput, CollectionPaymentUncheckedCreateWithoutCollectionInput>
  }

  export type CollectionPaymentCreateManyCollectionInputEnvelope = {
    data: CollectionPaymentCreateManyCollectionInput | CollectionPaymentCreateManyCollectionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCollections_createdInput = {
    update: XOR<UserUpdateWithoutCollections_createdInput, UserUncheckedUpdateWithoutCollections_createdInput>
    create: XOR<UserCreateWithoutCollections_createdInput, UserUncheckedCreateWithoutCollections_createdInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCollections_createdInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCollections_createdInput, UserUncheckedUpdateWithoutCollections_createdInput>
  }

  export type UserUpdateWithoutCollections_createdInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCollections_createdInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContentUpsertWithWhereUniqueWithoutCollectionsInput = {
    where: ContentWhereUniqueInput
    update: XOR<ContentUpdateWithoutCollectionsInput, ContentUncheckedUpdateWithoutCollectionsInput>
    create: XOR<ContentCreateWithoutCollectionsInput, ContentUncheckedCreateWithoutCollectionsInput>
  }

  export type ContentUpdateWithWhereUniqueWithoutCollectionsInput = {
    where: ContentWhereUniqueInput
    data: XOR<ContentUpdateWithoutCollectionsInput, ContentUncheckedUpdateWithoutCollectionsInput>
  }

  export type ContentUpdateManyWithWhereWithoutCollectionsInput = {
    where: ContentScalarWhereInput
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyWithoutCollectionsInput>
  }

  export type CollectionPaymentUpsertWithWhereUniqueWithoutCollectionInput = {
    where: CollectionPaymentWhereUniqueInput
    update: XOR<CollectionPaymentUpdateWithoutCollectionInput, CollectionPaymentUncheckedUpdateWithoutCollectionInput>
    create: XOR<CollectionPaymentCreateWithoutCollectionInput, CollectionPaymentUncheckedCreateWithoutCollectionInput>
  }

  export type CollectionPaymentUpdateWithWhereUniqueWithoutCollectionInput = {
    where: CollectionPaymentWhereUniqueInput
    data: XOR<CollectionPaymentUpdateWithoutCollectionInput, CollectionPaymentUncheckedUpdateWithoutCollectionInput>
  }

  export type CollectionPaymentUpdateManyWithWhereWithoutCollectionInput = {
    where: CollectionPaymentScalarWhereInput
    data: XOR<CollectionPaymentUpdateManyMutationInput, CollectionPaymentUncheckedUpdateManyWithoutCollectionInput>
  }

  export type CategorableCreateWithoutCategoryInput = {
    categorableType: string
    content?: ContentCreateNestedOneWithoutCategoriesInput
  }

  export type CategorableUncheckedCreateWithoutCategoryInput = {
    categorableId: string
    categorableType: string
  }

  export type CategorableCreateOrConnectWithoutCategoryInput = {
    where: CategorableWhereUniqueInput
    create: XOR<CategorableCreateWithoutCategoryInput, CategorableUncheckedCreateWithoutCategoryInput>
  }

  export type CategorableCreateManyCategoryInputEnvelope = {
    data: CategorableCreateManyCategoryInput | CategorableCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategorableUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CategorableWhereUniqueInput
    update: XOR<CategorableUpdateWithoutCategoryInput, CategorableUncheckedUpdateWithoutCategoryInput>
    create: XOR<CategorableCreateWithoutCategoryInput, CategorableUncheckedCreateWithoutCategoryInput>
  }

  export type CategorableUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CategorableWhereUniqueInput
    data: XOR<CategorableUpdateWithoutCategoryInput, CategorableUncheckedUpdateWithoutCategoryInput>
  }

  export type CategorableUpdateManyWithWhereWithoutCategoryInput = {
    where: CategorableScalarWhereInput
    data: XOR<CategorableUpdateManyMutationInput, CategorableUncheckedUpdateManyWithoutCategoryInput>
  }

  export type TaggableCreateWithoutTagInput = {
    taggableType: string
    content?: ContentCreateNestedOneWithoutTagsInput
  }

  export type TaggableUncheckedCreateWithoutTagInput = {
    taggableId: string
    taggableType: string
  }

  export type TaggableCreateOrConnectWithoutTagInput = {
    where: TaggableWhereUniqueInput
    create: XOR<TaggableCreateWithoutTagInput, TaggableUncheckedCreateWithoutTagInput>
  }

  export type TaggableCreateManyTagInputEnvelope = {
    data: TaggableCreateManyTagInput | TaggableCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TaggableUpsertWithWhereUniqueWithoutTagInput = {
    where: TaggableWhereUniqueInput
    update: XOR<TaggableUpdateWithoutTagInput, TaggableUncheckedUpdateWithoutTagInput>
    create: XOR<TaggableCreateWithoutTagInput, TaggableUncheckedCreateWithoutTagInput>
  }

  export type TaggableUpdateWithWhereUniqueWithoutTagInput = {
    where: TaggableWhereUniqueInput
    data: XOR<TaggableUpdateWithoutTagInput, TaggableUncheckedUpdateWithoutTagInput>
  }

  export type TaggableUpdateManyWithWhereWithoutTagInput = {
    where: TaggableScalarWhereInput
    data: XOR<TaggableUpdateManyMutationInput, TaggableUncheckedUpdateManyWithoutTagInput>
  }

  export type UserCreateWithoutSubscriptionsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
  }

  export type ContentCreateWithoutSubscriptionsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutContents_createdInput
    collections?: CollectionCreateNestedManyWithoutContentsInput
    categories?: CategorableCreateNestedManyWithoutContentInput
    tags?: TaggableCreateNestedManyWithoutContentInput
    payments?: ContentPaymentCreateNestedManyWithoutContentInput
    comments?: ContentCommentCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    ownerId: string
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    collections?: CollectionUncheckedCreateNestedManyWithoutContentsInput
    categories?: CategorableUncheckedCreateNestedManyWithoutContentInput
    tags?: TaggableUncheckedCreateNestedManyWithoutContentInput
    payments?: ContentPaymentUncheckedCreateNestedManyWithoutContentInput
    comments?: ContentCommentUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutSubscriptionsInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutSubscriptionsInput, ContentUncheckedCreateWithoutSubscriptionsInput>
  }

  export type UserUpsertWithoutSubscriptionsInput = {
    update: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContentUpsertWithoutSubscriptionsInput = {
    update: XOR<ContentUpdateWithoutSubscriptionsInput, ContentUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<ContentCreateWithoutSubscriptionsInput, ContentUncheckedCreateWithoutSubscriptionsInput>
    where?: ContentWhereInput
  }

  export type ContentUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: ContentWhereInput
    data: XOR<ContentUpdateWithoutSubscriptionsInput, ContentUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type ContentUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutContents_createdNestedInput
    collections?: CollectionUpdateManyWithoutContentsNestedInput
    categories?: CategorableUpdateManyWithoutContentNestedInput
    tags?: TaggableUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    collections?: CollectionUncheckedUpdateManyWithoutContentsNestedInput
    categories?: CategorableUncheckedUpdateManyWithoutContentNestedInput
    tags?: TaggableUncheckedUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUncheckedUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type UserCreateWithoutWalletInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWalletInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWalletInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
  }

  export type UserUpsertWithoutWalletInput = {
    update: XOR<UserUpdateWithoutWalletInput, UserUncheckedUpdateWithoutWalletInput>
    create: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWalletInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWalletInput, UserUncheckedUpdateWithoutWalletInput>
  }

  export type UserUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutContent_commentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContent_commentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContent_commentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContent_commentsInput, UserUncheckedCreateWithoutContent_commentsInput>
  }

  export type ContentCreateWithoutCommentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutContents_createdInput
    subscriptions?: SubscriptionCreateNestedManyWithoutContentInput
    collections?: CollectionCreateNestedManyWithoutContentsInput
    categories?: CategorableCreateNestedManyWithoutContentInput
    tags?: TaggableCreateNestedManyWithoutContentInput
    payments?: ContentPaymentCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutCommentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    ownerId: string
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutContentInput
    collections?: CollectionUncheckedCreateNestedManyWithoutContentsInput
    categories?: CategorableUncheckedCreateNestedManyWithoutContentInput
    tags?: TaggableUncheckedCreateNestedManyWithoutContentInput
    payments?: ContentPaymentUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutCommentsInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutCommentsInput, ContentUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutContent_commentsInput = {
    update: XOR<UserUpdateWithoutContent_commentsInput, UserUncheckedUpdateWithoutContent_commentsInput>
    create: XOR<UserCreateWithoutContent_commentsInput, UserUncheckedCreateWithoutContent_commentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContent_commentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContent_commentsInput, UserUncheckedUpdateWithoutContent_commentsInput>
  }

  export type UserUpdateWithoutContent_commentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContent_commentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContentUpsertWithoutCommentsInput = {
    update: XOR<ContentUpdateWithoutCommentsInput, ContentUncheckedUpdateWithoutCommentsInput>
    create: XOR<ContentCreateWithoutCommentsInput, ContentUncheckedCreateWithoutCommentsInput>
    where?: ContentWhereInput
  }

  export type ContentUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ContentWhereInput
    data: XOR<ContentUpdateWithoutCommentsInput, ContentUncheckedUpdateWithoutCommentsInput>
  }

  export type ContentUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutContents_createdNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutContentNestedInput
    collections?: CollectionUpdateManyWithoutContentsNestedInput
    categories?: CategorableUpdateManyWithoutContentNestedInput
    tags?: TaggableUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutContentNestedInput
    collections?: CollectionUncheckedUpdateManyWithoutContentsNestedInput
    categories?: CategorableUncheckedUpdateManyWithoutContentNestedInput
    tags?: TaggableUncheckedUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type UserCreateWithoutFollowersInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowersInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
  }

  export type UserCreateWithoutFollowingInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserUpsertWithoutFollowersInput = {
    update: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutFollowingInput = {
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutContent_paymentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    collection_payments?: CollectionPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContent_paymentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    collection_payments?: CollectionPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContent_paymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContent_paymentsInput, UserUncheckedCreateWithoutContent_paymentsInput>
  }

  export type ContentCreateWithoutPaymentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutContents_createdInput
    subscriptions?: SubscriptionCreateNestedManyWithoutContentInput
    collections?: CollectionCreateNestedManyWithoutContentsInput
    categories?: CategorableCreateNestedManyWithoutContentInput
    tags?: TaggableCreateNestedManyWithoutContentInput
    comments?: ContentCommentCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutPaymentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    ownerId: string
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutContentInput
    collections?: CollectionUncheckedCreateNestedManyWithoutContentsInput
    categories?: CategorableUncheckedCreateNestedManyWithoutContentInput
    tags?: TaggableUncheckedCreateNestedManyWithoutContentInput
    comments?: ContentCommentUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutPaymentsInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutPaymentsInput, ContentUncheckedCreateWithoutPaymentsInput>
  }

  export type UserUpsertWithoutContent_paymentsInput = {
    update: XOR<UserUpdateWithoutContent_paymentsInput, UserUncheckedUpdateWithoutContent_paymentsInput>
    create: XOR<UserCreateWithoutContent_paymentsInput, UserUncheckedCreateWithoutContent_paymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContent_paymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContent_paymentsInput, UserUncheckedUpdateWithoutContent_paymentsInput>
  }

  export type UserUpdateWithoutContent_paymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContent_paymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContentUpsertWithoutPaymentsInput = {
    update: XOR<ContentUpdateWithoutPaymentsInput, ContentUncheckedUpdateWithoutPaymentsInput>
    create: XOR<ContentCreateWithoutPaymentsInput, ContentUncheckedCreateWithoutPaymentsInput>
    where?: ContentWhereInput
  }

  export type ContentUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: ContentWhereInput
    data: XOR<ContentUpdateWithoutPaymentsInput, ContentUncheckedUpdateWithoutPaymentsInput>
  }

  export type ContentUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutContents_createdNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutContentNestedInput
    collections?: CollectionUpdateManyWithoutContentsNestedInput
    categories?: CategorableUpdateManyWithoutContentNestedInput
    tags?: TaggableUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutContentNestedInput
    collections?: CollectionUncheckedUpdateManyWithoutContentsNestedInput
    categories?: CategorableUncheckedUpdateManyWithoutContentNestedInput
    tags?: TaggableUncheckedUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type UserCreateWithoutCollection_paymentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
    referrer?: UserCreateNestedOneWithoutReferralsInput
    referrals?: UserCreateNestedManyWithoutReferrerInput
    contents_created?: ContentCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
    following?: FollowersCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCollection_paymentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    referrerId?: string | null
    privyId: string
    referrals?: UserUncheckedCreateNestedManyWithoutReferrerInput
    contents_created?: ContentUncheckedCreateNestedManyWithoutOwnerInput
    collections_created?: CollectionUncheckedCreateNestedManyWithoutOwnerInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
    following?: FollowersUncheckedCreateNestedManyWithoutFollowerInput
    content_payments?: ContentPaymentUncheckedCreateNestedManyWithoutUserInput
    content_comments?: ContentCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCollection_paymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCollection_paymentsInput, UserUncheckedCreateWithoutCollection_paymentsInput>
  }

  export type CollectionCreateWithoutPaymentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutCollections_createdInput
    contents?: ContentCreateNestedManyWithoutCollectionsInput
  }

  export type CollectionUncheckedCreateWithoutPaymentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    ownerId: string
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
    contents?: ContentUncheckedCreateNestedManyWithoutCollectionsInput
  }

  export type CollectionCreateOrConnectWithoutPaymentsInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutPaymentsInput, CollectionUncheckedCreateWithoutPaymentsInput>
  }

  export type UserUpsertWithoutCollection_paymentsInput = {
    update: XOR<UserUpdateWithoutCollection_paymentsInput, UserUncheckedUpdateWithoutCollection_paymentsInput>
    create: XOR<UserCreateWithoutCollection_paymentsInput, UserUncheckedCreateWithoutCollection_paymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCollection_paymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCollection_paymentsInput, UserUncheckedUpdateWithoutCollection_paymentsInput>
  }

  export type UserUpdateWithoutCollection_paymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrer?: UserUpdateOneWithoutReferralsNestedInput
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCollection_paymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referrerId?: NullableStringFieldUpdateOperationsInput | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CollectionUpsertWithoutPaymentsInput = {
    update: XOR<CollectionUpdateWithoutPaymentsInput, CollectionUncheckedUpdateWithoutPaymentsInput>
    create: XOR<CollectionCreateWithoutPaymentsInput, CollectionUncheckedCreateWithoutPaymentsInput>
    where?: CollectionWhereInput
  }

  export type CollectionUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: CollectionWhereInput
    data: XOR<CollectionUpdateWithoutPaymentsInput, CollectionUncheckedUpdateWithoutPaymentsInput>
  }

  export type CollectionUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutCollections_createdNestedInput
    contents?: ContentUpdateManyWithoutCollectionsNestedInput
  }

  export type CollectionUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contents?: ContentUncheckedUpdateManyWithoutCollectionsNestedInput
  }

  export type CategoryCreateWithoutContentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    slug: string
  }

  export type CategoryUncheckedCreateWithoutContentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    slug: string
  }

  export type CategoryCreateOrConnectWithoutContentsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutContentsInput, CategoryUncheckedCreateWithoutContentsInput>
  }

  export type ContentCreateWithoutCategoriesInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutContents_createdInput
    subscriptions?: SubscriptionCreateNestedManyWithoutContentInput
    collections?: CollectionCreateNestedManyWithoutContentsInput
    tags?: TaggableCreateNestedManyWithoutContentInput
    payments?: ContentPaymentCreateNestedManyWithoutContentInput
    comments?: ContentCommentCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutCategoriesInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    ownerId: string
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutContentInput
    collections?: CollectionUncheckedCreateNestedManyWithoutContentsInput
    tags?: TaggableUncheckedCreateNestedManyWithoutContentInput
    payments?: ContentPaymentUncheckedCreateNestedManyWithoutContentInput
    comments?: ContentCommentUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutCategoriesInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutCategoriesInput, ContentUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryUpsertWithoutContentsInput = {
    update: XOR<CategoryUpdateWithoutContentsInput, CategoryUncheckedUpdateWithoutContentsInput>
    create: XOR<CategoryCreateWithoutContentsInput, CategoryUncheckedCreateWithoutContentsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutContentsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutContentsInput, CategoryUncheckedUpdateWithoutContentsInput>
  }

  export type CategoryUpdateWithoutContentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutContentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type ContentUpsertWithoutCategoriesInput = {
    update: XOR<ContentUpdateWithoutCategoriesInput, ContentUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ContentCreateWithoutCategoriesInput, ContentUncheckedCreateWithoutCategoriesInput>
    where?: ContentWhereInput
  }

  export type ContentUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: ContentWhereInput
    data: XOR<ContentUpdateWithoutCategoriesInput, ContentUncheckedUpdateWithoutCategoriesInput>
  }

  export type ContentUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutContents_createdNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutContentNestedInput
    collections?: CollectionUpdateManyWithoutContentsNestedInput
    tags?: TaggableUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutContentNestedInput
    collections?: CollectionUncheckedUpdateManyWithoutContentsNestedInput
    tags?: TaggableUncheckedUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUncheckedUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type TagCreateWithoutContentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    slug: string
  }

  export type TagUncheckedCreateWithoutContentsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    slug: string
  }

  export type TagCreateOrConnectWithoutContentsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutContentsInput, TagUncheckedCreateWithoutContentsInput>
  }

  export type ContentCreateWithoutTagsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    owner: UserCreateNestedOneWithoutContents_createdInput
    subscriptions?: SubscriptionCreateNestedManyWithoutContentInput
    collections?: CollectionCreateNestedManyWithoutContentsInput
    categories?: CategorableCreateNestedManyWithoutContentInput
    payments?: ContentPaymentCreateNestedManyWithoutContentInput
    comments?: ContentCommentCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutTagsInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    ownerId: string
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutContentInput
    collections?: CollectionUncheckedCreateNestedManyWithoutContentsInput
    categories?: CategorableUncheckedCreateNestedManyWithoutContentInput
    payments?: ContentPaymentUncheckedCreateNestedManyWithoutContentInput
    comments?: ContentCommentUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutTagsInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutTagsInput, ContentUncheckedCreateWithoutTagsInput>
  }

  export type TagUpsertWithoutContentsInput = {
    update: XOR<TagUpdateWithoutContentsInput, TagUncheckedUpdateWithoutContentsInput>
    create: XOR<TagCreateWithoutContentsInput, TagUncheckedCreateWithoutContentsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutContentsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutContentsInput, TagUncheckedUpdateWithoutContentsInput>
  }

  export type TagUpdateWithoutContentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutContentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type ContentUpsertWithoutTagsInput = {
    update: XOR<ContentUpdateWithoutTagsInput, ContentUncheckedUpdateWithoutTagsInput>
    create: XOR<ContentCreateWithoutTagsInput, ContentUncheckedCreateWithoutTagsInput>
    where?: ContentWhereInput
  }

  export type ContentUpdateToOneWithWhereWithoutTagsInput = {
    where?: ContentWhereInput
    data: XOR<ContentUpdateWithoutTagsInput, ContentUncheckedUpdateWithoutTagsInput>
  }

  export type ContentUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutContents_createdNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutContentNestedInput
    collections?: CollectionUpdateManyWithoutContentsNestedInput
    categories?: CategorableUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutContentNestedInput
    collections?: CollectionUncheckedUpdateManyWithoutContentsNestedInput
    categories?: CategorableUncheckedUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUncheckedUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type UserCreateManyReferrerInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    firstName?: string | null
    lastName?: string | null
    email: string
    username: string
    bio?: string | null
    dob?: Date | string | null
    referral_id?: string | null
    email_verified?: boolean
    phone_number?: string | null
    kyc_verified?: boolean | null
    user_charge_type?: string
    role?: $Enums.Role
    verified?: boolean
    avatar?: string | null
    followerCount?: number
    followingCount?: number
    contentCount?: number
    lastActive?: Date | string | null
    privyId: string
  }

  export type ContentCreateManyOwnerInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    title: string
    description?: string | null
    type: string
    is_available?: boolean
    approved_by_admin?: boolean
    show_only_in_collections?: boolean
    views?: number
    is_adult?: boolean
    is_challenge?: boolean
    live_ended_at?: Date | string | null
    scheduled_date?: Date | string | null
    archived_at?: Date | string | null
    live_type?: string | null
    live_provider?: string | null
    commentCount?: number
    likeCount?: number
    viewCount?: number
    status?: $Enums.ContentStatus
    published?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    mediaUrl?: string | null
    thumbnailUrl?: string | null
  }

  export type CollectionCreateManyOwnerInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    name: string
    description?: string | null
    is_available?: boolean
    approved_by_admin?: boolean
    isPremium?: boolean
    isPromoted?: boolean
    thumbnailUrl?: string | null
  }

  export type SubscriptionCreateManyUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    contentId: string
    status?: $Enums.SubscriptionStatus
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type FollowersCreateManyUserInput = {
    followerId: string
  }

  export type FollowersCreateManyFollowerInput = {
    userId: string
  }

  export type ContentPaymentCreateManyUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    contentId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type CollectionPaymentCreateManyUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    collectionId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type ContentCommentCreateManyUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    commentContent: string
    contentId: string
  }

  export type UserUpdateWithoutReferrerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
    following?: FollowersUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReferrerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
    referrals?: UserUncheckedUpdateManyWithoutReferrerNestedInput
    contents_created?: ContentUncheckedUpdateManyWithoutOwnerNestedInput
    collections_created?: CollectionUncheckedUpdateManyWithoutOwnerNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowersUncheckedUpdateManyWithoutFollowerNestedInput
    content_payments?: ContentPaymentUncheckedUpdateManyWithoutUserNestedInput
    collection_payments?: CollectionPaymentUncheckedUpdateManyWithoutUserNestedInput
    content_comments?: ContentCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutReferrerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    referral_id?: NullableStringFieldUpdateOperationsInput | string | null
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    kyc_verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user_charge_type?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    contentCount?: IntFieldUpdateOperationsInput | number
    lastActive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privyId?: StringFieldUpdateOperationsInput | string
  }

  export type ContentUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUpdateManyWithoutContentNestedInput
    collections?: CollectionUpdateManyWithoutContentsNestedInput
    categories?: CategorableUpdateManyWithoutContentNestedInput
    tags?: TaggableUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutContentNestedInput
    collections?: CollectionUncheckedUpdateManyWithoutContentsNestedInput
    categories?: CategorableUncheckedUpdateManyWithoutContentNestedInput
    tags?: TaggableUncheckedUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUncheckedUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CollectionUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contents?: ContentUpdateManyWithoutCollectionsNestedInput
    payments?: CollectionPaymentUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contents?: ContentUncheckedUpdateManyWithoutCollectionsNestedInput
    payments?: CollectionPaymentUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: ContentUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FollowersUpdateWithoutUserInput = {
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowersUncheckedUpdateWithoutUserInput = {
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowersUncheckedUpdateManyWithoutUserInput = {
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowersUpdateWithoutFollowerInput = {
    user?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowersUncheckedUpdateWithoutFollowerInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowersUncheckedUpdateManyWithoutFollowerInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ContentPaymentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    content?: ContentUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type ContentPaymentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type ContentPaymentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type CollectionPaymentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    collection?: CollectionUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type CollectionPaymentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    collectionId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type CollectionPaymentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    collectionId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type ContentCommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
    content?: ContentUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type ContentCommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type ContentCommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionCreateManyContentInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    status?: $Enums.SubscriptionStatus
    startDate?: Date | string
    endDate?: Date | string | null
  }

  export type CategorableCreateManyContentInput = {
    categoryId: string
    categorableType: string
  }

  export type TaggableCreateManyContentInput = {
    tagId: string
    taggableType: string
  }

  export type ContentPaymentCreateManyContentInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type ContentCommentCreateManyContentInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    commentContent: string
    userId: string
  }

  export type SubscriptionUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubscriptionUncheckedUpdateManyWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CollectionUpdateWithoutContentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutCollections_createdNestedInput
    payments?: CollectionPaymentUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateWithoutContentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: CollectionPaymentUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateManyWithoutContentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategorableUpdateWithoutContentInput = {
    categorableType?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutContentsNestedInput
  }

  export type CategorableUncheckedUpdateWithoutContentInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
    categorableType?: StringFieldUpdateOperationsInput | string
  }

  export type CategorableUncheckedUpdateManyWithoutContentInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
    categorableType?: StringFieldUpdateOperationsInput | string
  }

  export type TaggableUpdateWithoutContentInput = {
    taggableType?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutContentsNestedInput
  }

  export type TaggableUncheckedUpdateWithoutContentInput = {
    tagId?: StringFieldUpdateOperationsInput | string
    taggableType?: StringFieldUpdateOperationsInput | string
  }

  export type TaggableUncheckedUpdateManyWithoutContentInput = {
    tagId?: StringFieldUpdateOperationsInput | string
    taggableType?: StringFieldUpdateOperationsInput | string
  }

  export type ContentPaymentUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    user?: UserUpdateOneRequiredWithoutContent_paymentsNestedInput
  }

  export type ContentPaymentUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type ContentPaymentUncheckedUpdateManyWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type ContentCommentUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutContent_commentsNestedInput
  }

  export type ContentCommentUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ContentCommentUncheckedUpdateManyWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentContent?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CollectionPaymentCreateManyCollectionInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    deleted_at?: Date | string | null
    userId: string
    amount: number
    currency?: string
    status?: $Enums.PaymentStatus
  }

  export type ContentUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutContents_createdNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutContentNestedInput
    categories?: CategorableUpdateManyWithoutContentNestedInput
    tags?: TaggableUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutContentNestedInput
    categories?: CategorableUncheckedUpdateManyWithoutContentNestedInput
    tags?: TaggableUncheckedUpdateManyWithoutContentNestedInput
    payments?: ContentPaymentUncheckedUpdateManyWithoutContentNestedInput
    comments?: ContentCommentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateManyWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    is_available?: BoolFieldUpdateOperationsInput | boolean
    approved_by_admin?: BoolFieldUpdateOperationsInput | boolean
    show_only_in_collections?: BoolFieldUpdateOperationsInput | boolean
    views?: IntFieldUpdateOperationsInput | number
    is_adult?: BoolFieldUpdateOperationsInput | boolean
    is_challenge?: BoolFieldUpdateOperationsInput | boolean
    live_ended_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduled_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archived_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    live_type?: NullableStringFieldUpdateOperationsInput | string | null
    live_provider?: NullableStringFieldUpdateOperationsInput | string | null
    commentCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    status?: EnumContentStatusFieldUpdateOperationsInput | $Enums.ContentStatus
    published?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isPromoted?: BoolFieldUpdateOperationsInput | boolean
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CollectionPaymentUpdateWithoutCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    user?: UserUpdateOneRequiredWithoutCollection_paymentsNestedInput
  }

  export type CollectionPaymentUncheckedUpdateWithoutCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type CollectionPaymentUncheckedUpdateManyWithoutCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type CategorableCreateManyCategoryInput = {
    categorableId: string
    categorableType: string
  }

  export type CategorableUpdateWithoutCategoryInput = {
    categorableType?: StringFieldUpdateOperationsInput | string
    content?: ContentUpdateOneWithoutCategoriesNestedInput
  }

  export type CategorableUncheckedUpdateWithoutCategoryInput = {
    categorableId?: StringFieldUpdateOperationsInput | string
    categorableType?: StringFieldUpdateOperationsInput | string
  }

  export type CategorableUncheckedUpdateManyWithoutCategoryInput = {
    categorableId?: StringFieldUpdateOperationsInput | string
    categorableType?: StringFieldUpdateOperationsInput | string
  }

  export type TaggableCreateManyTagInput = {
    taggableId: string
    taggableType: string
  }

  export type TaggableUpdateWithoutTagInput = {
    taggableType?: StringFieldUpdateOperationsInput | string
    content?: ContentUpdateOneWithoutTagsNestedInput
  }

  export type TaggableUncheckedUpdateWithoutTagInput = {
    taggableId?: StringFieldUpdateOperationsInput | string
    taggableType?: StringFieldUpdateOperationsInput | string
  }

  export type TaggableUncheckedUpdateManyWithoutTagInput = {
    taggableId?: StringFieldUpdateOperationsInput | string
    taggableType?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}